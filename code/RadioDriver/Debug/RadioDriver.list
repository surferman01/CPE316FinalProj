
RadioDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003550  08003550  00004550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003590  08003590  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003590  08003590  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003598  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000014  080035ac  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080035ac  00005134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2c7  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb9  00000000  00000000  0001130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00012fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  00013e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bf3  00000000  00000000  00014914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e326  00000000  00000000  0003a507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebdc9  00000000  00000000  0004882d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001345f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc8  00000000  00000000  0013463c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00138204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003538 	.word	0x08003538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003538 	.word	0x08003538

080001c8 <HAL_GPIO_EXTI_Callback>:
#else
uint8_t test_recieve[NRF24L01P_PAYLOAD_LENGTH] = { 0 };
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b40      	cmp	r3, #64	@ 0x40
 80001d6:	d101      	bne.n	80001dc <HAL_GPIO_EXTI_Callback+0x14>
#ifdef TX
		nrf24l01p_tx_irq();
 80001d8:	f000 fa90 	bl	80006fc <nrf24l01p_tx_irq>
#else
		nrf24l01p_rx_receive(test_recieve);
#endif
	}
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <main>:



int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	HAL_Init();
 80001ea:	f000 fd9a 	bl	8000d22 <HAL_Init>


	SystemClock_Config();
 80001ee:	f000 f82d 	bl	800024c <SystemClock_Config>

	MX_GPIO_Init();
 80001f2:	f000 f959 	bl	80004a8 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001f6:	f000 f87b 	bl	80002f0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80001fa:	f000 f8b7 	bl	800036c <MX_TIM2_Init>
	MX_TIM5_Init();
 80001fe:	f000 f903 	bl	8000408 <MX_TIM5_Init>


	// test code
#ifdef TX
	nrf24l01p_tx_init(2500, _1Mbps, &hspi1);
 8000202:	4a10      	ldr	r2, [pc, #64]	@ (8000244 <main+0x60>)
 8000204:	2100      	movs	r1, #0
 8000206:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800020a:	f000 fa3b 	bl	8000684 <nrf24l01p_tx_init>

	while (1)
	{
#ifdef TX
		// change tx test data
		for(int i= 0; i < 8; i++)
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e00d      	b.n	8000230 <main+0x4c>
			test_transmit[i]++;
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <main+0x64>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	b2d9      	uxtb	r1, r3
 8000220:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <main+0x64>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		for(int i= 0; i < 8; i++)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b07      	cmp	r3, #7
 8000234:	ddee      	ble.n	8000214 <main+0x30>

		// transmit
		nrf24l01p_tx_transmit(test_transmit);
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <main+0x64>)
 8000238:	f000 fa54 	bl	80006e4 <nrf24l01p_tx_transmit>
#else
		// do nothing for now
#endif
		HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	@ 0x64
 800023e:	f000 fde5 	bl	8000e0c <HAL_Delay>
		for(int i= 0; i < 8; i++)
 8000242:	e7e4      	b.n	800020e <main+0x2a>
 8000244:	20000030 	.word	0x20000030
 8000248:	20000000 	.word	0x20000000

0800024c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	@ 0x58
 8000250:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	@ 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 f940 	bl	80034e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000272:	f001 f903 	bl	800147c <HAL_PWREx_ControlVoltageScaling>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800027c:	f000 f976 	bl	800056c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000288:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2310      	movs	r3, #16
 800028c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000296:	2301      	movs	r3, #1
 8000298:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800029a:	230a      	movs	r3, #10
 800029c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800029e:	2307      	movs	r3, #7
 80002a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f93a 	bl	8001528 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x72>
	{
		Error_Handler();
 80002ba:	f000 f957 	bl	800056c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fd02 	bl	8001ce0 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80002e2:	f000 f943 	bl	800056c <Error_Handler>
	}
}
 80002e6:	bf00      	nop
 80002e8:	3758      	adds	r7, #88	@ 0x58
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000368 <MX_SPI1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000300:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <MX_SPI1_Init+0x74>)
 800030a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800030e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_SPI1_Init+0x74>)
 800031e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000322:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_SPI1_Init+0x74>)
 800033e:	2207      	movs	r2, #7
 8000340:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_SPI1_Init+0x74>)
 800034a:	2208      	movs	r2, #8
 800034c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000350:	f001 feb2 	bl	80020b8 <HAL_SPI_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 800035a:	f000 f907 	bl	800056c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000030 	.word	0x20000030
 8000368:	40013000 	.word	0x40013000

0800036c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800038a:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <MX_TIM2_Init+0x98>)
 800038c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000390:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3999;
 8000392:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <MX_TIM2_Init+0x98>)
 8000394:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000398:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_TIM2_Init+0x98>)
 800039c:	2210      	movs	r2, #16
 800039e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a2:	2213      	movs	r2, #19
 80003a4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b6:	f002 fdab 	bl	8002f10 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 80003c0:	f000 f8d4 	bl	800056c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003d2:	f002 fdf4 	bl	8002fbe <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 80003dc:	f000 f8c6 	bl	800056c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003ee:	f002 ffef 	bl	80033d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 80003f8:	f000 f8b8 	bl	800056c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000094 	.word	0x20000094

08000408 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000428:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <MX_TIM5_Init+0x9c>)
 800042a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 79;
 800042c:	4b1c      	ldr	r3, [pc, #112]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800042e:	224f      	movs	r2, #79	@ 0x4f
 8000430:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000432:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000438:	4b19      	ldr	r3, [pc, #100]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800043a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800043e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000440:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000442:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000446:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800044e:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000450:	f002 fd5e 	bl	8002f10 <HAL_TIM_Base_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM5_Init+0x56>
	{
		Error_Handler();
 800045a:	f000 f887 	bl	800056c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000462:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800046c:	f002 fda7 	bl	8002fbe <HAL_TIM_ConfigClockSource>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM5_Init+0x72>
	{
		Error_Handler();
 8000476:	f000 f879 	bl	800056c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000488:	f002 ffa2 	bl	80033d0 <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM5_Init+0x8e>
	{
		Error_Handler();
 8000492:	f000 f86b 	bl	800056c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	40000c00 	.word	0x40000c00

080004a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b28      	ldr	r3, [pc, #160]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a27      	ldr	r2, [pc, #156]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	@ 0x40
 800050a:	4816      	ldr	r0, [pc, #88]	@ (8000564 <MX_GPIO_Init+0xbc>)
 800050c:	f000 ff5e 	bl	80013cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000514:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000518:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	4810      	ldr	r0, [pc, #64]	@ (8000568 <MX_GPIO_Init+0xc0>)
 8000526:	f000 fda7 	bl	8001078 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 800052a:	2340      	movs	r3, #64	@ 0x40
 800052c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4808      	ldr	r0, [pc, #32]	@ (8000564 <MX_GPIO_Init+0xbc>)
 8000542:	f000 fd99 	bl	8001078 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2017      	movs	r0, #23
 800054c:	f000 fd5d 	bl	800100a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000550:	2017      	movs	r0, #23
 8000552:	f000 fd76 	bl	8001042 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000556:	bf00      	nop
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400
 8000568:	48000800 	.word	0x48000800

0800056c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <Error_Handler+0x8>

08000578 <cs_high>:
// alex: added this
static SPI_HandleTypeDef *spi_handle;


static void cs_high()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 ff21 	bl	80013cc <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <cs_low>:

static void cs_low()
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f000 ff16 	bl	80013cc <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <ce_high>:

static void ce_high()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <ce_high+0x14>)
 80005ae:	f000 ff0d 	bl	80013cc <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	48000800 	.word	0x48000800

080005bc <ce_low>:

static void ce_low()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2180      	movs	r1, #128	@ 0x80
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <ce_low+0x14>)
 80005c6:	f000 ff01 	bl	80013cc <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000800 	.word	0x48000800

080005d4 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af02      	add	r7, sp, #8
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80005e2:	f7ff ffd4 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <read_register+0x4c>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	f107 020e 	add.w	r2, r7, #14
 80005ee:	f107 010f 	add.w	r1, r7, #15
 80005f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	f002 f8ae 	bl	800275a <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, &read_val, 1, 2000);
 80005fe:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <read_register+0x4c>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	f107 010d 	add.w	r1, r7, #13
 8000606:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800060a:	2201      	movs	r2, #1
 800060c:	f001 ff6d 	bl	80024ea <HAL_SPI_Receive>
    cs_high();
 8000610:	f7ff ffb2 	bl	8000578 <cs_high>

    return read_val;
 8000614:	7b7b      	ldrb	r3, [r7, #13]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000012c 	.word	0x2000012c

08000624 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000642:	f7ff ffa4 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <write_register+0x5c>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f107 020e 	add.w	r2, r7, #14
 800064e:	f107 010f 	add.w	r1, r7, #15
 8000652:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	f002 f87e 	bl	800275a <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, &write_val, 1, 2000);
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <write_register+0x5c>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 010d 	add.w	r1, r7, #13
 8000666:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800066a:	2201      	movs	r2, #1
 800066c:	f001 fdc7 	bl	80021fe <HAL_SPI_Transmit>
    cs_high();
 8000670:	f7ff ff82 	bl	8000578 <cs_high>

    return write_val;
 8000674:	7b7b      	ldrb	r3, [r7, #13]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000012c 	.word	0x2000012c

08000684 <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps, SPI_HandleTypeDef *hspi)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	80fb      	strh	r3, [r7, #6]
 8000690:	460b      	mov	r3, r1
 8000692:	717b      	strb	r3, [r7, #5]
	spi_handle = hspi;
 8000694:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <nrf24l01p_tx_init+0x5c>)
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	6013      	str	r3, [r2, #0]

    nrf24l01p_reset();
 800069a:	f000 f84d 	bl	8000738 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 800069e:	f000 f89f 	bl	80007e0 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 80006a2:	f000 f94f 	bl	8000944 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f9d7 	bl	8000a5c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fa04 	bl	8000abe <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f9e3 	bl	8000a82 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f956 	bl	800096e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80006c2:	2005      	movs	r0, #5
 80006c4:	f000 f976 	bl	80009b4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f983 	bl	80009d4 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80006ce:	20fa      	movs	r0, #250	@ 0xfa
 80006d0:	f000 f99c 	bl	8000a0c <nrf24l01p_auto_retransmit_delay>

    ce_high();
 80006d4:	f7ff ff66 	bl	80005a4 <ce_high>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000012c 	.word	0x2000012c

080006e4 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f88d 	bl	800080c <nrf24l01p_write_tx_fifo>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000702:	f000 f8dd 	bl	80008c0 <nrf24l01p_get_status>
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 0320 	and.w	r3, r3, #32
 8000710:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <nrf24l01p_tx_irq+0x2c>
    {
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <nrf24l01p_tx_irq+0x38>)
 800071e:	f000 fe6d 	bl	80013fc <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8000722:	f000 f8e7 	bl	80008f4 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
       //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8000726:	e001      	b.n	800072c <nrf24l01p_tx_irq+0x30>
        nrf24l01p_clear_max_rt();
 8000728:	f000 f8f8 	bl	800091c <nrf24l01p_clear_max_rt>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	48000800 	.word	0x48000800

08000738 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800073c:	f7ff ff1c 	bl	8000578 <cs_high>
    ce_low();
 8000740:	f7ff ff3c 	bl	80005bc <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000744:	2108      	movs	r1, #8
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ff6c 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800074c:	213f      	movs	r1, #63	@ 0x3f
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ff68 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000754:	2103      	movs	r1, #3
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff ff64 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800075c:	2103      	movs	r1, #3
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff ff60 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000764:	2103      	movs	r1, #3
 8000766:	2004      	movs	r0, #4
 8000768:	f7ff ff5c 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800076c:	2102      	movs	r1, #2
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff58 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000774:	2107      	movs	r1, #7
 8000776:	2006      	movs	r0, #6
 8000778:	f7ff ff54 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800077c:	217e      	movs	r1, #126	@ 0x7e
 800077e:	2007      	movs	r0, #7
 8000780:	f7ff ff50 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000784:	2100      	movs	r1, #0
 8000786:	2011      	movs	r0, #17
 8000788:	f7ff ff4c 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800078c:	2100      	movs	r1, #0
 800078e:	2011      	movs	r0, #17
 8000790:	f7ff ff48 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000794:	2100      	movs	r1, #0
 8000796:	2012      	movs	r0, #18
 8000798:	f7ff ff44 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800079c:	2100      	movs	r1, #0
 800079e:	2013      	movs	r0, #19
 80007a0:	f7ff ff40 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2014      	movs	r0, #20
 80007a8:	f7ff ff3c 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2015      	movs	r0, #21
 80007b0:	f7ff ff38 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80007b4:	2100      	movs	r1, #0
 80007b6:	2016      	movs	r0, #22
 80007b8:	f7ff ff34 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80007bc:	2111      	movs	r1, #17
 80007be:	2017      	movs	r0, #23
 80007c0:	f7ff ff30 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80007c4:	2100      	movs	r1, #0
 80007c6:	201c      	movs	r0, #28
 80007c8:	f7ff ff2c 	bl	8000624 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80007cc:	2100      	movs	r1, #0
 80007ce:	201d      	movs	r0, #29
 80007d0:	f7ff ff28 	bl	8000624 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80007d4:	f000 f840 	bl	8000858 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80007d8:	f000 f858 	bl	800088c <nrf24l01p_flush_tx_fifo>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fef4 	bl	80005d4 <read_register>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f023 0301 	bic.w	r3, r3, #1
 80007f6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ff11 	bl	8000624 <write_register>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000814:	23a0      	movs	r3, #160	@ 0xa0
 8000816:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000818:	f7ff feb9 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <nrf24l01p_write_tx_fifo+0x48>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	f107 020e 	add.w	r2, r7, #14
 8000824:	f107 010f 	add.w	r1, r7, #15
 8000828:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	f001 ff93 	bl	800275a <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <nrf24l01p_write_tx_fifo+0x48>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800083c:	2208      	movs	r2, #8
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f001 fcdd 	bl	80021fe <HAL_SPI_Transmit>
    cs_high();
 8000844:	f7ff fe98 	bl	8000578 <cs_high>

    return status;
 8000848:	7bbb      	ldrb	r3, [r7, #14]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000012c 	.word	0x2000012c

08000858 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800085e:	23e2      	movs	r3, #226	@ 0xe2
 8000860:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000862:	f7ff fe94 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <nrf24l01p_flush_rx_fifo+0x30>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	1dba      	adds	r2, r7, #6
 800086c:	1df9      	adds	r1, r7, #7
 800086e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	f001 ff70 	bl	800275a <HAL_SPI_TransmitReceive>
    cs_high();
 800087a:	f7ff fe7d 	bl	8000578 <cs_high>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000012c 	.word	0x2000012c

0800088c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000892:	23e1      	movs	r3, #225	@ 0xe1
 8000894:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000896:	f7ff fe7a 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <nrf24l01p_flush_tx_fifo+0x30>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	1dba      	adds	r2, r7, #6
 80008a0:	1df9      	adds	r1, r7, #7
 80008a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	f001 ff56 	bl	800275a <HAL_SPI_TransmitReceive>
    cs_high();
 80008ae:	f7ff fe63 	bl	8000578 <cs_high>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000012c 	.word	0x2000012c

080008c0 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80008c6:	23ff      	movs	r3, #255	@ 0xff
 80008c8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80008ca:	f7ff fe60 	bl	800058e <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <nrf24l01p_get_status+0x30>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	1dba      	adds	r2, r7, #6
 80008d4:	1df9      	adds	r1, r7, #7
 80008d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f001 ff3c 	bl	800275a <HAL_SPI_TransmitReceive>
    cs_high();
 80008e2:	f7ff fe49 	bl	8000578 <cs_high>

    return status;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000012c 	.word	0x2000012c

080008f4 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80008fa:	f7ff ffe1 	bl	80008c0 <nrf24l01p_get_status>
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4619      	mov	r1, r3
 800090e:	2007      	movs	r0, #7
 8000910:	f7ff fe88 	bl	8000624 <write_register>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000922:	f7ff ffcd 	bl	80008c0 <nrf24l01p_get_status>
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4619      	mov	r1, r3
 8000936:	2007      	movs	r0, #7
 8000938:	f7ff fe74 	bl	8000624 <write_register>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fe42 	bl	80005d4 <read_register>
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4619      	mov	r1, r3
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fe5f 	bl	8000624 <write_register>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fe2b 	bl	80005d4 <read_register>
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d002      	beq.n	800098e <nrf24l01p_set_crc_length+0x20>
 8000988:	2b02      	cmp	r3, #2
 800098a:	d005      	beq.n	8000998 <nrf24l01p_set_crc_length+0x2a>
 800098c:	e009      	b.n	80009a2 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	f023 0304 	bic.w	r3, r3, #4
 8000994:	73fb      	strb	r3, [r7, #15]
            break;
 8000996:	e004      	b.n	80009a2 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	73fb      	strb	r3, [r7, #15]
            break;
 80009a0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4619      	mov	r1, r3
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe3c 	bl	8000624 <write_register>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	3b02      	subs	r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4619      	mov	r1, r3
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fe2c 	bl	8000624 <write_register>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80009de:	2004      	movs	r0, #4
 80009e0:	f7ff fdf8 	bl	80005d4 <read_register>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f063 030f 	orn	r3, r3, #15
 80009ee:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4619      	mov	r1, r3
 80009fc:	2004      	movs	r0, #4
 80009fe:	f7ff fe11 	bl	8000624 <write_register>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000a16:	2004      	movs	r0, #4
 8000a18:	f7ff fddc 	bl	80005d4 <read_register>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f043 030f 	orr.w	r3, r3, #15
 8000a26:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	b25a      	sxtb	r2, r3
 8000a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2004      	movs	r0, #4
 8000a4c:	f7ff fdea 	bl	8000624 <write_register>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	10624dd3 	.word	0x10624dd3

08000a5c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000a6c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	2005      	movs	r0, #5
 8000a76:	f7ff fdd5 	bl	8000624 <write_register>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000a8c:	2006      	movs	r0, #6
 8000a8e:	f7ff fda1 	bl	80005d4 <read_register>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f023 0306 	bic.w	r3, r3, #6
 8000a98:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff fdb7 	bl	8000624 <write_register>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f7ff fd83 	bl	80005d4 <read_register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000ad4:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00a      	beq.n	8000af2 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	dc0e      	bgt.n	8000afe <nrf24l01p_set_rf_air_data_rate+0x40>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00b      	beq.n	8000afc <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10a      	bne.n	8000afe <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	73fb      	strb	r3, [r7, #15]
            break;
 8000af0:	e005      	b.n	8000afe <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	73fb      	strb	r3, [r7, #15]
            break;
 8000afa:	e000      	b.n	8000afe <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000afc:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2006      	movs	r0, #6
 8000b04:	f7ff fd8e 	bl	8000624 <write_register>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_SPI_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	4a16      	ldr	r2, [pc, #88]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000baa:	23e0      	movs	r3, #224	@ 0xe0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fa56 	bl	8001078 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bec:	d10c      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c06:	e010      	b.n	8000c2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <HAL_TIM_Base_MspInit+0x60>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10b      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40000c00 	.word	0x40000c00

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f899 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000ca2:	2080      	movs	r0, #128	@ 0x80
 8000ca4:	f000 fbc4 	bl	8001430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fbf7 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fa6f 	bl	80001e4 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d14:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8000d18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d1c:	20000134 	.word	0x20000134

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>

08000d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f961 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f80e 	bl	8000d54 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d44:	f7ff fee4 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_InitTick+0x70>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f96d 	bl	800105e <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d809      	bhi.n	8000da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d98:	f000 f937 	bl	800100a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_InitTick+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	2000000c 	.word	0x2000000c

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000010 	.word	0x20000010
 8000df0:	20000130 	.word	0x20000130

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000130 	.word	0x20000130

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000010 	.word	0x20000010

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e17f      	b.n	8001388 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8171 	beq.w	8001382 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d118      	bne.n	8001158 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80ac 	beq.w	8001382 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b5f      	ldr	r3, [pc, #380]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	4a5e      	ldr	r2, [pc, #376]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6613      	str	r3, [r2, #96]	@ 0x60
 8001236:	4b5c      	ldr	r3, [pc, #368]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001242:	4a5a      	ldr	r2, [pc, #360]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x242>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4f      	ldr	r2, [pc, #316]	@ (80013b0 <HAL_GPIO_Init+0x338>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x23e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4e      	ldr	r2, [pc, #312]	@ (80013b4 <HAL_GPIO_Init+0x33c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x23a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4d      	ldr	r2, [pc, #308]	@ (80013b8 <HAL_GPIO_Init+0x340>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x236>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x344>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x232>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4b      	ldr	r2, [pc, #300]	@ (80013c0 <HAL_GPIO_Init+0x348>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x22e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4a      	ldr	r2, [pc, #296]	@ (80013c4 <HAL_GPIO_Init+0x34c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x22a>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4937      	ldr	r1, [pc, #220]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fe:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001304:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001328:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001352:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800137c:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae78 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000800 	.word	0x48000800
 80013b8:	48000c00 	.word	0x48000c00
 80013bc:	48001000 	.word	0x48001000
 80013c0:	48001400 	.word	0x48001400
 80013c4:	48001800 	.word	0x48001800
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43d9      	mvns	r1, r3
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	400b      	ands	r3, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe feba 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <HAL_PWREx_GetVoltageRange+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800148a:	d130      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001498:	d038      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a2:	4a1e      	ldr	r2, [pc, #120]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2232      	movs	r2, #50	@ 0x32
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	e002      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e8:	d110      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e00f      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fa:	d007      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	20000008 	.word	0x20000008
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ca      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b97      	ldr	r3, [pc, #604]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80e4 	beq.w	8001724 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f040 808b 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 8087 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	4b89      	ldr	r3, [pc, #548]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x62>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e3a2      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_OscConfig+0x88>
 80015a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d223      	bcs.n	80015fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd1d 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e383      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a72      	ldr	r2, [pc, #456]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	496d      	ldr	r1, [pc, #436]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4968      	ldr	r1, [pc, #416]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4960      	ldr	r1, [pc, #384]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	495b      	ldr	r1, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fcdd 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e343      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001648:	f000 fc4a 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b52      	ldr	r3, [pc, #328]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4950      	ldr	r1, [pc, #320]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a4e      	ldr	r2, [pc, #312]	@ (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001668:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb71 	bl	8000d54 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d052      	beq.n	8001722 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	e327      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001688:	4b43      	ldr	r3, [pc, #268]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001694:	f7ff fbae 	bl	8000df4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fbaa 	bl	8000df4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e310      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4931      	ldr	r1, [pc, #196]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	492c      	ldr	r1, [pc, #176]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e01a      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb7b 	bl	8000df4 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001702:	f7ff fb77 	bl	8000df4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e2dd      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x1da>
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d074      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x21a>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d064      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d160      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e2ba      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x24a>
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a02      	ldr	r2, [pc, #8]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	08003550 	.word	0x08003550
 80017a0:	20000008 	.word	0x20000008
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb14 	bl	8000df4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb10 	bl	8000df4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e276      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb00 	bl	8000df4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fafc 	bl	8000df4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e262      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e23f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fabb 	bl	8000df4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fab7 	bl	8000df4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e21d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa97 	bl	8000df4 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa93 	bl	8000df4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1f9      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa72 	bl	8000df4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa6e 	bl	8000df4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1d4      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fa55 	bl	8000df4 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fa51 	bl	8000df4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1b7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa18 	bl	8000df4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fa14 	bl	8000df4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e17a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a44:	4b98      	ldr	r3, [pc, #608]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	4a97      	ldr	r2, [pc, #604]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9ca 	bl	8000df4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f9c6 	bl	8000df4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e12a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f9b3 	bl	8000df4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f9af 	bl	8000df4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e113      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a79      	ldr	r2, [pc, #484]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80fe 	beq.w	8001cce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 80d0 	bne.w	8001c7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001adc:	4b72      	ldr	r3, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	3b01      	subs	r3, #1
 8001afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d127      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b1c:	2a07      	cmp	r2, #7
 8001b1e:	bf14      	ite	ne
 8001b20:	2201      	movne	r2, #1
 8001b22:	2200      	moveq	r2, #0
 8001b24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d06e      	beq.n	8001c30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d069      	beq.n	8001c2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b64:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ad      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f938 	bl	8000df4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f934 	bl	8000df4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e09a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bc0:	0212      	lsls	r2, r2, #8
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bc8:	0852      	lsrs	r2, r2, #1
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0552      	lsls	r2, r2, #21
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bd4:	0852      	lsrs	r2, r2, #1
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0652      	lsls	r2, r2, #25
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	0452      	lsls	r2, r2, #17
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4930      	ldr	r1, [pc, #192]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7ff f8f6 	bl	8000df4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f8f2 	bl	8000df4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e058      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2a:	e050      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d148      	bne.n	8001cce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c54:	f7ff f8ce 	bl	8000df4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f8ca 	bl	8000df4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e030      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x734>
 8001c7a:	e028      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f8b1 	bl	8000df4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e00c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f8ad 	bl	8000df4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d905      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4905      	ldr	r1, [pc, #20]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_RCC_OscConfig+0x7b4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e001      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	feeefffc 	.word	0xfeeefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0e7      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b75      	ldr	r3, [pc, #468]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b72      	ldr	r3, [pc, #456]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4970      	ldr	r1, [pc, #448]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cf      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4960      	ldr	r1, [pc, #384]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b54      	ldr	r3, [pc, #336]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d96:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e08e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e086      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b46      	ldr	r3, [pc, #280]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4943      	ldr	r1, [pc, #268]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f814 	bl	8000df4 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff f810 	bl	8000df4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d208      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	492b      	ldr	r1, [pc, #172]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e26:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d210      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4923      	ldr	r1, [pc, #140]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e036      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4918      	ldr	r1, [pc, #96]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4910      	ldr	r1, [pc, #64]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e94:	f000 f824 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	490b      	ldr	r1, [pc, #44]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_ClockConfig+0x1fc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff4b 	bl	8000d54 <HAL_InitTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08003550 	.word	0x08003550
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11e      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	4b34      	ldr	r3, [pc, #208]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f20:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d134      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xac>
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	e005      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8e:	617b      	str	r3, [r7, #20]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	617b      	str	r3, [r7, #20]
      break;
 8001f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0e5b      	lsrs	r3, r3, #25
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08003560 	.word	0x08003560
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002004:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002010:	f7ff fa26 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002014:	6178      	str	r0, [r7, #20]
 8002016:	e014      	b.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002022:	6593      	str	r3, [r2, #88]	@ 0x58
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002030:	f7ff fa16 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002048:	d10b      	bne.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b80      	cmp	r3, #128	@ 0x80
 800204e:	d919      	bls.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2ba0      	cmp	r3, #160	@ 0xa0
 8002054:	d902      	bls.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e013      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800205c:	2301      	movs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e010      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b80      	cmp	r3, #128	@ 0x80
 8002066:	d902      	bls.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002068:	2303      	movs	r3, #3
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e00a      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	@ 0x80
 8002072:	d102      	bne.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e004      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b70      	cmp	r3, #112	@ 0x70
 800207e:	d101      	bne.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0207 	bic.w	r2, r3, #7
 800208c:	4909      	ldr	r1, [pc, #36]	@ (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e095      	b.n	80021f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020da:	d009      	beq.n	80020f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
 80020e2:	e005      	b.n	80020f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd24 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002130:	d902      	bls.n	8002138 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e002      	b.n	800213e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002146:	d007      	beq.n	8002158 <HAL_SPI_Init+0xa0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002150:	d002      	beq.n	8002158 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	ea42 0103 	orr.w	r1, r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	f003 0204 	and.w	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80021d4:	ea42 0103 	orr.w	r1, r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220e:	f7fe fdf1 	bl	8000df4 <HAL_GetTick>
 8002212:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d001      	beq.n	8002228 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
 8002226:	e15c      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x36>
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e154      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_SPI_Transmit+0x48>
 8002242:	2302      	movs	r3, #2
 8002244:	e14d      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002298:	d10f      	bne.n	80022ba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c4:	2b40      	cmp	r3, #64	@ 0x40
 80022c6:	d007      	beq.n	80022d8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022e0:	d952      	bls.n	8002388 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_SPI_Transmit+0xf2>
 80022ea:	8b7b      	ldrh	r3, [r7, #26]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d145      	bne.n	800237c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002314:	e032      	b.n	800237c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d112      	bne.n	800234a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	1c9a      	adds	r2, r3, #2
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002348:	e018      	b.n	800237c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800234a:	f7fe fd53 	bl	8000df4 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d803      	bhi.n	8002362 <HAL_SPI_Transmit+0x164>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002360:	d102      	bne.n	8002368 <HAL_SPI_Transmit+0x16a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0b2      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1c7      	bne.n	8002316 <HAL_SPI_Transmit+0x118>
 8002386:	e083      	b.n	8002490 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_SPI_Transmit+0x198>
 8002390:	8b7b      	ldrh	r3, [r7, #26]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d177      	bne.n	8002486 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d912      	bls.n	80023c6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	1c9a      	adds	r2, r3, #2
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b02      	subs	r3, #2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023c4:	e05f      	b.n	8002486 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023ec:	e04b      	b.n	8002486 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d12b      	bne.n	8002454 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d912      	bls.n	800242c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	881a      	ldrh	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	1c9a      	adds	r2, r3, #2
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b02      	subs	r3, #2
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800242a:	e02c      	b.n	8002486 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	330c      	adds	r3, #12
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002452:	e018      	b.n	8002486 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002454:	f7fe fcce 	bl	8000df4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d803      	bhi.n	800246c <HAL_SPI_Transmit+0x26e>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Transmit+0x274>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e02d      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ae      	bne.n	80023ee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fcf5 	bl	8002e84 <SPI_EndRxTxTransaction>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b088      	sub	sp, #32
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e123      	b.n	8002752 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002512:	d112      	bne.n	800253a <HAL_SPI_Receive+0x50>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10e      	bne.n	800253a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2204      	movs	r2, #4
 8002520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f912 	bl	800275a <HAL_SPI_TransmitReceive>
 8002536:	4603      	mov	r3, r0
 8002538:	e10b      	b.n	8002752 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800253a:	f7fe fc5b 	bl	8000df4 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_SPI_Receive+0x62>
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e100      	b.n	8002752 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_SPI_Receive+0x74>
 800255a:	2302      	movs	r3, #2
 800255c:	e0f9      	b.n	8002752 <HAL_SPI_Receive+0x268>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2204      	movs	r2, #4
 800256a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025b0:	d908      	bls.n	80025c4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e007      	b.n	80025d4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025dc:	d10f      	bne.n	80025fe <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002608:	2b40      	cmp	r3, #64	@ 0x40
 800260a:	d007      	beq.n	800261c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002624:	d875      	bhi.n	8002712 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002626:	e037      	b.n	8002698 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d117      	bne.n	8002666 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f103 020c 	add.w	r2, r3, #12
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002664:	e018      	b.n	8002698 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002666:	f7fe fbc5 	bl	8000df4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d803      	bhi.n	800267e <HAL_SPI_Receive+0x194>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800267c:	d102      	bne.n	8002684 <HAL_SPI_Receive+0x19a>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e05c      	b.n	8002752 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1c1      	bne.n	8002628 <HAL_SPI_Receive+0x13e>
 80026a4:	e03b      	b.n	800271e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d115      	bne.n	80026e0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80026de:	e018      	b.n	8002712 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e0:	f7fe fb88 	bl	8000df4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d803      	bhi.n	80026f8 <HAL_SPI_Receive+0x20e>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f6:	d102      	bne.n	80026fe <HAL_SPI_Receive+0x214>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e01f      	b.n	8002752 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1c3      	bne.n	80026a6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fb56 	bl	8002dd4 <SPI_EndRxTransaction>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002750:	2300      	movs	r3, #0
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b08a      	sub	sp, #40	@ 0x28
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800276c:	f7fe fb42 	bl	8000df4 <HAL_GetTick>
 8002770:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002778:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002788:	7ffb      	ldrb	r3, [r7, #31]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d00c      	beq.n	80027a8 <HAL_SPI_TransmitReceive+0x4e>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002794:	d106      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x4a>
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d001      	beq.n	80027a8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	e1f3      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x60>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x60>
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1e8      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x72>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e1e1      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d003      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2205      	movs	r2, #5
 80027e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800282a:	d802      	bhi.n	8002832 <HAL_SPI_TransmitReceive+0xd8>
 800282c:	8abb      	ldrh	r3, [r7, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d908      	bls.n	8002844 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e007      	b.n	8002854 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002852:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285e:	2b40      	cmp	r3, #64	@ 0x40
 8002860:	d007      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800287a:	f240 8083 	bls.w	8002984 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_TransmitReceive+0x132>
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d16f      	bne.n	800296c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b0:	e05c      	b.n	800296c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d11b      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x19e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x19e>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d113      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	1c9a      	adds	r2, r3, #2
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11c      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1e6>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	b292      	uxth	r2, r2
 800291e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	1c9a      	adds	r2, r3, #2
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800293c:	2301      	movs	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002940:	f7fe fa58 	bl	8000df4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800294c:	429a      	cmp	r2, r3
 800294e:	d80d      	bhi.n	800296c <HAL_SPI_TransmitReceive+0x212>
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002956:	d009      	beq.n	800296c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e111      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d19d      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x158>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d197      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x158>
 8002982:	e0e5      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x23a>
 800298c:	8afb      	ldrh	r3, [r7, #22]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 80d1 	bne.w	8002b36 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d912      	bls.n	80029c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b02      	subs	r3, #2
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029c2:	e0b8      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ea:	e0a4      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d134      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x30a>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x30a>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d12c      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d912      	bls.n	8002a3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b02      	subs	r3, #2
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a38:	e012      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d148      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x3aa>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d042      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d923      	bls.n	8002ad2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	b292      	uxth	r2, r2
 8002a96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b02      	subs	r3, #2
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d81f      	bhi.n	8002b00 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	e016      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f103 020c 	add.w	r2, r3, #12
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b04:	f7fe f976 	bl	8000df4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d803      	bhi.n	8002b1c <HAL_SPI_TransmitReceive+0x3c2>
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x3c8>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e02c      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f af55 	bne.w	80029ec <HAL_SPI_TransmitReceive+0x292>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f47f af4e 	bne.w	80029ec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f995 	bl	8002e84 <SPI_EndRxTxTransaction>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	@ 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ba8:	f7fe f924 	bl	8000df4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bb8:	f7fe f91c 	bl	8000df4 <HAL_GetTick>
 8002bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	0d1b      	lsrs	r3, r3, #20
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bce:	e054      	b.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd6:	d050      	beq.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd8:	f7fe f90c 	bl	8000df4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d902      	bls.n	8002bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d13d      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c06:	d111      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c10:	d004      	beq.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1a:	d107      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c34:	d10f      	bne.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e017      	b.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d19b      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000008 	.word	0x20000008

08002ca8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cba:	f7fe f89b 	bl	8000df4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cca:	f7fe f893 	bl	8000df4 <HAL_GetTick>
 8002cce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00da      	lsls	r2, r3, #3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	0d1b      	lsrs	r3, r3, #20
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cf0:	e060      	b.n	8002db4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002cf8:	d107      	bne.n	8002d0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d10:	d050      	beq.n	8002db4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d12:	f7fe f86f 	bl	8000df4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d902      	bls.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13d      	bne.n	8002da4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d40:	d111      	bne.n	8002d66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4a:	d004      	beq.n	8002d56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d54:	d107      	bne.n	8002d66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6e:	d10f      	bne.n	8002d90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e010      	b.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d196      	bne.n	8002cf2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	@ 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002de8:	d111      	bne.n	8002e0e <SPI_EndRxTransaction+0x3a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002df2:	d004      	beq.n	8002dfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfc:	d107      	bne.n	8002e0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff febd 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e023      	b.n	8002e7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e3c:	d11d      	bne.n	8002e7a <SPI_EndRxTransaction+0xa6>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e46:	d004      	beq.n	8002e52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e50:	d113      	bne.n	8002e7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff ff22 	bl	8002ca8 <SPI_WaitFifoStateUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e000      	b.n	8002e7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff ff03 	bl	8002ca8 <SPI_WaitFifoStateUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e027      	b.n	8002f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fe68 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e014      	b.n	8002f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fedc 	bl	8002ca8 <SPI_WaitFifoStateUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e000      	b.n	8002f08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e049      	b.n	8002fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fe50 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f000 f8fe 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_ConfigClockSource+0x1c>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0b6      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x18a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ffc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003004:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003016:	d03e      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xd8>
 8003018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301c:	f200 8087 	bhi.w	800312e <HAL_TIM_ConfigClockSource+0x170>
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003024:	f000 8086 	beq.w	8003134 <HAL_TIM_ConfigClockSource+0x176>
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	d87f      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 800302e:	2b70      	cmp	r3, #112	@ 0x70
 8003030:	d01a      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xaa>
 8003032:	2b70      	cmp	r3, #112	@ 0x70
 8003034:	d87b      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 8003036:	2b60      	cmp	r3, #96	@ 0x60
 8003038:	d050      	beq.n	80030dc <HAL_TIM_ConfigClockSource+0x11e>
 800303a:	2b60      	cmp	r3, #96	@ 0x60
 800303c:	d877      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 800303e:	2b50      	cmp	r3, #80	@ 0x50
 8003040:	d03c      	beq.n	80030bc <HAL_TIM_ConfigClockSource+0xfe>
 8003042:	2b50      	cmp	r3, #80	@ 0x50
 8003044:	d873      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 8003046:	2b40      	cmp	r3, #64	@ 0x40
 8003048:	d058      	beq.n	80030fc <HAL_TIM_ConfigClockSource+0x13e>
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d86f      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 800304e:	2b30      	cmp	r3, #48	@ 0x30
 8003050:	d064      	beq.n	800311c <HAL_TIM_ConfigClockSource+0x15e>
 8003052:	2b30      	cmp	r3, #48	@ 0x30
 8003054:	d86b      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 8003056:	2b20      	cmp	r3, #32
 8003058:	d060      	beq.n	800311c <HAL_TIM_ConfigClockSource+0x15e>
 800305a:	2b20      	cmp	r3, #32
 800305c:	d867      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x170>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d05c      	beq.n	800311c <HAL_TIM_ConfigClockSource+0x15e>
 8003062:	2b10      	cmp	r3, #16
 8003064:	d05a      	beq.n	800311c <HAL_TIM_ConfigClockSource+0x15e>
 8003066:	e062      	b.n	800312e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	f000 f98a 	bl	8003390 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800308a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]
      break;
 8003094:	e04f      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	f000 f973 	bl	8003390 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b8:	609a      	str	r2, [r3, #8]
      break;
 80030ba:	e03c      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c8:	461a      	mov	r2, r3
 80030ca:	f000 f8e7 	bl	800329c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2150      	movs	r1, #80	@ 0x50
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f940 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 80030da:	e02c      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e8:	461a      	mov	r2, r3
 80030ea:	f000 f906 	bl	80032fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2160      	movs	r1, #96	@ 0x60
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f930 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 80030fa:	e01c      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003108:	461a      	mov	r2, r3
 800310a:	f000 f8c7 	bl	800329c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2140      	movs	r1, #64	@ 0x40
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f920 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 800311a:	e00c      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 f917 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 800312c:	e003      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      break;
 8003132:	e000      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003134:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a46      	ldr	r2, [pc, #280]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d00f      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a42      	ldr	r2, [pc, #264]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a41      	ldr	r2, [pc, #260]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a35      	ldr	r2, [pc, #212]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b0:	d01b      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d017      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a30      	ldr	r2, [pc, #192]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00f      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00b      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003290 <TIM_Base_SetConfig+0x140>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003294 <TIM_Base_SetConfig+0x144>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_Base_SetConfig+0x9a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <TIM_Base_SetConfig+0x148>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d108      	bne.n	80031fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a16      	ldr	r2, [pc, #88]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a18      	ldr	r2, [pc, #96]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <TIM_Base_SetConfig+0x140>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <TIM_Base_SetConfig+0x144>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <TIM_Base_SetConfig+0x148>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f023 0201 	bic.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]
  }
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800

0800329c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0201 	bic.w	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 030a 	bic.w	r3, r3, #10
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f023 0210 	bic.w	r2, r3, #16
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	031b      	lsls	r3, r3, #12
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003336:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	f043 0307 	orr.w	r3, r3, #7
 800337c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e068      	b.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2e      	ldr	r2, [pc, #184]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d108      	bne.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345a:	d018      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1a      	ldr	r2, [pc, #104]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10c      	bne.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40013400 	.word	0x40013400
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40014000 	.word	0x40014000

080034e0 <memset>:
 80034e0:	4402      	add	r2, r0
 80034e2:	4603      	mov	r3, r0
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d100      	bne.n	80034ea <memset+0xa>
 80034e8:	4770      	bx	lr
 80034ea:	f803 1b01 	strb.w	r1, [r3], #1
 80034ee:	e7f9      	b.n	80034e4 <memset+0x4>

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	@ (800352c <__libc_init_array+0x3c>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2600      	movs	r6, #0
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4d0b      	ldr	r5, [pc, #44]	@ (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	@ (8003534 <__libc_init_array+0x44>)
 8003504:	f000 f818 	bl	8003538 <_init>
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2600      	movs	r6, #0
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08003590 	.word	0x08003590
 800352c:	08003590 	.word	0x08003590
 8003530:	08003590 	.word	0x08003590
 8003534:	08003594 	.word	0x08003594

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
