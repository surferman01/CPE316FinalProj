
RadioDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003598  08003598  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003598  08003598  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080035a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000014  080035b4  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080035b4  00005134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2c2  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cca  00000000  00000000  00011306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00012fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bff  00000000  00000000  0001491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e33c  00000000  00000000  0003a51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebde0  00000000  00000000  00048857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc8  00000000  00000000  0013467c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00138244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003540 	.word	0x08003540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003540 	.word	0x08003540

080001c8 <HAL_GPIO_EXTI_Callback>:
#else
uint8_t test_recieve[NRF24L01P_PAYLOAD_LENGTH] = { 0 };
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b40      	cmp	r3, #64	@ 0x40
 80001d6:	d101      	bne.n	80001dc <HAL_GPIO_EXTI_Callback+0x14>
#ifdef TX
		nrf24l01p_tx_irq();
 80001d8:	f000 faa9 	bl	800072e <nrf24l01p_tx_irq>
#else
		nrf24l01p_rx_receive(test_recieve);
#endif
	}
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <main>:



int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	HAL_Init();
 80001ea:	f000 fdb8 	bl	8000d5e <HAL_Init>


	SystemClock_Config();
 80001ee:	f000 f82d 	bl	800024c <SystemClock_Config>

	MX_GPIO_Init();
 80001f2:	f000 f959 	bl	80004a8 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001f6:	f000 f87b 	bl	80002f0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80001fa:	f000 f8b7 	bl	800036c <MX_TIM2_Init>
	MX_TIM5_Init();
 80001fe:	f000 f903 	bl	8000408 <MX_TIM5_Init>


	// test code
#ifdef TX
	nrf24l01p_tx_init(2500, _1Mbps, &hspi1);
 8000202:	4a10      	ldr	r2, [pc, #64]	@ (8000244 <main+0x60>)
 8000204:	2100      	movs	r1, #0
 8000206:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800020a:	f000 fa51 	bl	80006b0 <nrf24l01p_tx_init>

	while (1)
	{
#ifdef TX
		// change tx test data
		for(int i= 0; i < 8; i++)
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e00d      	b.n	8000230 <main+0x4c>
			test_transmit[i]++;
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <main+0x64>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	b2d9      	uxtb	r1, r3
 8000220:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <main+0x64>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		for(int i= 0; i < 8; i++)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b07      	cmp	r3, #7
 8000234:	ddee      	ble.n	8000214 <main+0x30>

		// transmit
		nrf24l01p_tx_transmit(test_transmit);
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <main+0x64>)
 8000238:	f000 fa6e 	bl	8000718 <nrf24l01p_tx_transmit>
#else
		// do nothing for now
#endif
		HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	@ 0x64
 800023e:	f000 fe03 	bl	8000e48 <HAL_Delay>
		for(int i= 0; i < 8; i++)
 8000242:	e7e4      	b.n	800020e <main+0x2a>
 8000244:	20000030 	.word	0x20000030
 8000248:	20000000 	.word	0x20000000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	@ 0x58
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	@ 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 f944 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000272:	f001 f907 	bl	8001484 <HAL_PWREx_ControlVoltageScaling>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800027c:	f000 f98a 	bl	8000594 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2310      	movs	r3, #16
 800028c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000296:	2301      	movs	r3, #1
 8000298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800029a:	230a      	movs	r3, #10
 800029c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800029e:	2307      	movs	r3, #7
 80002a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f93e 	bl	8001530 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ba:	f000 f96b 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fd06 	bl	8001ce8 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002e2:	f000 f957 	bl	8000594 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3758      	adds	r7, #88	@ 0x58
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000368 <MX_SPI1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <MX_SPI1_Init+0x74>)
 800030a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800030e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_SPI1_Init+0x74>)
 800031e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000322:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_SPI1_Init+0x74>)
 800033e:	2207      	movs	r2, #7
 8000340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_SPI1_Init+0x74>)
 800034a:	2208      	movs	r2, #8
 800034c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000350:	f001 feb6 	bl	80020c0 <HAL_SPI_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f91b 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000030 	.word	0x20000030
 8000368:	40013000 	.word	0x40013000

0800036c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038a:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <MX_TIM2_Init+0x98>)
 800038c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000392:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <MX_TIM2_Init+0x98>)
 8000394:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_TIM2_Init+0x98>)
 800039c:	2210      	movs	r2, #16
 800039e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a2:	2213      	movs	r2, #19
 80003a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b6:	f002 fdaf 	bl	8002f18 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80003c0:	f000 f8e8 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003d2:	f002 fdf8 	bl	8002fc6 <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003dc:	f000 f8da 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003ee:	f002 fff3 	bl	80033d8 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003f8:	f000 f8cc 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000094 	.word	0x20000094

08000408 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000428:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <MX_TIM5_Init+0x9c>)
 800042a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 800042c:	4b1c      	ldr	r3, [pc, #112]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800042e:	224f      	movs	r2, #79	@ 0x4f
 8000430:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000432:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000438:	4b19      	ldr	r3, [pc, #100]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800043a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800043e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000440:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000442:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000446:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800044e:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000450:	f002 fd62 	bl	8002f18 <HAL_TIM_Base_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800045a:	f000 f89b 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000462:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800046c:	f002 fdab 	bl	8002fc6 <HAL_TIM_ConfigClockSource>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000476:	f000 f88d 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000488:	f002 ffa6 	bl	80033d8 <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000492:	f000 f87f 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	40000c00 	.word	0x40000c00

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a31      	ldr	r2, [pc, #196]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	4a2b      	ldr	r2, [pc, #172]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e2:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	4a25      	ldr	r2, [pc, #148]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fa:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050c:	481f      	ldr	r0, [pc, #124]	@ (800058c <MX_GPIO_Init+0xe4>)
 800050e:	f000 ff7b 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	481e      	ldr	r0, [pc, #120]	@ (8000590 <MX_GPIO_Init+0xe8>)
 8000518:	f000 ff76 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800051c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4815      	ldr	r0, [pc, #84]	@ (800058c <MX_GPIO_Init+0xe4>)
 8000536:	f000 fdbd 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	480f      	ldr	r0, [pc, #60]	@ (8000590 <MX_GPIO_Init+0xe8>)
 8000552:	f000 fdaf 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000556:	2340      	movs	r3, #64	@ 0x40
 8000558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <MX_GPIO_Init+0xe4>)
 800056c:	f000 fda2 	bl	80010b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2017      	movs	r0, #23
 8000576:	f000 fd66 	bl	8001046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800057a:	2017      	movs	r0, #23
 800057c:	f000 fd7f 	bl	800107e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	48000400 	.word	0x48000400
 8000590:	48000800 	.word	0x48000800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <cs_high>:
// alex: added this
static SPI_HandleTypeDef *spi_handle;


static void cs_high()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005aa:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <cs_high+0x14>)
 80005ac:	f000 ff2c 	bl	8001408 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000400 	.word	0x48000400

080005b8 <cs_low>:

static void cs_low()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <cs_low+0x14>)
 80005c4:	f000 ff20 	bl	8001408 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	48000400 	.word	0x48000400

080005d0 <ce_high>:

static void ce_high()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2180      	movs	r1, #128	@ 0x80
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <ce_high+0x14>)
 80005da:	f000 ff15 	bl	8001408 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	48000800 	.word	0x48000800

080005e8 <ce_low>:

static void ce_low()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	4802      	ldr	r0, [pc, #8]	@ (80005fc <ce_low+0x14>)
 80005f2:	f000 ff09 	bl	8001408 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000800 	.word	0x48000800

08000600 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800060e:	f7ff ffd3 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <read_register+0x4c>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 020e 	add.w	r2, r7, #14
 800061a:	f107 010f 	add.w	r1, r7, #15
 800061e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	f002 f89c 	bl	8002762 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, &read_val, 1, 2000);
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <read_register+0x4c>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	f107 010d 	add.w	r1, r7, #13
 8000632:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000636:	2201      	movs	r2, #1
 8000638:	f001 ff5b 	bl	80024f2 <HAL_SPI_Receive>
    cs_high();
 800063c:	f7ff ffb0 	bl	80005a0 <cs_high>

    return read_val;
 8000640:	7b7b      	ldrb	r3, [r7, #13]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000012c 	.word	0x2000012c

08000650 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	737b      	strb	r3, [r7, #13]

    cs_low();
 800066e:	f7ff ffa3 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <write_register+0x5c>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	f107 020e 	add.w	r2, r7, #14
 800067a:	f107 010f 	add.w	r1, r7, #15
 800067e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	f002 f86c 	bl	8002762 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, &write_val, 1, 2000);
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <write_register+0x5c>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000696:	2201      	movs	r2, #1
 8000698:	f001 fdb5 	bl	8002206 <HAL_SPI_Transmit>
    cs_high();
 800069c:	f7ff ff80 	bl	80005a0 <cs_high>

    return write_val;
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000012c 	.word	0x2000012c

080006b0 <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps, SPI_HandleTypeDef *hspi)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	603a      	str	r2, [r7, #0]
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	460b      	mov	r3, r1
 80006be:	717b      	strb	r3, [r7, #5]
	spi_handle = hspi;
 80006c0:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <nrf24l01p_tx_init+0x64>)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	6013      	str	r3, [r2, #0]

    nrf24l01p_reset();
 80006c6:	f000 f84f 	bl	8000768 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 80006ca:	f000 f8a1 	bl	8000810 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 80006ce:	f000 f951 	bl	8000974 <nrf24l01p_power_up>
    HAL_Delay(2);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f000 fbb8 	bl	8000e48 <HAL_Delay>

    nrf24l01p_set_rf_channel(MHz);
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f9dc 	bl	8000a98 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa09 	bl	8000afa <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f9e8 	bl	8000abe <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 f955 	bl	800099e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80006f4:	2005      	movs	r0, #5
 80006f6:	f000 f975 	bl	80009e4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 f982 	bl	8000a04 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000700:	20fa      	movs	r0, #250	@ 0xfa
 8000702:	f000 f9a1 	bl	8000a48 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000706:	f7ff ff63 	bl	80005d0 <ce_high>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000012c 	.word	0x2000012c

08000718 <nrf24l01p_tx_transmit>:

    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f88b 	bl	800083c <nrf24l01p_write_tx_fifo>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000734:	f000 f8dc 	bl	80008f0 <nrf24l01p_get_status>
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 0320 	and.w	r3, r3, #32
 8000742:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <nrf24l01p_tx_irq+0x22>
    {
        // TX_DS
        //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
        nrf24l01p_clear_tx_ds();
 800074a:	f000 f8eb 	bl	8000924 <nrf24l01p_clear_tx_ds>
    	nrf24l01p_flush_tx_fifo();    // <-- discard the failed packet
    	nrf24l01p_clear_max_rt();
    	ce_low();                     // leave standby‑II
    	ce_high();                    // arm the radio again
    }
}
 800074e:	e007      	b.n	8000760 <nrf24l01p_tx_irq+0x32>
    	nrf24l01p_flush_tx_fifo();    // <-- discard the failed packet
 8000750:	f000 f8b4 	bl	80008bc <nrf24l01p_flush_tx_fifo>
    	nrf24l01p_clear_max_rt();
 8000754:	f000 f8fa 	bl	800094c <nrf24l01p_clear_max_rt>
    	ce_low();                     // leave standby‑II
 8000758:	f7ff ff46 	bl	80005e8 <ce_low>
    	ce_high();                    // arm the radio again
 800075c:	f7ff ff38 	bl	80005d0 <ce_high>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800076c:	f7ff ff18 	bl	80005a0 <cs_high>
    ce_low();
 8000770:	f7ff ff3a 	bl	80005e8 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000774:	2108      	movs	r1, #8
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff6a 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800077c:	213f      	movs	r1, #63	@ 0x3f
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff66 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000784:	2103      	movs	r1, #3
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff ff62 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800078c:	2103      	movs	r1, #3
 800078e:	2003      	movs	r0, #3
 8000790:	f7ff ff5e 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000794:	2103      	movs	r1, #3
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff ff5a 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800079c:	2102      	movs	r1, #2
 800079e:	2005      	movs	r0, #5
 80007a0:	f7ff ff56 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80007a4:	2107      	movs	r1, #7
 80007a6:	2006      	movs	r0, #6
 80007a8:	f7ff ff52 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80007ac:	217e      	movs	r1, #126	@ 0x7e
 80007ae:	2007      	movs	r0, #7
 80007b0:	f7ff ff4e 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80007b4:	2100      	movs	r1, #0
 80007b6:	2011      	movs	r0, #17
 80007b8:	f7ff ff4a 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80007bc:	2100      	movs	r1, #0
 80007be:	2011      	movs	r0, #17
 80007c0:	f7ff ff46 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80007c4:	2100      	movs	r1, #0
 80007c6:	2012      	movs	r0, #18
 80007c8:	f7ff ff42 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2013      	movs	r0, #19
 80007d0:	f7ff ff3e 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2014      	movs	r0, #20
 80007d8:	f7ff ff3a 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80007dc:	2100      	movs	r1, #0
 80007de:	2015      	movs	r0, #21
 80007e0:	f7ff ff36 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2016      	movs	r0, #22
 80007e8:	f7ff ff32 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80007ec:	2111      	movs	r1, #17
 80007ee:	2017      	movs	r0, #23
 80007f0:	f7ff ff2e 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80007f4:	2100      	movs	r1, #0
 80007f6:	201c      	movs	r0, #28
 80007f8:	f7ff ff2a 	bl	8000650 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80007fc:	2100      	movs	r1, #0
 80007fe:	201d      	movs	r0, #29
 8000800:	f7ff ff26 	bl	8000650 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000804:	f000 f840 	bl	8000888 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000808:	f000 f858 	bl	80008bc <nrf24l01p_flush_tx_fifo>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fef2 	bl	8000600 <read_register>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f023 0301 	bic.w	r3, r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff0f 	bl	8000650 <write_register>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000844:	23a0      	movs	r3, #160	@ 0xa0
 8000846:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000848:	f7ff feb6 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <nrf24l01p_write_tx_fifo+0x48>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f107 020e 	add.w	r2, r7, #14
 8000854:	f107 010f 	add.w	r1, r7, #15
 8000858:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	f001 ff7f 	bl	8002762 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <nrf24l01p_write_tx_fifo+0x48>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800086c:	2208      	movs	r2, #8
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f001 fcc9 	bl	8002206 <HAL_SPI_Transmit>
    cs_high();
 8000874:	f7ff fe94 	bl	80005a0 <cs_high>

    return status;
 8000878:	7bbb      	ldrb	r3, [r7, #14]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000012c 	.word	0x2000012c

08000888 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800088e:	23e2      	movs	r3, #226	@ 0xe2
 8000890:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000892:	f7ff fe91 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <nrf24l01p_flush_rx_fifo+0x30>)
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	1dba      	adds	r2, r7, #6
 800089c:	1df9      	adds	r1, r7, #7
 800089e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	f001 ff5c 	bl	8002762 <HAL_SPI_TransmitReceive>
    cs_high();
 80008aa:	f7ff fe79 	bl	80005a0 <cs_high>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000012c 	.word	0x2000012c

080008bc <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80008c2:	23e1      	movs	r3, #225	@ 0xe1
 80008c4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80008c6:	f7ff fe77 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <nrf24l01p_flush_tx_fifo+0x30>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	1dba      	adds	r2, r7, #6
 80008d0:	1df9      	adds	r1, r7, #7
 80008d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	f001 ff42 	bl	8002762 <HAL_SPI_TransmitReceive>
    cs_high();
 80008de:	f7ff fe5f 	bl	80005a0 <cs_high>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000012c 	.word	0x2000012c

080008f0 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80008f6:	23ff      	movs	r3, #255	@ 0xff
 80008f8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80008fa:	f7ff fe5d 	bl	80005b8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <nrf24l01p_get_status+0x30>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	1dba      	adds	r2, r7, #6
 8000904:	1df9      	adds	r1, r7, #7
 8000906:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2301      	movs	r3, #1
 800090e:	f001 ff28 	bl	8002762 <HAL_SPI_TransmitReceive>
    cs_high();
 8000912:	f7ff fe45 	bl	80005a0 <cs_high>

    return status;
 8000916:	79bb      	ldrb	r3, [r7, #6]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000012c 	.word	0x2000012c

08000924 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800092a:	f7ff ffe1 	bl	80008f0 <nrf24l01p_get_status>
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4619      	mov	r1, r3
 800093e:	2007      	movs	r0, #7
 8000940:	f7ff fe86 	bl	8000650 <write_register>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000952:	f7ff ffcd 	bl	80008f0 <nrf24l01p_get_status>
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4619      	mov	r1, r3
 8000966:	2007      	movs	r0, #7
 8000968:	f7ff fe72 	bl	8000650 <write_register>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe40 	bl	8000600 <read_register>
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4619      	mov	r1, r3
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fe5d 	bl	8000650 <write_register>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe29 	bl	8000600 <read_register>
 80009ae:	4603      	mov	r3, r0
 80009b0:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d002      	beq.n	80009be <nrf24l01p_set_crc_length+0x20>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d005      	beq.n	80009c8 <nrf24l01p_set_crc_length+0x2a>
 80009bc:	e009      	b.n	80009d2 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	f023 0304 	bic.w	r3, r3, #4
 80009c4:	73fb      	strb	r3, [r7, #15]
            break;
 80009c6:	e004      	b.n	80009d2 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	73fb      	strb	r3, [r7, #15]
            break;
 80009d0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	4619      	mov	r1, r3
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe3a 	bl	8000650 <write_register>
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3b02      	subs	r3, #2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	2003      	movs	r0, #3
 80009f8:	f7ff fe2a 	bl	8000650 <write_register>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <nrf24l01p_auto_retransmit_count>:
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
}
*/

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f7ff fdf6 	bl	8000600 <read_register>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
    v &= 0xF0;                 // keep ARD, clear ARC
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	f023 030f 	bic.w	r3, r3, #15
 8000a1e:	73fb      	strb	r3, [r7, #15]
    v |= (cnt & 0x0F);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	b25a      	sxtb	r2, r3
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	4619      	mov	r1, r3
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f7ff fe09 	bl	8000650 <write_register>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8000a52:	2004      	movs	r0, #4
 8000a54:	f7ff fdd4 	bl	8000600 <read_register>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
    v &= 0x0F;                 // keep ARC, clear ARD
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	73fb      	strb	r3, [r7, #15]
    v |= (((us/250) - 1) & 0x0F) << 4;
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3b01      	subs	r3, #1
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	4619      	mov	r1, r3
 8000a86:	2004      	movs	r0, #4
 8000a88:	f7ff fde2 	bl	8000650 <write_register>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	10624dd3 	.word	0x10624dd3

08000a98 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000aa8:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2005      	movs	r0, #5
 8000ab2:	f7ff fdcd 	bl	8000650 <write_register>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f7ff fd99 	bl	8000600 <read_register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f023 0306 	bic.w	r3, r3, #6
 8000ad4:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2006      	movs	r0, #6
 8000aee:	f7ff fdaf 	bl	8000650 <write_register>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000b04:	2006      	movs	r0, #6
 8000b06:	f7ff fd7b 	bl	8000600 <read_register>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000b10:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d00a      	beq.n	8000b2e <nrf24l01p_set_rf_air_data_rate+0x34>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	dc0e      	bgt.n	8000b3a <nrf24l01p_set_rf_air_data_rate+0x40>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00b      	beq.n	8000b38 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10a      	bne.n	8000b3a <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b2c:	e005      	b.n	8000b3a <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	73fb      	strb	r3, [r7, #15]
            break;
 8000b36:	e000      	b.n	8000b3a <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000b38:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2006      	movs	r0, #6
 8000b40:	f7ff fd86 	bl	8000650 <write_register>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_SPI_MspInit+0x7c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d128      	bne.n	8000c08 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bba:	4a16      	ldr	r2, [pc, #88]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000be6:	23e0      	movs	r3, #224	@ 0xe0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c04:	f000 fa56 	bl	80010b4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c28:	d10c      	bne.n	8000c44 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	4a11      	ldr	r2, [pc, #68]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c42:	e010      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_TIM_Base_MspInit+0x60>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10b      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_TIM_Base_MspInit+0x5c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40000c00 	.word	0x40000c00

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f899 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000cde:	2040      	movs	r0, #64	@ 0x40
 8000ce0:	f000 fbaa 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f002 fbdd 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fa51 	bl	80001e4 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d50:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8000d54:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d58:	20000134 	.word	0x20000134

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>

08000d5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f961 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f000 f80e 	bl	8000d90 <HAL_InitTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	e001      	b.n	8000d84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d80:	f7ff fee4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_InitTick+0x6c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d023      	beq.n	8000dec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <HAL_InitTick+0x70>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f96d 	bl	800109a <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10f      	bne.n	8000de6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d809      	bhi.n	8000de0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dd4:	f000 f937 	bl	8001046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_InitTick+0x74>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e007      	b.n	8000df0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e001      	b.n	8000df0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	20000008 	.word	0x20000008
 8000e04:	2000000c 	.word	0x2000000c

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	20000130 	.word	0x20000130

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000130 	.word	0x20000130

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_Delay+0x44>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000010 	.word	0x20000010

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	@ (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	@ 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e17f      	b.n	80013c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8171 	beq.w	80013be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b03      	cmp	r3, #3
 8001160:	d118      	bne.n	8001194 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80ac 	beq.w	80013be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <HAL_GPIO_Init+0x330>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a5e      	ldr	r2, [pc, #376]	@ (80013e4 <HAL_GPIO_Init+0x330>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b5c      	ldr	r3, [pc, #368]	@ (80013e4 <HAL_GPIO_Init+0x330>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800127e:	4a5a      	ldr	r2, [pc, #360]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x242>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	@ (80013ec <HAL_GPIO_Init+0x338>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x23e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	@ (80013f0 <HAL_GPIO_Init+0x33c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x23a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	@ (80013f4 <HAL_GPIO_Init+0x340>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x236>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	@ (80013f8 <HAL_GPIO_Init+0x344>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x232>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	@ (80013fc <HAL_GPIO_Init+0x348>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x22e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001400 <HAL_GPIO_Init+0x34c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x22a>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x244>
 80012f6:	2300      	movs	r3, #0
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001308:	4937      	ldr	r1, [pc, #220]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <HAL_GPIO_Init+0x350>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800133a:	4a32      	ldr	r2, [pc, #200]	@ (8001404 <HAL_GPIO_Init+0x350>)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001340:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <HAL_GPIO_Init+0x350>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001364:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <HAL_GPIO_Init+0x350>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_GPIO_Init+0x350>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138e:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_GPIO_Init+0x350>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_GPIO_Init+0x350>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <HAL_GPIO_Init+0x350>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f ae78 	bne.w	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	48000400 	.word	0x48000400
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000c00 	.word	0x48000c00
 80013f8:	48001000 	.word	0x48001000
 80013fc:	48001400 	.word	0x48001400
 8001400:	48001800 	.word	0x48001800
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe feb6 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <HAL_PWREx_GetVoltageRange+0x18>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001492:	d130      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800149c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a0:	d038      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2232      	movs	r2, #50	@ 0x32
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	e002      	b.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014dc:	d102      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f2      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f0:	d110      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e00f      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001502:	d007      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000
 8001528:	20000008 	.word	0x20000008
 800152c:	431bde83 	.word	0x431bde83

08001530 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e3ca      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4b97      	ldr	r3, [pc, #604]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154c:	4b94      	ldr	r3, [pc, #592]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80e4 	beq.w	800172c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_RCC_OscConfig+0x4a>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	f040 808b 	bne.w	8001688 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b01      	cmp	r3, #1
 8001576:	f040 8087 	bne.w	8001688 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157a:	4b89      	ldr	r3, [pc, #548]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x62>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e3a2      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	4b82      	ldr	r3, [pc, #520]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <HAL_RCC_OscConfig+0x7c>
 80015a2:	4b7f      	ldr	r3, [pc, #508]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015aa:	e005      	b.n	80015b8 <HAL_RCC_OscConfig+0x88>
 80015ac:	4b7c      	ldr	r3, [pc, #496]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d223      	bcs.n	8001604 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fd1d 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e383      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d0:	4b73      	ldr	r3, [pc, #460]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a72      	ldr	r2, [pc, #456]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b70      	ldr	r3, [pc, #448]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	496d      	ldr	r1, [pc, #436]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ee:	4b6c      	ldr	r3, [pc, #432]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4968      	ldr	r1, [pc, #416]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
 8001602:	e025      	b.n	8001650 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001604:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a65      	ldr	r2, [pc, #404]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4960      	ldr	r1, [pc, #384]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001622:	4b5f      	ldr	r3, [pc, #380]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	495b      	ldr	r1, [pc, #364]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fcdd 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e343      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001650:	f000 fc4a 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001654:	4602      	mov	r2, r0
 8001656:	4b52      	ldr	r3, [pc, #328]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	4950      	ldr	r1, [pc, #320]	@ (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
 800166c:	4a4e      	ldr	r2, [pc, #312]	@ (80017a8 <HAL_RCC_OscConfig+0x278>)
 800166e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001670:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fb8b 	bl	8000d90 <HAL_InitTick>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d052      	beq.n	800172a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	e327      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d032      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001690:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169c:	f7ff fbc8 	bl	8000e30 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a4:	f7ff fbc4 	bl	8000e30 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e310      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4931      	ldr	r1, [pc, #196]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	492c      	ldr	r1, [pc, #176]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e01a      	b.n	800172c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a29      	ldr	r2, [pc, #164]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb95 	bl	8000e30 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170a:	f7ff fb91 	bl	8000e30 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e2dd      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x1da>
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d074      	beq.n	8001822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x21a>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d10e      	bne.n	8001762 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d10b      	bne.n	8001762 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d064      	beq.n	8001820 <HAL_RCC_OscConfig+0x2f0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d160      	bne.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e2ba      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x24a>
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e026      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001782:	d115      	bne.n	80017b0 <HAL_RCC_OscConfig+0x280>
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 800178a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a02      	ldr	r2, [pc, #8]	@ (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08003558 	.word	0x08003558
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb2e 	bl	8000e30 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb2a 	bl	8000e30 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e276      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2a8>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb1a 	bl	8000e30 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fb16 	bl	8000e30 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e262      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x2d0>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d060      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x310>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d119      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d116      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_OscConfig+0x328>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e23f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	4973      	ldr	r1, [pc, #460]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186c:	e040      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d023      	beq.n	80018be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001876:	4b6f      	ldr	r3, [pc, #444]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fad5 	bl	8000e30 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fad1 	bl	8000e30 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e21d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	495f      	ldr	r1, [pc, #380]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e018      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b5d      	ldr	r3, [pc, #372]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fab1 	bl	8000e30 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff faad 	bl	8000e30 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1f9      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03c      	beq.n	8001976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fa8c 	bl	8000e30 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fa88 	bl	8000e30 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1d4      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192e:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ef      	beq.n	800191c <HAL_RCC_OscConfig+0x3ec>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fa6f 	bl	8000e30 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fa6b 	bl	8000e30 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1b7      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a6 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d118      	bne.n	80019ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa32 	bl	8000e30 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d0:	f7ff fa2e 	bl	8000e30 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e17a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d8>
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a06:	e029      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d115      	bne.n	8001a3c <HAL_RCC_OscConfig+0x50c>
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a26:	4a03      	ldr	r2, [pc, #12]	@ (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	4a9b      	ldr	r2, [pc, #620]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4c:	4b98      	ldr	r3, [pc, #608]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	4a97      	ldr	r2, [pc, #604]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f9e4 	bl	8000e30 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9e0 	bl	8000e30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e12a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x53c>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f9cd 	bl	8000e30 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f9c9 	bl	8000e30 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e113      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ed      	bne.n	8001a9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a79      	ldr	r2, [pc, #484]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80fe 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	f040 80d0 	bne.w	8001c84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ae4:	4b72      	ldr	r3, [pc, #456]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d130      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	3b01      	subs	r3, #1
 8001b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d127      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b24:	2a07      	cmp	r2, #7
 8001b26:	bf14      	ite	ne
 8001b28:	2201      	movne	r2, #1
 8001b2a:	2200      	moveq	r2, #0
 8001b2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d113      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d06e      	beq.n	8001c38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d069      	beq.n	8001c34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b6c:	4b50      	ldr	r3, [pc, #320]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0ad      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b88:	f7ff f952 	bl	8000e30 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f94e 	bl	8000e30 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e09a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bae:	4b40      	ldr	r3, [pc, #256]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b40      	ldr	r3, [pc, #256]	@ (8001cb4 <HAL_RCC_OscConfig+0x784>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bc8:	0212      	lsls	r2, r2, #8
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bd0:	0852      	lsrs	r2, r2, #1
 8001bd2:	3a01      	subs	r2, #1
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bdc:	0852      	lsrs	r2, r2, #1
 8001bde:	3a01      	subs	r2, #1
 8001be0:	0652      	lsls	r2, r2, #25
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001be8:	0912      	lsrs	r2, r2, #4
 8001bea:	0452      	lsls	r2, r2, #17
 8001bec:	430a      	orrs	r2, r1
 8001bee:	4930      	ldr	r1, [pc, #192]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c00:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c0c:	f7ff f910 	bl	8000e30 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f90c 	bl	8000e30 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e058      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c32:	e050      	b.n	8001cd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e04f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d148      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c5c:	f7ff f8e8 	bl	8000e30 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f8e4 	bl	8000e30 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e030      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x734>
 8001c82:	e028      	b.n	8001cd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d023      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_RCC_OscConfig+0x780>)
 8001c90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8cb 	bl	8000e30 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	e00c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f8c7 	bl	8000e30 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d905      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e013      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_RCC_OscConfig+0x7b0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ec      	bne.n	8001c9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_RCC_OscConfig+0x7b0>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4905      	ldr	r1, [pc, #20]	@ (8001ce0 <HAL_RCC_OscConfig+0x7b0>)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x7b4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
 8001cd0:	e001      	b.n	8001cd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	feeefffc 	.word	0xfeeefffc

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0e7      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b75      	ldr	r3, [pc, #468]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4970      	ldr	r1, [pc, #448]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0cf      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b66      	ldr	r3, [pc, #408]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d908      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4960      	ldr	r1, [pc, #384]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d04c      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0a6      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d86:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d115      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e09a      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e08e      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e086      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4943      	ldr	r1, [pc, #268]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd0:	f7ff f82e 	bl	8000e30 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff f82a 	bl	8000e30 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e06e      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d208      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	492b      	ldr	r1, [pc, #172]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d210      	bcs.n	8001e5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 0207 	bic.w	r2, r3, #7
 8001e44:	4923      	ldr	r1, [pc, #140]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e036      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4918      	ldr	r1, [pc, #96]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d009      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4910      	ldr	r1, [pc, #64]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e9c:	f000 f824 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	490b      	ldr	r1, [pc, #44]	@ (8001edc <HAL_RCC_ClockConfig+0x1f4>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1fc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe ff65 	bl	8000d90 <HAL_InitTick>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003558 	.word	0x08003558
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	2000000c 	.word	0x2000000c

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f00:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x34>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d121      	bne.n	8001f5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d11e      	bne.n	8001f5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f28:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e005      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	e004      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d134      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d003      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xac>
 8001f8c:	e005      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f90:	617b      	str	r3, [r7, #20]
      break;
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f96:	617b      	str	r3, [r7, #20]
      break;
 8001f98:	e002      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	617b      	str	r3, [r7, #20]
      break;
 8001f9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	3301      	adds	r3, #1
 8001fac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	fb03 f202 	mul.w	r2, r3, r2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	0e5b      	lsrs	r3, r3, #25
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003568 	.word	0x08003568
 8001ff8:	00f42400 	.word	0x00f42400
 8001ffc:	007a1200 	.word	0x007a1200

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff fa26 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	@ 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff fa16 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	@ 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	@ 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	@ 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	@ 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e095      	b.n	80021fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020e2:	d009      	beq.n	80020f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
 80020ea:	e005      	b.n	80020f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fd3e 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800212e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002138:	d902      	bls.n	8002140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e002      	b.n	8002146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800214e:	d007      	beq.n	8002160 <HAL_SPI_Init+0xa0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002158:	d002      	beq.n	8002160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	ea42 0103 	orr.w	r1, r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	f003 0204 	and.w	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b088      	sub	sp, #32
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002216:	f7fe fe0b 	bl	8000e30 <HAL_GetTick>
 800221a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	e15c      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_SPI_Transmit+0x36>
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e154      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_SPI_Transmit+0x48>
 800224a:	2302      	movs	r3, #2
 800224c:	e14d      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022a0:	d10f      	bne.n	80022c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022cc:	2b40      	cmp	r3, #64	@ 0x40
 80022ce:	d007      	beq.n	80022e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022e8:	d952      	bls.n	8002390 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Transmit+0xf2>
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d145      	bne.n	8002384 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800231c:	e032      	b.n	8002384 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d112      	bne.n	8002352 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002350:	e018      	b.n	8002384 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002352:	f7fe fd6d 	bl	8000e30 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_Transmit+0x164>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002368:	d102      	bne.n	8002370 <HAL_SPI_Transmit+0x16a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0b2      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1c7      	bne.n	800231e <HAL_SPI_Transmit+0x118>
 800238e:	e083      	b.n	8002498 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x198>
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d177      	bne.n	800248e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d912      	bls.n	80023ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b02      	subs	r3, #2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023cc:	e05f      	b.n	800248e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023f4:	e04b      	b.n	800248e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d12b      	bne.n	800245c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d912      	bls.n	8002434 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	881a      	ldrh	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241e:	1c9a      	adds	r2, r3, #2
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b02      	subs	r3, #2
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002432:	e02c      	b.n	800248e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800245a:	e018      	b.n	800248e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245c:	f7fe fce8 	bl	8000e30 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d803      	bhi.n	8002474 <HAL_SPI_Transmit+0x26e>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002472:	d102      	bne.n	800247a <HAL_SPI_Transmit+0x274>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e02d      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ae      	bne.n	80023f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fcf5 	bl	8002e8c <SPI_EndRxTxTransaction>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b088      	sub	sp, #32
 80024f6:	af02      	add	r7, sp, #8
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	e123      	b.n	800275a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800251a:	d112      	bne.n	8002542 <HAL_SPI_Receive+0x50>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10e      	bne.n	8002542 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2204      	movs	r2, #4
 8002528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f912 	bl	8002762 <HAL_SPI_TransmitReceive>
 800253e:	4603      	mov	r3, r0
 8002540:	e10b      	b.n	800275a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002542:	f7fe fc75 	bl	8000e30 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_Receive+0x62>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e100      	b.n	800275a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_SPI_Receive+0x74>
 8002562:	2302      	movs	r3, #2
 8002564:	e0f9      	b.n	800275a <HAL_SPI_Receive+0x268>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2204      	movs	r2, #4
 8002572:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025b8:	d908      	bls.n	80025cc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	e007      	b.n	80025dc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025e4:	d10f      	bne.n	8002606 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002610:	2b40      	cmp	r3, #64	@ 0x40
 8002612:	d007      	beq.n	8002624 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800262c:	d875      	bhi.n	800271a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800262e:	e037      	b.n	80026a0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d117      	bne.n	800266e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f103 020c 	add.w	r2, r3, #12
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800266c:	e018      	b.n	80026a0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266e:	f7fe fbdf 	bl	8000e30 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d803      	bhi.n	8002686 <HAL_SPI_Receive+0x194>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002684:	d102      	bne.n	800268c <HAL_SPI_Receive+0x19a>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e05c      	b.n	800275a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1c1      	bne.n	8002630 <HAL_SPI_Receive+0x13e>
 80026ac:	e03b      	b.n	8002726 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d115      	bne.n	80026e8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	b292      	uxth	r2, r2
 80026c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80026e6:	e018      	b.n	800271a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e8:	f7fe fba2 	bl	8000e30 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d803      	bhi.n	8002700 <HAL_SPI_Receive+0x20e>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026fe:	d102      	bne.n	8002706 <HAL_SPI_Receive+0x214>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e01f      	b.n	800275a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1c3      	bne.n	80026ae <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb56 	bl	8002ddc <SPI_EndRxTransaction>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002758:	2300      	movs	r3, #0
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b08a      	sub	sp, #40	@ 0x28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fe fb5c 	bl	8000e30 <HAL_GetTick>
 8002778:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002780:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002790:	7ffb      	ldrb	r3, [r7, #31]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d00c      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x4e>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800279c:	d106      	bne.n	80027ac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_SPI_TransmitReceive+0x4a>
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d001      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	e1f3      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x60>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x60>
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1e8      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x72>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e1e1      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d003      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2205      	movs	r2, #5
 80027ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002832:	d802      	bhi.n	800283a <HAL_SPI_TransmitReceive+0xd8>
 8002834:	8abb      	ldrh	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d908      	bls.n	800284c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	e007      	b.n	800285c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d007      	beq.n	800287a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002882:	f240 8083 	bls.w	800298c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x132>
 800288e:	8afb      	ldrh	r3, [r7, #22]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d16f      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	1c9a      	adds	r2, r3, #2
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b8:	e05c      	b.n	8002974 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d11b      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x19e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_SPI_TransmitReceive+0x19e>
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d113      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	1c9a      	adds	r2, r3, #2
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11c      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x1e6>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	b292      	uxth	r2, r2
 8002926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	1c9a      	adds	r2, r3, #2
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002948:	f7fe fa72 	bl	8000e30 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002954:	429a      	cmp	r2, r3
 8002956:	d80d      	bhi.n	8002974 <HAL_SPI_TransmitReceive+0x212>
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800295e:	d009      	beq.n	8002974 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e111      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d19d      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x158>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d197      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x158>
 800298a:	e0e5      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_SPI_TransmitReceive+0x23a>
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 80d1 	bne.w	8002b3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d912      	bls.n	80029cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b02      	subs	r3, #2
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029ca:	e0b8      	b.n	8002b3e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f2:	e0a4      	b.n	8002b3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d134      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x30a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02f      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x30a>
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d12c      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d912      	bls.n	8002a42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b02      	subs	r3, #2
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a40:	e012      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d148      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x3aa>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d042      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d923      	bls.n	8002ada <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b02      	subs	r3, #2
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d81f      	bhi.n	8002b08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	e016      	b.n	8002b08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f103 020c 	add.w	r2, r3, #12
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b0c:	f7fe f990 	bl	8000e30 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d803      	bhi.n	8002b24 <HAL_SPI_TransmitReceive+0x3c2>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b22:	d102      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x3c8>
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e02c      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af55 	bne.w	80029f4 <HAL_SPI_TransmitReceive+0x292>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f47f af4e 	bne.w	80029f4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f995 	bl	8002e8c <SPI_EndRxTxTransaction>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3728      	adds	r7, #40	@ 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb0:	f7fe f93e 	bl	8000e30 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc0:	f7fe f936 	bl	8000e30 <HAL_GetTick>
 8002bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bc6:	4b39      	ldr	r3, [pc, #228]	@ (8002cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	0d1b      	lsrs	r3, r3, #20
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd6:	e054      	b.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bde:	d050      	beq.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be0:	f7fe f926 	bl	8000e30 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d902      	bls.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13d      	bne.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0e:	d111      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c18:	d004      	beq.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c22:	d107      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3c:	d10f      	bne.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e017      	b.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d19b      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008

08002cb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cc2:	f7fe f8b5 	bl	8000e30 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cd2:	f7fe f8ad 	bl	8000e30 <HAL_GetTick>
 8002cd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00da      	lsls	r2, r3, #3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	0d1b      	lsrs	r3, r3, #20
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cf8:	e060      	b.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d00:	d107      	bne.n	8002d12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d18:	d050      	beq.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1a:	f7fe f889 	bl	8000e30 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d902      	bls.n	8002d30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13d      	bne.n	8002dac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d48:	d111      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d52:	d004      	beq.n	8002d5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5c:	d107      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d76:	d10f      	bne.n	8002d98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e010      	b.n	8002dce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d196      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008

08002ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df0:	d111      	bne.n	8002e16 <SPI_EndRxTransaction+0x3a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfa:	d004      	beq.n	8002e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e04:	d107      	bne.n	8002e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff febd 	bl	8002ba0 <SPI_WaitFlagStateUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e023      	b.n	8002e84 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e44:	d11d      	bne.n	8002e82 <SPI_EndRxTransaction+0xa6>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d004      	beq.n	8002e5a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e58:	d113      	bne.n	8002e82 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff ff22 	bl	8002cb0 <SPI_WaitFifoStateUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e000      	b.n	8002e84 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff ff03 	bl	8002cb0 <SPI_WaitFifoStateUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e027      	b.n	8002f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff fe68 	bl	8002ba0 <SPI_WaitFlagStateUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e014      	b.n	8002f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fedc 	bl	8002cb0 <SPI_WaitFifoStateUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e000      	b.n	8002f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e049      	b.n	8002fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fe6a 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 f8fe 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_ConfigClockSource+0x1c>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0b6      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x18a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003000:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003004:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800300c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301e:	d03e      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xd8>
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003024:	f200 8087 	bhi.w	8003136 <HAL_TIM_ConfigClockSource+0x170>
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	f000 8086 	beq.w	800313c <HAL_TIM_ConfigClockSource+0x176>
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003034:	d87f      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 8003036:	2b70      	cmp	r3, #112	@ 0x70
 8003038:	d01a      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xaa>
 800303a:	2b70      	cmp	r3, #112	@ 0x70
 800303c:	d87b      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 800303e:	2b60      	cmp	r3, #96	@ 0x60
 8003040:	d050      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0x11e>
 8003042:	2b60      	cmp	r3, #96	@ 0x60
 8003044:	d877      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 8003046:	2b50      	cmp	r3, #80	@ 0x50
 8003048:	d03c      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xfe>
 800304a:	2b50      	cmp	r3, #80	@ 0x50
 800304c:	d873      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d058      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0x13e>
 8003052:	2b40      	cmp	r3, #64	@ 0x40
 8003054:	d86f      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 8003056:	2b30      	cmp	r3, #48	@ 0x30
 8003058:	d064      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x15e>
 800305a:	2b30      	cmp	r3, #48	@ 0x30
 800305c:	d86b      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 800305e:	2b20      	cmp	r3, #32
 8003060:	d060      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x15e>
 8003062:	2b20      	cmp	r3, #32
 8003064:	d867      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d05c      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x15e>
 800306a:	2b10      	cmp	r3, #16
 800306c:	d05a      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x15e>
 800306e:	e062      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	f000 f98a 	bl	8003398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	609a      	str	r2, [r3, #8]
      break;
 800309c:	e04f      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ae:	f000 f973 	bl	8003398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e03c      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d0:	461a      	mov	r2, r3
 80030d2:	f000 f8e7 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2150      	movs	r1, #80	@ 0x50
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f940 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 80030e2:	e02c      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f0:	461a      	mov	r2, r3
 80030f2:	f000 f906 	bl	8003302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2160      	movs	r1, #96	@ 0x60
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f930 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003102:	e01c      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003110:	461a      	mov	r2, r3
 8003112:	f000 f8c7 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2140      	movs	r1, #64	@ 0x40
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f920 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003122:	e00c      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 f917 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003134:	e003      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      break;
 800313a:	e000      	b.n	800313e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800313c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a46      	ldr	r2, [pc, #280]	@ (8003284 <TIM_Base_SetConfig+0x12c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a43      	ldr	r2, [pc, #268]	@ (8003288 <TIM_Base_SetConfig+0x130>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a42      	ldr	r2, [pc, #264]	@ (800328c <TIM_Base_SetConfig+0x134>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a41      	ldr	r2, [pc, #260]	@ (8003290 <TIM_Base_SetConfig+0x138>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a40      	ldr	r2, [pc, #256]	@ (8003294 <TIM_Base_SetConfig+0x13c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a35      	ldr	r2, [pc, #212]	@ (8003284 <TIM_Base_SetConfig+0x12c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d01b      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a32      	ldr	r2, [pc, #200]	@ (8003288 <TIM_Base_SetConfig+0x130>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d017      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a31      	ldr	r2, [pc, #196]	@ (800328c <TIM_Base_SetConfig+0x134>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a30      	ldr	r2, [pc, #192]	@ (8003290 <TIM_Base_SetConfig+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00f      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003294 <TIM_Base_SetConfig+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003298 <TIM_Base_SetConfig+0x140>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <TIM_Base_SetConfig+0x144>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_Base_SetConfig+0x9a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <TIM_Base_SetConfig+0x148>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <TIM_Base_SetConfig+0x12c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <TIM_Base_SetConfig+0x13c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <TIM_Base_SetConfig+0x140>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <TIM_Base_SetConfig+0x144>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <TIM_Base_SetConfig+0x148>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f023 0201 	bic.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]
  }
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40013400 	.word	0x40013400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800

080032a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0201 	bic.w	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 030a 	bic.w	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003302:	b480      	push	{r7}
 8003304:	b087      	sub	sp, #28
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 0210 	bic.w	r2, r3, #16
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800332c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	031b      	lsls	r3, r3, #12
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800333e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	f043 0307 	orr.w	r3, r3, #7
 8003384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e068      	b.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2e      	ldr	r2, [pc, #184]	@ (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2d      	ldr	r2, [pc, #180]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800342a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003462:	d018      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10c      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800349c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40014000 	.word	0x40014000

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003530 <__libc_init_array+0x38>)
 80034fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003534 <__libc_init_array+0x3c>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	2600      	movs	r6, #0
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	4d0b      	ldr	r5, [pc, #44]	@ (8003538 <__libc_init_array+0x40>)
 800350a:	4c0c      	ldr	r4, [pc, #48]	@ (800353c <__libc_init_array+0x44>)
 800350c:	f000 f818 	bl	8003540 <_init>
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	2600      	movs	r6, #0
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	f855 3b04 	ldr.w	r3, [r5], #4
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	08003598 	.word	0x08003598
 8003534:	08003598 	.word	0x08003598
 8003538:	08003598 	.word	0x08003598
 800353c:	0800359c 	.word	0x0800359c

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
