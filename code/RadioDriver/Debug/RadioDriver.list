
RadioDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c8  080035c8  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080035c8  080035c8  0000502c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080035c8  080035c8  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035cc  080035cc  000045cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080035d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000002c  080035fc  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080035fc  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2db  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfc  00000000  00000000  00011337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00013038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0a  00000000  00000000  00013e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bde  00000000  00000000  00014992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e369  00000000  00000000  0003a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebd8e  00000000  00000000  000488d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  001346ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00138298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003570 	.word	0x08003570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003570 	.word	0x08003570

080001c8 <HAL_GPIO_EXTI_Callback>:
#else
uint8_t test_recieve[NRF24L01P_PAYLOAD_LENGTH] = { 0 };
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b40      	cmp	r3, #64	@ 0x40
 80001d6:	d101      	bne.n	80001dc <HAL_GPIO_EXTI_Callback+0x14>
#ifdef TX
		Radio_tx_irq();
 80001d8:	f000 fa21 	bl	800061e <Radio_tx_irq>
#else
		Radio_rx_receive(test_recieve);
#endif
	}
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <main>:



int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	HAL_Init();
 80001ea:	f000 fdd0 	bl	8000d8e <HAL_Init>


	SystemClock_Config();
 80001ee:	f000 f82d 	bl	800024c <SystemClock_Config>

	MX_GPIO_Init();
 80001f2:	f000 f959 	bl	80004a8 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001f6:	f000 f87b 	bl	80002f0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80001fa:	f000 f8b7 	bl	800036c <MX_TIM2_Init>
	MX_TIM5_Init();
 80001fe:	f000 f903 	bl	8000408 <MX_TIM5_Init>


	// test code
#ifdef TX
	Radio_tx_init(2500, _1Mbps, &hspi1);
 8000202:	4a10      	ldr	r2, [pc, #64]	@ (8000244 <main+0x60>)
 8000204:	2100      	movs	r1, #0
 8000206:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800020a:	f000 f9c9 	bl	80005a0 <Radio_tx_init>

	while (1)
	{
#ifdef TX
		// change tx test data
		for(int i= 0; i < 8; i++)
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e00d      	b.n	8000230 <main+0x4c>
			test_transmit[i]++;
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <main+0x64>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	b2d9      	uxtb	r1, r3
 8000220:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <main+0x64>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		for(int i= 0; i < 8; i++)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b07      	cmp	r3, #7
 8000234:	ddee      	ble.n	8000214 <main+0x30>

		// transmit
		Radio_tx_transmit(test_transmit);
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <main+0x64>)
 8000238:	f000 f9e6 	bl	8000608 <Radio_tx_transmit>
#else
		// do nothing for now
#endif
		HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	@ 0x64
 800023e:	f000 fe1b 	bl	8000e78 <HAL_Delay>
		for(int i= 0; i < 8; i++)
 8000242:	e7e4      	b.n	800020e <main+0x2a>
 8000244:	20000048 	.word	0x20000048
 8000248:	20000000 	.word	0x20000000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	@ 0x58
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	@ 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 f95c 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000272:	f001 f91f 	bl	80014b4 <HAL_PWREx_ControlVoltageScaling>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800027c:	f000 f98a 	bl	8000594 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2310      	movs	r3, #16
 800028c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000296:	2301      	movs	r3, #1
 8000298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800029a:	230a      	movs	r3, #10
 800029c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800029e:	2307      	movs	r3, #7
 80002a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f956 	bl	8001560 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ba:	f000 f96b 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fd1e 	bl	8001d18 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002e2:	f000 f957 	bl	8000594 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3758      	adds	r7, #88	@ 0x58
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000368 <MX_SPI1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_SPI1_Init+0x74>)
 80002fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <MX_SPI1_Init+0x74>)
 800030a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800030e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_SPI1_Init+0x74>)
 800031e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000322:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_SPI1_Init+0x74>)
 800033e:	2207      	movs	r2, #7
 8000340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_SPI1_Init+0x74>)
 800034a:	2208      	movs	r2, #8
 800034c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_SPI1_Init+0x74>)
 8000350:	f001 fece 	bl	80020f0 <HAL_SPI_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f91b 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000048 	.word	0x20000048
 8000368:	40013000 	.word	0x40013000

0800036c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038a:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <MX_TIM2_Init+0x98>)
 800038c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000392:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <MX_TIM2_Init+0x98>)
 8000394:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_TIM2_Init+0x98>)
 800039c:	2210      	movs	r2, #16
 800039e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a2:	2213      	movs	r2, #19
 80003a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003b6:	f002 fdc7 	bl	8002f48 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80003c0:	f000 f8e8 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003d2:	f002 fe10 	bl	8002ff6 <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003dc:	f000 f8da 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_TIM2_Init+0x98>)
 80003ee:	f003 f80b 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003f8:	f000 f8cc 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000ac 	.word	0x200000ac

08000408 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000428:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <MX_TIM5_Init+0x9c>)
 800042a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 800042c:	4b1c      	ldr	r3, [pc, #112]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800042e:	224f      	movs	r2, #79	@ 0x4f
 8000430:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000432:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000438:	4b19      	ldr	r3, [pc, #100]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800043a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800043e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000440:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000442:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000446:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800044e:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000450:	f002 fd7a 	bl	8002f48 <HAL_TIM_Base_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800045a:	f000 f89b 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000462:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <MX_TIM5_Init+0x98>)
 800046c:	f002 fdc3 	bl	8002ff6 <HAL_TIM_ConfigClockSource>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000476:	f000 f88d 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <MX_TIM5_Init+0x98>)
 8000488:	f002 ffbe 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000492:	f000 f87f 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000f8 	.word	0x200000f8
 80004a4:	40000c00 	.word	0x40000c00

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a31      	ldr	r2, [pc, #196]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	4a2b      	ldr	r2, [pc, #172]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e2:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	4a25      	ldr	r2, [pc, #148]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fa:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <MX_GPIO_Init+0xe0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050c:	481f      	ldr	r0, [pc, #124]	@ (800058c <MX_GPIO_Init+0xe4>)
 800050e:	f000 ff93 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	481e      	ldr	r0, [pc, #120]	@ (8000590 <MX_GPIO_Init+0xe8>)
 8000518:	f000 ff8e 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800051c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4815      	ldr	r0, [pc, #84]	@ (800058c <MX_GPIO_Init+0xe4>)
 8000536:	f000 fdd5 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	480f      	ldr	r0, [pc, #60]	@ (8000590 <MX_GPIO_Init+0xe8>)
 8000552:	f000 fdc7 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000556:	2340      	movs	r3, #64	@ 0x40
 8000558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <MX_GPIO_Init+0xe4>)
 800056c:	f000 fdba 	bl	80010e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2017      	movs	r0, #23
 8000576:	f000 fd7e 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800057a:	2017      	movs	r0, #23
 800057c:	f000 fd97 	bl	80010ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	48000400 	.word	0x48000400
 8000590:	48000800 	.word	0x48000800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <Radio_tx_init>:

    ce_high();
}

void Radio_tx_init(channel MHz, air_data_rate bps, SPI_HandleTypeDef *hspi)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	603a      	str	r2, [r7, #0]
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	460b      	mov	r3, r1
 80005ae:	717b      	strb	r3, [r7, #5]
	spi_handle = hspi;
 80005b0:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <Radio_tx_init+0x64>)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	6013      	str	r3, [r2, #0]

    Radio_reset();
 80005b6:	f000 f84f 	bl	8000658 <Radio_reset>

    Radio_ptx_mode();
 80005ba:	f000 f8a1 	bl	8000700 <Radio_ptx_mode>
    Radio_power_up();
 80005be:	f000 f951 	bl	8000864 <Radio_power_up>
    HAL_Delay(2);
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 fc58 	bl	8000e78 <HAL_Delay>

    Radio_set_rf_channel(MHz);
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f9dc 	bl	8000988 <Radio_set_rf_channel>
    Radio_set_rf_air_data_rate(bps);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fa09 	bl	80009ea <Radio_set_rf_air_data_rate>
    Radio_set_rf_tx_output_power(_0dBm);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f9e8 	bl	80009ae <Radio_set_rf_tx_output_power>

    Radio_set_crc_length(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f955 	bl	800088e <Radio_set_crc_length>
    Radio_set_address_widths(5);
 80005e4:	2005      	movs	r0, #5
 80005e6:	f000 f975 	bl	80008d4 <Radio_set_address_widths>

    Radio_auto_retransmit_count(15);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f000 f982 	bl	80008f4 <Radio_auto_retransmit_count>
    Radio_auto_retransmit_delay(NRF24L01P_RETRANSMIT_DELAY_US);
 80005f0:	20fa      	movs	r0, #250	@ 0xfa
 80005f2:	f000 f9a1 	bl	8000938 <Radio_auto_retransmit_delay>

    ce_high();
 80005f6:	f000 fa51 	bl	8000a9c <ce_high>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000144 	.word	0x20000144

08000608 <Radio_tx_transmit>:
    Radio_read_rx_fifo(rx_payload);
    Radio_clear_rx_dr();
}

void Radio_tx_transmit(uint8_t* tx_payload)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    Radio_write_tx_fifo(tx_payload);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 f88b 	bl	800072c <Radio_write_tx_fifo>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <Radio_tx_irq>:

void Radio_tx_irq()
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
    uint8_t tx_ds = Radio_get_status();
 8000624:	f000 f8dc 	bl	80007e0 <Radio_get_status>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <Radio_tx_irq+0x22>
    {
        // TX_DS (success)
        Radio_clear_tx_ds();
 800063a:	f000 f8eb 	bl	8000814 <Radio_clear_tx_ds>
    	// leave standby‑II
    	ce_low();
    	// arm the radio again
    	ce_high();
    }
}
 800063e:	e007      	b.n	8000650 <Radio_tx_irq+0x32>
    	Radio_clear_max_rt();
 8000640:	f000 f8fc 	bl	800083c <Radio_clear_max_rt>
    	reuse_last_tx_payload();
 8000644:	f000 f9fa 	bl	8000a3c <reuse_last_tx_payload>
    	ce_low();
 8000648:	f000 fa34 	bl	8000ab4 <ce_low>
    	ce_high();
 800064c:	f000 fa26 	bl	8000a9c <ce_high>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Radio_reset>:

/* nRF24L01+ Sub Functions */
void Radio_reset()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800065c:	f000 fa06 	bl	8000a6c <cs_high>
    ce_low();
 8000660:	f000 fa28 	bl	8000ab4 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000664:	2108      	movs	r1, #8
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fa58 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800066c:	213f      	movs	r1, #63	@ 0x3f
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fa54 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000674:	2103      	movs	r1, #3
 8000676:	2002      	movs	r0, #2
 8000678:	f000 fa50 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800067c:	2103      	movs	r1, #3
 800067e:	2003      	movs	r0, #3
 8000680:	f000 fa4c 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000684:	2103      	movs	r1, #3
 8000686:	2004      	movs	r0, #4
 8000688:	f000 fa48 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800068c:	2102      	movs	r1, #2
 800068e:	2005      	movs	r0, #5
 8000690:	f000 fa44 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000694:	2107      	movs	r1, #7
 8000696:	2006      	movs	r0, #6
 8000698:	f000 fa40 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800069c:	217e      	movs	r1, #126	@ 0x7e
 800069e:	2007      	movs	r0, #7
 80006a0:	f000 fa3c 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80006a4:	2100      	movs	r1, #0
 80006a6:	2011      	movs	r0, #17
 80006a8:	f000 fa38 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80006ac:	2100      	movs	r1, #0
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 fa34 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80006b4:	2100      	movs	r1, #0
 80006b6:	2012      	movs	r0, #18
 80006b8:	f000 fa30 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80006bc:	2100      	movs	r1, #0
 80006be:	2013      	movs	r0, #19
 80006c0:	f000 fa2c 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2014      	movs	r0, #20
 80006c8:	f000 fa28 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2015      	movs	r0, #21
 80006d0:	f000 fa24 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2016      	movs	r0, #22
 80006d8:	f000 fa20 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80006dc:	2111      	movs	r1, #17
 80006de:	2017      	movs	r0, #23
 80006e0:	f000 fa1c 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80006e4:	2100      	movs	r1, #0
 80006e6:	201c      	movs	r0, #28
 80006e8:	f000 fa18 	bl	8000b1c <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80006ec:	2100      	movs	r1, #0
 80006ee:	201d      	movs	r0, #29
 80006f0:	f000 fa14 	bl	8000b1c <write_register>

    // Reset FIFO
    Radio_flush_rx_fifo();
 80006f4:	f000 f840 	bl	8000778 <Radio_flush_rx_fifo>
    Radio_flush_tx_fifo();
 80006f8:	f000 f858 	bl	80007ac <Radio_flush_tx_fifo>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Radio_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void Radio_ptx_mode()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f9e0 	bl	8000acc <read_register>
 800070c:	4603      	mov	r3, r0
 800070e:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f9fd 	bl	8000b1c <write_register>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <Radio_write_tx_fifo>:

    return status;
}

uint8_t Radio_write_tx_fifo(uint8_t* tx_payload)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000734:	23a0      	movs	r3, #160	@ 0xa0
 8000736:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000738:	f000 f9a4 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <Radio_write_tx_fifo+0x48>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	f107 020e 	add.w	r2, r7, #14
 8000744:	f107 010f 	add.w	r1, r7, #15
 8000748:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	f002 f81f 	bl	8002792 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <Radio_write_tx_fifo+0x48>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	2220      	movs	r2, #32
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f001 fd69 	bl	8002236 <HAL_SPI_Transmit>
    cs_high();
 8000764:	f000 f982 	bl	8000a6c <cs_high>

    return status;
 8000768:	7bbb      	ldrb	r3, [r7, #14]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000144 	.word	0x20000144

08000778 <Radio_flush_rx_fifo>:

void Radio_flush_rx_fifo()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800077e:	23e2      	movs	r3, #226	@ 0xe2
 8000780:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000782:	f000 f97f 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <Radio_flush_rx_fifo+0x30>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	1dba      	adds	r2, r7, #6
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	f001 fffc 	bl	8002792 <HAL_SPI_TransmitReceive>
    cs_high();
 800079a:	f000 f967 	bl	8000a6c <cs_high>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000144 	.word	0x20000144

080007ac <Radio_flush_tx_fifo>:

void Radio_flush_tx_fifo()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80007b2:	23e1      	movs	r3, #225	@ 0xe1
 80007b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80007b6:	f000 f965 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <Radio_flush_tx_fifo+0x30>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	1dba      	adds	r2, r7, #6
 80007c0:	1df9      	adds	r1, r7, #7
 80007c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	f001 ffe2 	bl	8002792 <HAL_SPI_TransmitReceive>
    cs_high();
 80007ce:	f000 f94d 	bl	8000a6c <cs_high>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000144 	.word	0x20000144

080007e0 <Radio_get_status>:

uint8_t Radio_get_status()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80007e6:	23ff      	movs	r3, #255	@ 0xff
 80007e8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80007ea:	f000 f94b 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <Radio_get_status+0x30>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	1dba      	adds	r2, r7, #6
 80007f4:	1df9      	adds	r1, r7, #7
 80007f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	f001 ffc8 	bl	8002792 <HAL_SPI_TransmitReceive>
    cs_high();
 8000802:	f000 f933 	bl	8000a6c <cs_high>

    return status;
 8000806:	79bb      	ldrb	r3, [r7, #6]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000144 	.word	0x20000144

08000814 <Radio_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void Radio_clear_tx_ds()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    uint8_t new_status = Radio_get_status();
 800081a:	f7ff ffe1 	bl	80007e0 <Radio_get_status>
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4619      	mov	r1, r3
 800082e:	2007      	movs	r0, #7
 8000830:	f000 f974 	bl	8000b1c <write_register>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <Radio_clear_max_rt>:

void Radio_clear_max_rt()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    uint8_t new_status = Radio_get_status();
 8000842:	f7ff ffcd 	bl	80007e0 <Radio_get_status>
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4619      	mov	r1, r3
 8000856:	2007      	movs	r0, #7
 8000858:	f000 f960 	bl	8000b1c <write_register>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Radio_power_up>:

void Radio_power_up()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f92e 	bl	8000acc <read_register>
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4619      	mov	r1, r3
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f94b 	bl	8000b1c <write_register>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <Radio_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void Radio_set_crc_length(length bytes)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f917 	bl	8000acc <read_register>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d002      	beq.n	80008ae <Radio_set_crc_length+0x20>
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d005      	beq.n	80008b8 <Radio_set_crc_length+0x2a>
 80008ac:	e009      	b.n	80008c2 <Radio_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	f023 0304 	bic.w	r3, r3, #4
 80008b4:	73fb      	strb	r3, [r7, #15]
            break;
 80008b6:	e004      	b.n	80008c2 <Radio_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	73fb      	strb	r3, [r7, #15]
            break;
 80008c0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	4619      	mov	r1, r3
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f928 	bl	8000b1c <write_register>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Radio_set_address_widths>:

void Radio_set_address_widths(widths bytes)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	3b02      	subs	r3, #2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 f918 	bl	8000b1c <write_register>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <Radio_auto_retransmit_count>:

void Radio_auto_retransmit_count(count cnt)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 80008fe:	2004      	movs	r0, #4
 8000900:	f000 f8e4 	bl	8000acc <read_register>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
    v &= 0xF0;                 // keep ARD, clear ARC
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f023 030f 	bic.w	r3, r3, #15
 800090e:	73fb      	strb	r3, [r7, #15]
    v |= (cnt & 0x0F);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	b25a      	sxtb	r2, r3
 800091a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091e:	4313      	orrs	r3, r2
 8000920:	b25b      	sxtb	r3, r3
 8000922:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4619      	mov	r1, r3
 8000928:	2004      	movs	r0, #4
 800092a:	f000 f8f7 	bl	8000b1c <write_register>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Radio_auto_retransmit_delay>:

void Radio_auto_retransmit_delay(delay us)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8000942:	2004      	movs	r0, #4
 8000944:	f000 f8c2 	bl	8000acc <read_register>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
    v &= 0x0F;                 // keep ARC, clear ARD
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	73fb      	strb	r3, [r7, #15]
    v |= (((us/250) - 1) & 0x0F) << 4;
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <Radio_auto_retransmit_delay+0x4c>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	091b      	lsrs	r3, r3, #4
 800095e:	b29b      	uxth	r3, r3
 8000960:	3b01      	subs	r3, #1
 8000962:	b25b      	sxtb	r3, r3
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b25a      	sxtb	r2, r3
 8000968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096c:	4313      	orrs	r3, r2
 800096e:	b25b      	sxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	4619      	mov	r1, r3
 8000976:	2004      	movs	r0, #4
 8000978:	f000 f8d0 	bl	8000b1c <write_register>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	10624dd3 	.word	0x10624dd3

08000988 <Radio_set_rf_channel>:

void Radio_set_rf_channel(channel MHz)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000998:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	2005      	movs	r0, #5
 80009a2:	f000 f8bb 	bl	8000b1c <write_register>
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <Radio_set_rf_tx_output_power>:

void Radio_set_rf_tx_output_power(output_power dBm)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80009b8:	2006      	movs	r0, #6
 80009ba:	f000 f887 	bl	8000acc <read_register>
 80009be:	4603      	mov	r3, r0
 80009c0:	f023 0306 	bic.w	r3, r3, #6
 80009c4:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4619      	mov	r1, r3
 80009dc:	2006      	movs	r0, #6
 80009de:	f000 f89d 	bl	8000b1c <write_register>
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <Radio_set_rf_air_data_rate>:

void Radio_set_rf_air_data_rate(air_data_rate bps)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80009f4:	2006      	movs	r0, #6
 80009f6:	f000 f869 	bl	8000acc <read_register>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000a00:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d00a      	beq.n	8000a1e <Radio_set_rf_air_data_rate+0x34>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	dc0e      	bgt.n	8000a2a <Radio_set_rf_air_data_rate+0x40>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00b      	beq.n	8000a28 <Radio_set_rf_air_data_rate+0x3e>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <Radio_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	73fb      	strb	r3, [r7, #15]
            break;
 8000a1c:	e005      	b.n	8000a2a <Radio_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	73fb      	strb	r3, [r7, #15]
            break;
 8000a26:	e000      	b.n	8000a2a <Radio_set_rf_air_data_rate+0x40>
            break;
 8000a28:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2006      	movs	r0, #6
 8000a30:	f000 f874 	bl	8000b1c <write_register>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <reuse_last_tx_payload>:


/* static functions */

static void reuse_last_tx_payload(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
    uint8_t cmd = NRF24L01P_CMD_REUSE_TX_PL;   /* 0xE3 */
 8000a42:	23e3      	movs	r3, #227	@ 0xe3
 8000a44:	71fb      	strb	r3, [r7, #7]
    cs_low();
 8000a46:	f000 f81d 	bl	8000a84 <cs_low>
    HAL_SPI_Transmit(spi_handle, &cmd, 1, 2000);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <reuse_last_tx_payload+0x2c>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a54:	2201      	movs	r2, #1
 8000a56:	f001 fbee 	bl	8002236 <HAL_SPI_Transmit>
    cs_high();
 8000a5a:	f000 f807 	bl	8000a6c <cs_high>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000144 	.word	0x20000144

08000a6c <cs_high>:

static void cs_high()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a76:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <cs_high+0x14>)
 8000a78:	f000 fcde 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	48000400 	.word	0x48000400

08000a84 <cs_low>:

static void cs_low()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8e:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <cs_low+0x14>)
 8000a90:	f000 fcd2 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000400 	.word	0x48000400

08000a9c <ce_high>:

static void ce_high()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2180      	movs	r1, #128	@ 0x80
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <ce_high+0x14>)
 8000aa6:	f000 fcc7 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	48000800 	.word	0x48000800

08000ab4 <ce_low>:

static void ce_low()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	@ 0x80
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <ce_low+0x14>)
 8000abe:	f000 fcbb 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000800 	.word	0x48000800

08000acc <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000ada:	f7ff ffd3 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <read_register+0x4c>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	f107 010f 	add.w	r1, r7, #15
 8000aea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2301      	movs	r3, #1
 8000af2:	f001 fe4e 	bl	8002792 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, &read_val, 1, 2000);
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <read_register+0x4c>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f107 010d 	add.w	r1, r7, #13
 8000afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b02:	2201      	movs	r2, #1
 8000b04:	f001 fd0d 	bl	8002522 <HAL_SPI_Receive>
    cs_high();
 8000b08:	f7ff ffb0 	bl	8000a6c <cs_high>

    return read_val;
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000144 	.word	0x20000144

08000b1c <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000b3a:	f7ff ffa3 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <write_register+0x5c>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f107 020e 	add.w	r2, r7, #14
 8000b46:	f107 010f 	add.w	r1, r7, #15
 8000b4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	f001 fe1e 	bl	8002792 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, &write_val, 1, 2000);
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <write_register+0x5c>)
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f107 010d 	add.w	r1, r7, #13
 8000b5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b62:	2201      	movs	r2, #1
 8000b64:	f001 fb67 	bl	8002236 <HAL_SPI_Transmit>
    cs_high();
 8000b68:	f7ff ff80 	bl	8000a6c <cs_high>

    return write_val;
 8000b6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000144 	.word	0x20000144

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_SPI_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d128      	bne.n	8000c38 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a16      	ldr	r2, [pc, #88]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000c16:	23e0      	movs	r3, #224	@ 0xe0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f000 fa56 	bl	80010e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c58:	d10c      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c72:	e010      	b.n	8000c96 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x60>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f899 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000d0e:	2040      	movs	r0, #64	@ 0x40
 8000d10:	f000 fbaa 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	@ (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 fbdd 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fa39 	bl	80001e4 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000d80:	080035d0 	.word	0x080035d0
  ldr r2, =_sbss
 8000d84:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000d88:	2000014c 	.word	0x2000014c

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>

08000d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f961 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f80e 	bl	8000dc0 <HAL_InitTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	e001      	b.n	8000db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db0:	f7ff fee4 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <HAL_InitTick+0x6c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_InitTick+0x70>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f96d 	bl	80010ca <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d809      	bhi.n	8000e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e04:	f000 f937 	bl	8001076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_InitTick+0x74>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e001      	b.n	8000e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000024 	.word	0x20000024

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	20000148 	.word	0x20000148

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000148 	.word	0x20000148

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000028 	.word	0x20000028

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e17f      	b.n	80013f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8171 	beq.w	80013ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b01      	cmp	r3, #1
 8001116:	d005      	beq.n	8001124 <HAL_GPIO_Init+0x40>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d130      	bne.n	8001186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115a:	2201      	movs	r2, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 0201 	and.w	r2, r3, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b03      	cmp	r3, #3
 8001190:	d118      	bne.n	80011c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	08db      	lsrs	r3, r3, #3
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80ac 	beq.w	80013ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <HAL_GPIO_Init+0x330>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a5e      	ldr	r2, [pc, #376]	@ (8001414 <HAL_GPIO_Init+0x330>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001414 <HAL_GPIO_Init+0x330>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001418 <HAL_GPIO_Init+0x334>)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x242>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	@ (800141c <HAL_GPIO_Init+0x338>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x23e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001420 <HAL_GPIO_Init+0x33c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x23a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001424 <HAL_GPIO_Init+0x340>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x236>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001428 <HAL_GPIO_Init+0x344>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x232>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4b      	ldr	r2, [pc, #300]	@ (800142c <HAL_GPIO_Init+0x348>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x22e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4a      	ldr	r2, [pc, #296]	@ (8001430 <HAL_GPIO_Init+0x34c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x22a>
 800130a:	2306      	movs	r3, #6
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x244>
 800130e:	2307      	movs	r3, #7
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x244>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x244>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x244>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x244>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x244>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x244>
 8001326:	2300      	movs	r3, #0
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001338:	4937      	ldr	r1, [pc, #220]	@ (8001418 <HAL_GPIO_Init+0x334>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001346:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <HAL_GPIO_Init+0x350>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	@ (8001434 <HAL_GPIO_Init+0x350>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_GPIO_Init+0x350>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <HAL_GPIO_Init+0x350>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_GPIO_Init+0x350>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_GPIO_Init+0x350>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <HAL_GPIO_Init+0x350>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <HAL_GPIO_Init+0x350>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f ae78 	bne.w	80010f4 <HAL_GPIO_Init+0x10>
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800
 8001424:	48000c00 	.word	0x48000c00
 8001428:	48001000 	.word	0x48001000
 800142c:	48001400 	.word	0x48001400
 8001430:	48001800 	.word	0x48001800
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fe9e 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c2:	d130      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d0:	d038      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014da:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2232      	movs	r2, #50	@ 0x32
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	e002      	b.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150c:	d102      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f2      	bne.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001520:	d110      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e00f      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001532:	d007      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40007000 	.word	0x40007000
 8001558:	20000020 	.word	0x20000020
 800155c:	431bde83 	.word	0x431bde83

08001560 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e3ca      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001572:	4b97      	ldr	r3, [pc, #604]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157c:	4b94      	ldr	r3, [pc, #592]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80e4 	beq.w	800175c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_RCC_OscConfig+0x4a>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f040 808b 	bne.w	80016b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 8087 	bne.w	80016b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015aa:	4b89      	ldr	r3, [pc, #548]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x62>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3a2      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	4b82      	ldr	r3, [pc, #520]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_RCC_OscConfig+0x7c>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015da:	e005      	b.n	80015e8 <HAL_RCC_OscConfig+0x88>
 80015dc:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d223      	bcs.n	8001634 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd1d 	bl	8002030 <RCC_SetFlashLatencyFromMSIRange>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e383      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001600:	4b73      	ldr	r3, [pc, #460]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a72      	ldr	r2, [pc, #456]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	496d      	ldr	r1, [pc, #436]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161e:	4b6c      	ldr	r3, [pc, #432]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	4968      	ldr	r1, [pc, #416]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
 8001632:	e025      	b.n	8001680 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4960      	ldr	r1, [pc, #384]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	495b      	ldr	r1, [pc, #364]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fcdd 	bl	8002030 <RCC_SetFlashLatencyFromMSIRange>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e343      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001680:	f000 fc4a 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b52      	ldr	r3, [pc, #328]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	4950      	ldr	r1, [pc, #320]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	4a4e      	ldr	r2, [pc, #312]	@ (80017d8 <HAL_RCC_OscConfig+0x278>)
 800169e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a0:	4b4e      	ldr	r3, [pc, #312]	@ (80017dc <HAL_RCC_OscConfig+0x27c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fb8b 	bl	8000dc0 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d052      	beq.n	800175a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	e327      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d032      	beq.n	8001726 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c0:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a42      	ldr	r2, [pc, #264]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fbc8 	bl	8000e60 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d4:	f7ff fbc4 	bl	8000e60 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e310      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f2:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a36      	ldr	r2, [pc, #216]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4931      	ldr	r1, [pc, #196]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001710:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	492c      	ldr	r1, [pc, #176]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e01a      	b.n	800175c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001726:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001732:	f7ff fb95 	bl	8000e60 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173a:	f7ff fb91 	bl	8000e60 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e2dd      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800174c:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x1da>
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d074      	beq.n	8001852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x21a>
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d10e      	bne.n	8001792 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d064      	beq.n	8001850 <HAL_RCC_OscConfig+0x2f0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d160      	bne.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e2ba      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x24a>
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e026      	b.n	80017f8 <HAL_RCC_OscConfig+0x298>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b2:	d115      	bne.n	80017e0 <HAL_RCC_OscConfig+0x280>
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a02      	ldr	r2, [pc, #8]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x298>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08003588 	.word	0x08003588
 80017d8:	20000020 	.word	0x20000020
 80017dc:	20000024 	.word	0x20000024
 80017e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb2e 	bl	8000e60 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fb2a 	bl	8000e60 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e276      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	4b92      	ldr	r3, [pc, #584]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x2a8>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb1a 	bl	8000e60 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fb16 	bl	8000e60 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	@ 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e262      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	4b88      	ldr	r3, [pc, #544]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x2d0>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d060      	beq.n	8001920 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x310>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d119      	bne.n	800189e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	4b7c      	ldr	r3, [pc, #496]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x328>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e23f      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b76      	ldr	r3, [pc, #472]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4973      	ldr	r1, [pc, #460]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	e040      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fad5 	bl	8000e60 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fad1 	bl	8000e60 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e21d      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b65      	ldr	r3, [pc, #404]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b62      	ldr	r3, [pc, #392]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	495f      	ldr	r1, [pc, #380]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fab1 	bl	8000e60 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff faad 	bl	8000e60 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1f9      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b4b      	ldr	r3, [pc, #300]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa8c 	bl	8000e60 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fa88 	bl	8000e60 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1d4      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195e:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x3ec>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001974:	4a3b      	ldr	r2, [pc, #236]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fa6f 	bl	8000e60 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fa6b 	bl	8000e60 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1b7      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a6 	beq.w	8001b00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	4a26      	ldr	r2, [pc, #152]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d0:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d118      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa32 	bl	8000e60 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a00:	f7ff fa2e 	bl	8000e60 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e17a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_RCC_OscConfig+0x508>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4d8>
 8001a26:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a36:	e029      	b.n	8001a8c <HAL_RCC_OscConfig+0x52c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d115      	bne.n	8001a6c <HAL_RCC_OscConfig+0x50c>
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a46:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a56:	4a03      	ldr	r2, [pc, #12]	@ (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x52c>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a72:	4a9b      	ldr	r2, [pc, #620]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7c:	4b98      	ldr	r3, [pc, #608]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a82:	4a97      	ldr	r2, [pc, #604]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d016      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f9e4 	bl	8000e60 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f9e0 	bl	8000e60 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e12a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ed      	beq.n	8001a9c <HAL_RCC_OscConfig+0x53c>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9cd 	bl	8000e60 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f9c9 	bl	8000e60 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e113      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ed      	bne.n	8001aca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	4a79      	ldr	r2, [pc, #484]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80fe 	beq.w	8001d06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 80d0 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b14:	4b72      	ldr	r3, [pc, #456]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d130      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	3b01      	subs	r3, #1
 8001b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d127      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11f      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b54:	2a07      	cmp	r2, #7
 8001b56:	bf14      	ite	ne
 8001b58:	2201      	movne	r2, #1
 8001b5a:	2200      	moveq	r2, #0
 8001b5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d113      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d06e      	beq.n	8001c68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d069      	beq.n	8001c64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b90:	4b53      	ldr	r3, [pc, #332]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0ad      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb8:	f7ff f952 	bl	8000e60 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f94e 	bl	8000e60 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e09a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bde:	4b40      	ldr	r3, [pc, #256]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b40      	ldr	r3, [pc, #256]	@ (8001ce4 <HAL_RCC_OscConfig+0x784>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bf8:	0212      	lsls	r2, r2, #8
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c00:	0852      	lsrs	r2, r2, #1
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0552      	lsls	r2, r2, #21
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c0c:	0852      	lsrs	r2, r2, #1
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	0652      	lsls	r2, r2, #25
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c18:	0912      	lsrs	r2, r2, #4
 8001c1a:	0452      	lsls	r2, r2, #17
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	4930      	ldr	r1, [pc, #192]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c3c:	f7ff f910 	bl	8000e60 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f90c 	bl	8000e60 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e058      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c62:	e050      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04f      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d148      	bne.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c80:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c8c:	f7ff f8e8 	bl	8000e60 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f8e4 	bl	8000e60 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e030      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x734>
 8001cb2:	e028      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d023      	beq.n	8001d02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a08      	ldr	r2, [pc, #32]	@ (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f8cb 	bl	8000e60 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e00c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f8c7 	bl	8000e60 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d905      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e013      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4905      	ldr	r1, [pc, #20]	@ (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_RCC_OscConfig+0x7b4>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e001      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	feeefffc 	.word	0xfeeefffc

08001d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0e7      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b75      	ldr	r3, [pc, #468]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b72      	ldr	r3, [pc, #456]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4970      	ldr	r1, [pc, #448]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0cf      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d908      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b63      	ldr	r3, [pc, #396]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4960      	ldr	r1, [pc, #384]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d04c      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0a6      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	4b54      	ldr	r3, [pc, #336]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e08e      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e086      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4943      	ldr	r1, [pc, #268]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7ff f82e 	bl	8000e60 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f82a 	bl	8000e60 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e06e      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d208      	bcs.n	8001e5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	492b      	ldr	r1, [pc, #172]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5e:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d210      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6c:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0207 	bic.w	r2, r3, #7
 8001e74:	4923      	ldr	r1, [pc, #140]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e036      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4918      	ldr	r1, [pc, #96]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4910      	ldr	r1, [pc, #64]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ecc:	f000 f824 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	490b      	ldr	r1, [pc, #44]	@ (8001f0c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_ClockConfig+0x1fc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe ff65 	bl	8000dc0 <HAL_InitTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003588 	.word	0x08003588
 8001f10:	20000020 	.word	0x20000020
 8001f14:	20000024 	.word	0x20000024

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x34>
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11e      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f74:	4a2b      	ldr	r2, [pc, #172]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	e004      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d134      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	0e5b      	lsrs	r3, r3, #25
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	3301      	adds	r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002010:	69bb      	ldr	r3, [r7, #24]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	08003598 	.word	0x08003598
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200

08002030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800203c:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002048:	f7ff fa26 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 800204c:	6178      	str	r0, [r7, #20]
 800204e:	e014      	b.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	@ 0x58
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002068:	f7ff fa16 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 800206c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002078:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d10b      	bne.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b80      	cmp	r3, #128	@ 0x80
 8002086:	d919      	bls.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2ba0      	cmp	r3, #160	@ 0xa0
 800208c:	d902      	bls.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800208e:	2302      	movs	r3, #2
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e013      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e010      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b80      	cmp	r3, #128	@ 0x80
 800209e:	d902      	bls.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020a0:	2303      	movs	r3, #3
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e00a      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b80      	cmp	r3, #128	@ 0x80
 80020aa:	d102      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ac:	2302      	movs	r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e004      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b70      	cmp	r3, #112	@ 0x70
 80020b6:	d101      	bne.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 0207 	bic.w	r2, r3, #7
 80020c4:	4909      	ldr	r1, [pc, #36]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40022000 	.word	0x40022000

080020f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e095      	b.n	800222e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002112:	d009      	beq.n	8002128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
 800211a:	e005      	b.n	8002128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fd3e 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800215e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002168:	d902      	bls.n	8002170 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e002      	b.n	8002176 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002174:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800217e:	d007      	beq.n	8002190 <HAL_SPI_Init+0xa0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002188:	d002      	beq.n	8002190 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	ea42 0103 	orr.w	r1, r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	f003 0204 	and.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800220c:	ea42 0103 	orr.w	r1, r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002246:	f7fe fe0b 	bl	8000e60 <HAL_GetTick>
 800224a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
 800225e:	e15c      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_SPI_Transmit+0x36>
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e154      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_SPI_Transmit+0x48>
 800227a:	2302      	movs	r3, #2
 800227c:	e14d      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	88fa      	ldrh	r2, [r7, #6]
 800229e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d0:	d10f      	bne.n	80022f2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d007      	beq.n	8002310 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002318:	d952      	bls.n	80023c0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_SPI_Transmit+0xf2>
 8002322:	8b7b      	ldrh	r3, [r7, #26]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d145      	bne.n	80023b4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002338:	1c9a      	adds	r2, r3, #2
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800234c:	e032      	b.n	80023b4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d112      	bne.n	8002382 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236c:	1c9a      	adds	r2, r3, #2
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002380:	e018      	b.n	80023b4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002382:	f7fe fd6d 	bl	8000e60 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d803      	bhi.n	800239a <HAL_SPI_Transmit+0x164>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002398:	d102      	bne.n	80023a0 <HAL_SPI_Transmit+0x16a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0b2      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1c7      	bne.n	800234e <HAL_SPI_Transmit+0x118>
 80023be:	e083      	b.n	80024c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_SPI_Transmit+0x198>
 80023c8:	8b7b      	ldrh	r3, [r7, #26]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d177      	bne.n	80024be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d912      	bls.n	80023fe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	1c9a      	adds	r2, r3, #2
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b02      	subs	r3, #2
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023fc:	e05f      	b.n	80024be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002424:	e04b      	b.n	80024be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d12b      	bne.n	800248c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d912      	bls.n	8002464 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	1c9a      	adds	r2, r3, #2
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b02      	subs	r3, #2
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002462:	e02c      	b.n	80024be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800248a:	e018      	b.n	80024be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800248c:	f7fe fce8 	bl	8000e60 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d803      	bhi.n	80024a4 <HAL_SPI_Transmit+0x26e>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024a2:	d102      	bne.n	80024aa <HAL_SPI_Transmit+0x274>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e02d      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ae      	bne.n	8002426 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fcf5 	bl	8002ebc <SPI_EndRxTxTransaction>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002518:	2300      	movs	r3, #0
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b088      	sub	sp, #32
 8002526:	af02      	add	r7, sp, #8
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	e123      	b.n	800278a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800254a:	d112      	bne.n	8002572 <HAL_SPI_Receive+0x50>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10e      	bne.n	8002572 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2204      	movs	r2, #4
 8002558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f912 	bl	8002792 <HAL_SPI_TransmitReceive>
 800256e:	4603      	mov	r3, r0
 8002570:	e10b      	b.n	800278a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002572:	f7fe fc75 	bl	8000e60 <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_Receive+0x62>
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e100      	b.n	800278a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_SPI_Receive+0x74>
 8002592:	2302      	movs	r3, #2
 8002594:	e0f9      	b.n	800278a <HAL_SPI_Receive+0x268>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2204      	movs	r2, #4
 80025a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025e8:	d908      	bls.n	80025fc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800260a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002614:	d10f      	bne.n	8002636 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d007      	beq.n	8002654 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800265c:	d875      	bhi.n	800274a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800265e:	e037      	b.n	80026d0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d117      	bne.n	800269e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f103 020c 	add.w	r2, r3, #12
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800269c:	e018      	b.n	80026d0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269e:	f7fe fbdf 	bl	8000e60 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d803      	bhi.n	80026b6 <HAL_SPI_Receive+0x194>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_Receive+0x19a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e05c      	b.n	800278a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1c1      	bne.n	8002660 <HAL_SPI_Receive+0x13e>
 80026dc:	e03b      	b.n	8002756 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d115      	bne.n	8002718 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	1c9a      	adds	r2, r3, #2
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002716:	e018      	b.n	800274a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002718:	f7fe fba2 	bl	8000e60 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d803      	bhi.n	8002730 <HAL_SPI_Receive+0x20e>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800272e:	d102      	bne.n	8002736 <HAL_SPI_Receive+0x214>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e01f      	b.n	800278a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1c3      	bne.n	80026de <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb56 	bl	8002e0c <SPI_EndRxTransaction>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002788:	2300      	movs	r3, #0
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b08a      	sub	sp, #40	@ 0x28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a4:	f7fe fb5c 	bl	8000e60 <HAL_GetTick>
 80027a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d00c      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x4e>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027cc:	d106      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x4a>
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d001      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	e1f3      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x60>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x60>
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1e8      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_SPI_TransmitReceive+0x72>
 8002800:	2302      	movs	r3, #2
 8002802:	e1e1      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b04      	cmp	r3, #4
 8002816:	d003      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2205      	movs	r2, #5
 800281c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002862:	d802      	bhi.n	800286a <HAL_SPI_TransmitReceive+0xd8>
 8002864:	8abb      	ldrh	r3, [r7, #20]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d908      	bls.n	800287c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e007      	b.n	800288c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	2b40      	cmp	r3, #64	@ 0x40
 8002898:	d007      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028b2:	f240 8083 	bls.w	80029bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x132>
 80028be:	8afb      	ldrh	r3, [r7, #22]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d16f      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e8:	e05c      	b.n	80029a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11b      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x19e>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x19e>
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d113      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d11c      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x1e6>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	b292      	uxth	r2, r2
 8002956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002974:	2301      	movs	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002978:	f7fe fa72 	bl	8000e60 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002984:	429a      	cmp	r2, r3
 8002986:	d80d      	bhi.n	80029a4 <HAL_SPI_TransmitReceive+0x212>
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800298e:	d009      	beq.n	80029a4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e111      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d19d      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x158>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d197      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x158>
 80029ba:	e0e5      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x23a>
 80029c4:	8afb      	ldrh	r3, [r7, #22]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80d1 	bne.w	8002b6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d912      	bls.n	80029fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b02      	subs	r3, #2
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029fa:	e0b8      	b.n	8002b6e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a22:	e0a4      	b.n	8002b6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d134      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x30a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02f      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x30a>
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12c      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d912      	bls.n	8002a72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b02      	subs	r3, #2
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a70:	e012      	b.n	8002a98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d148      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x3aa>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d042      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d923      	bls.n	8002b0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	b292      	uxth	r2, r2
 8002ace:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b02      	subs	r3, #2
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d81f      	bhi.n	8002b38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	e016      	b.n	8002b38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f103 020c 	add.w	r2, r3, #12
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b3c:	f7fe f990 	bl	8000e60 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d803      	bhi.n	8002b54 <HAL_SPI_TransmitReceive+0x3c2>
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x3c8>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e02c      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f47f af55 	bne.w	8002a24 <HAL_SPI_TransmitReceive+0x292>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f47f af4e 	bne.w	8002a24 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f995 	bl	8002ebc <SPI_EndRxTxTransaction>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00e      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3728      	adds	r7, #40	@ 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002be0:	f7fe f93e 	bl	8000e60 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bf0:	f7fe f936 	bl	8000e60 <HAL_GetTick>
 8002bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bf6:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	0d1b      	lsrs	r3, r3, #20
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c06:	e054      	b.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c0e:	d050      	beq.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c10:	f7fe f926 	bl	8000e60 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d902      	bls.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13d      	bne.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c3e:	d111      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c48:	d004      	beq.n	8002c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c52:	d107      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6c:	d10f      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e017      	b.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d19b      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000020 	.word	0x20000020

08002ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cf2:	f7fe f8b5 	bl	8000e60 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d02:	f7fe f8ad 	bl	8000e60 <HAL_GetTick>
 8002d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d10:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00da      	lsls	r2, r3, #3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	0d1b      	lsrs	r3, r3, #20
 8002d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d28:	e060      	b.n	8002dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d30:	d107      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d48:	d050      	beq.n	8002dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d4a:	f7fe f889 	bl	8000e60 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d902      	bls.n	8002d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d13d      	bne.n	8002ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d78:	d111      	bne.n	8002d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d82:	d004      	beq.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8c:	d107      	bne.n	8002d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	d10f      	bne.n	8002dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e010      	b.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d196      	bne.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3728      	adds	r7, #40	@ 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000020 	.word	0x20000020

08002e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e20:	d111      	bne.n	8002e46 <SPI_EndRxTransaction+0x3a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e2a:	d004      	beq.n	8002e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d107      	bne.n	8002e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff febd 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e023      	b.n	8002eb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e74:	d11d      	bne.n	8002eb2 <SPI_EndRxTransaction+0xa6>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e7e:	d004      	beq.n	8002e8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e88:	d113      	bne.n	8002eb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff ff22 	bl	8002ce0 <SPI_WaitFifoStateUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e000      	b.n	8002eb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff ff03 	bl	8002ce0 <SPI_WaitFifoStateUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e027      	b.n	8002f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fe68 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e014      	b.n	8002f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fedc 	bl	8002ce0 <SPI_WaitFifoStateUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e000      	b.n	8002f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e049      	b.n	8002fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fe6a 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 f8fe 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_TIM_ConfigClockSource+0x1c>
 800300e:	2302      	movs	r3, #2
 8003010:	e0b6      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x18a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003030:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003034:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800303c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800304e:	d03e      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xd8>
 8003050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003054:	f200 8087 	bhi.w	8003166 <HAL_TIM_ConfigClockSource+0x170>
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305c:	f000 8086 	beq.w	800316c <HAL_TIM_ConfigClockSource+0x176>
 8003060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003064:	d87f      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 8003066:	2b70      	cmp	r3, #112	@ 0x70
 8003068:	d01a      	beq.n	80030a0 <HAL_TIM_ConfigClockSource+0xaa>
 800306a:	2b70      	cmp	r3, #112	@ 0x70
 800306c:	d87b      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 800306e:	2b60      	cmp	r3, #96	@ 0x60
 8003070:	d050      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x11e>
 8003072:	2b60      	cmp	r3, #96	@ 0x60
 8003074:	d877      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 8003076:	2b50      	cmp	r3, #80	@ 0x50
 8003078:	d03c      	beq.n	80030f4 <HAL_TIM_ConfigClockSource+0xfe>
 800307a:	2b50      	cmp	r3, #80	@ 0x50
 800307c:	d873      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 800307e:	2b40      	cmp	r3, #64	@ 0x40
 8003080:	d058      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x13e>
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d86f      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 8003086:	2b30      	cmp	r3, #48	@ 0x30
 8003088:	d064      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x15e>
 800308a:	2b30      	cmp	r3, #48	@ 0x30
 800308c:	d86b      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 800308e:	2b20      	cmp	r3, #32
 8003090:	d060      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x15e>
 8003092:	2b20      	cmp	r3, #32
 8003094:	d867      	bhi.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d05c      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x15e>
 800309a:	2b10      	cmp	r3, #16
 800309c:	d05a      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x15e>
 800309e:	e062      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	f000 f98a 	bl	80033c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
      break;
 80030cc:	e04f      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030de:	f000 f973 	bl	80033c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f0:	609a      	str	r2, [r3, #8]
      break;
 80030f2:	e03c      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	461a      	mov	r2, r3
 8003102:	f000 f8e7 	bl	80032d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2150      	movs	r1, #80	@ 0x50
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f940 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003112:	e02c      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003120:	461a      	mov	r2, r3
 8003122:	f000 f906 	bl	8003332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2160      	movs	r1, #96	@ 0x60
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f930 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003132:	e01c      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003140:	461a      	mov	r2, r3
 8003142:	f000 f8c7 	bl	80032d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f920 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003152:	e00c      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f000 f917 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003164:	e003      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e000      	b.n	800316e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800316c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a46      	ldr	r2, [pc, #280]	@ (80032b4 <TIM_Base_SetConfig+0x12c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d00f      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a43      	ldr	r2, [pc, #268]	@ (80032b8 <TIM_Base_SetConfig+0x130>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <TIM_Base_SetConfig+0x134>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a41      	ldr	r2, [pc, #260]	@ (80032c0 <TIM_Base_SetConfig+0x138>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a40      	ldr	r2, [pc, #256]	@ (80032c4 <TIM_Base_SetConfig+0x13c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a35      	ldr	r2, [pc, #212]	@ (80032b4 <TIM_Base_SetConfig+0x12c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d01b      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a32      	ldr	r2, [pc, #200]	@ (80032b8 <TIM_Base_SetConfig+0x130>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d017      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a31      	ldr	r2, [pc, #196]	@ (80032bc <TIM_Base_SetConfig+0x134>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a30      	ldr	r2, [pc, #192]	@ (80032c0 <TIM_Base_SetConfig+0x138>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2f      	ldr	r2, [pc, #188]	@ (80032c4 <TIM_Base_SetConfig+0x13c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2e      	ldr	r2, [pc, #184]	@ (80032c8 <TIM_Base_SetConfig+0x140>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2d      	ldr	r2, [pc, #180]	@ (80032cc <TIM_Base_SetConfig+0x144>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2c      	ldr	r2, [pc, #176]	@ (80032d0 <TIM_Base_SetConfig+0x148>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a16      	ldr	r2, [pc, #88]	@ (80032b4 <TIM_Base_SetConfig+0x12c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <TIM_Base_SetConfig+0x13c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a17      	ldr	r2, [pc, #92]	@ (80032c8 <TIM_Base_SetConfig+0x140>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <TIM_Base_SetConfig+0x144>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0xf8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <TIM_Base_SetConfig+0x148>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  }
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40013400 	.word	0x40013400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800

080032d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f023 0210 	bic.w	r2, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800335c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800336e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 0307 	orr.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e068      	b.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2e      	ldr	r2, [pc, #184]	@ (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800345a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1e      	ldr	r2, [pc, #120]	@ (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01d      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003492:	d018      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1b      	ldr	r2, [pc, #108]	@ (8003508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1a      	ldr	r2, [pc, #104]	@ (800350c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10c      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40013400 	.word	0x40013400
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40014000 	.word	0x40014000

08003518 <memset>:
 8003518:	4402      	add	r2, r0
 800351a:	4603      	mov	r3, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4d0d      	ldr	r5, [pc, #52]	@ (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	@ (8003564 <__libc_init_array+0x3c>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2600      	movs	r6, #0
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4d0b      	ldr	r5, [pc, #44]	@ (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	@ (800356c <__libc_init_array+0x44>)
 800353c:	f000 f818 	bl	8003570 <_init>
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2600      	movs	r6, #0
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f855 3b04 	ldr.w	r3, [r5], #4
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	080035c8 	.word	0x080035c8
 8003564:	080035c8 	.word	0x080035c8
 8003568:	080035c8 	.word	0x080035c8
 800356c:	080035cc 	.word	0x080035cc

08003570 <_init>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr

0800357c <_fini>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr
