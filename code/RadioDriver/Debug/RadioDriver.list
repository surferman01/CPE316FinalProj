
RadioDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002058  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080021e0  080021e0  000031e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002220  08002220  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002220  08002220  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002220  08002220  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002220  08002220  00003220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002224  08002224  00003224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002228  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08002234  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002234  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b475  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001993  00000000  00000000  0000f4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00010e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  00011b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025825  00000000  00000000  00012592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7dc  00000000  00000000  00037db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb438  00000000  00000000  00045593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001309cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  00130a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021c8 	.word	0x080021c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021c8 	.word	0x080021c8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 faab 	bl	8000726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80a 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f936 	bl	8000444 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 f858 	bl	800028c <MX_SPI1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f894 	bl	8000308 <MX_TIM2_Init>
  MX_TIM5_Init();
 80001e0:	f000 f8e0 	bl	80003a4 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	bf00      	nop
 80001e6:	e7fd      	b.n	80001e4 <main+0x1c>

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b096      	sub	sp, #88	@ 0x58
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2244      	movs	r2, #68	@ 0x44
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 ffba 	bl	8002170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	463b      	mov	r3, r7
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800020a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800020e:	f000 fe05 	bl	8000e1c <HAL_PWREx_ControlVoltageScaling>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000218:	f000 f976 	bl	8000508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000224:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000232:	2301      	movs	r3, #1
 8000234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000236:	230a      	movs	r3, #10
 8000238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800023a:	2307      	movs	r3, #7
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800023e:	2302      	movs	r3, #2
 8000240:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000242:	2302      	movs	r3, #2
 8000244:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fe3c 	bl	8000ec8 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000256:	f000 f957 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025e:	2303      	movs	r3, #3
 8000260:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800026e:	463b      	mov	r3, r7
 8000270:	2104      	movs	r1, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fa04 	bl	8001680 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800027e:	f000 f943 	bl	8000508 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3758      	adds	r7, #88	@ 0x58
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000290:	4b1b      	ldr	r3, [pc, #108]	@ (8000300 <MX_SPI1_Init+0x74>)
 8000292:	4a1c      	ldr	r2, [pc, #112]	@ (8000304 <MX_SPI1_Init+0x78>)
 8000294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000296:	4b1a      	ldr	r3, [pc, #104]	@ (8000300 <MX_SPI1_Init+0x74>)
 8000298:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800029c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800029e:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80002aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b2:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002b8:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002d8:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002da:	2207      	movs	r2, #7
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002de:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002e6:	2208      	movs	r2, #8
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	@ (8000300 <MX_SPI1_Init+0x74>)
 80002ec:	f001 fbb4 	bl	8001a58 <HAL_SPI_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f907 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000028 	.word	0x20000028
 8000304:	40013000 	.word	0x40013000

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000326:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <MX_TIM2_Init+0x98>)
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 800032e:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <MX_TIM2_Init+0x98>)
 8000330:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000336:	4b1a      	ldr	r3, [pc, #104]	@ (80003a0 <MX_TIM2_Init+0x98>)
 8000338:	2210      	movs	r2, #16
 800033a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800033c:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <MX_TIM2_Init+0x98>)
 800033e:	2213      	movs	r2, #19
 8000340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000342:	4b17      	ldr	r3, [pc, #92]	@ (80003a0 <MX_TIM2_Init+0x98>)
 8000344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034a:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <MX_TIM2_Init+0x98>)
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000350:	4813      	ldr	r0, [pc, #76]	@ (80003a0 <MX_TIM2_Init+0x98>)
 8000352:	f001 fc24 	bl	8001b9e <HAL_TIM_Base_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800035c:	f000 f8d4 	bl	8000508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <MX_TIM2_Init+0x98>)
 800036e:	f001 fc6d 	bl	8001c4c <HAL_TIM_ConfigClockSource>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000378:	f000 f8c6 	bl	8000508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_TIM2_Init+0x98>)
 800038a:	f001 fe69 	bl	8002060 <HAL_TIMEx_MasterConfigSynchronization>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000394:	f000 f8b8 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_TIM5_Init+0x98>)
 80003c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000440 <MX_TIM5_Init+0x9c>)
 80003c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <MX_TIM5_Init+0x98>)
 80003ca:	224f      	movs	r2, #79	@ 0x4f
 80003cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_TIM5_Init+0x98>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_TIM5_Init+0x98>)
 80003d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80003dc:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_TIM5_Init+0x98>)
 80003de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_TIM5_Init+0x98>)
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80003ea:	4814      	ldr	r0, [pc, #80]	@ (800043c <MX_TIM5_Init+0x98>)
 80003ec:	f001 fbd7 	bl	8001b9e <HAL_TIM_Base_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80003f6:	f000 f887 	bl	8000508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	@ (800043c <MX_TIM5_Init+0x98>)
 8000408:	f001 fc20 	bl	8001c4c <HAL_TIM_ConfigClockSource>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000412:	f000 f879 	bl	8000508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	@ (800043c <MX_TIM5_Init+0x98>)
 8000424:	f001 fe1c 	bl	8002060 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800042e:	f000 f86b 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000d8 	.word	0x200000d8
 8000440:	40000c00 	.word	0x40000c00

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <MX_GPIO_Init+0xb8>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a27      	ldr	r2, [pc, #156]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b22      	ldr	r3, [pc, #136]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a21      	ldr	r2, [pc, #132]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <MX_GPIO_Init+0xb8>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a1b      	ldr	r2, [pc, #108]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b19      	ldr	r3, [pc, #100]	@ (80004fc <MX_GPIO_Init+0xb8>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2140      	movs	r1, #64	@ 0x40
 80004a6:	4816      	ldr	r0, [pc, #88]	@ (8000500 <MX_GPIO_Init+0xbc>)
 80004a8:	f000 fc6e 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	4619      	mov	r1, r3
 80004c0:	4810      	ldr	r0, [pc, #64]	@ (8000504 <MX_GPIO_Init+0xc0>)
 80004c2:	f000 fab7 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004c6:	2340      	movs	r3, #64	@ 0x40
 80004c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	4619      	mov	r1, r3
 80004dc:	4808      	ldr	r0, [pc, #32]	@ (8000500 <MX_GPIO_Init+0xbc>)
 80004de:	f000 faa9 	bl	8000a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2017      	movs	r0, #23
 80004e8:	f000 fa6d 	bl	80009c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004ec:	2017      	movs	r0, #23
 80004ee:	f000 fa86 	bl	80009fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	48000800 	.word	0x48000800

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x44>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	@ 0x60
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_MspInit+0x44>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <HAL_MspInit+0x44>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	@ 0x58
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <HAL_SPI_MspInit+0x7c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d128      	bne.n	80005d0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 8000580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 8000584:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000588:	6613      	str	r3, [r2, #96]	@ 0x60
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800058e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a10      	ldr	r2, [pc, #64]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <HAL_SPI_MspInit+0x80>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80005ae:	23e0      	movs	r3, #224	@ 0xe0
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005be:	2305      	movs	r3, #5
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f000 fa32 	bl	8000a34 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	@ 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013000 	.word	0x40013000
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005f0:	d10c      	bne.n	800060c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f6:	4a11      	ldr	r2, [pc, #68]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800060a:	e010      	b.n	800062e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <HAL_TIM_Base_MspInit+0x60>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d10b      	bne.n	800062e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6593      	str	r3, [r2, #88]	@ 0x58
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_TIM_Base_MspInit+0x5c>)
 8000624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	40000c00 	.word	0x40000c00

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f899 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80006a6:	2080      	movs	r0, #128	@ 0x80
 80006a8:	f000 fb86 	bl	8000db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <SystemInit+0x20>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <SystemInit+0x20>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800070c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff ffea 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	@ (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f001 fd3d 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000706:	f7ff fd5f 	bl	80001c8 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002228 	.word	0x08002228
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	20000128 	.word	0x20000128

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>

08000726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f93d 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000736:	200f      	movs	r0, #15
 8000738:	f000 f80e 	bl	8000758 <HAL_InitTick>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e001      	b.n	800074c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000748:	f7ff fee4 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <HAL_InitTick+0x6c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d023      	beq.n	80007b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <HAL_InitTick+0x70>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <HAL_InitTick+0x6c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f949 	bl	8000a1a <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10f      	bne.n	80007ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d809      	bhi.n	80007a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800079c:	f000 f913 	bl	80009c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <HAL_InitTick+0x74>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e007      	b.n	80007b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e004      	b.n	80007b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e001      	b.n	80007b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000124 	.word	0x20000124

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	@ (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000124 	.word	0x20000124

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4907      	ldr	r1, [pc, #28]	@ (80008ac <__NVIC_EnableIRQ+0x38>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	@ (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	@ (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	@ 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	@ 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff29 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff3e 	bl	8000858 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff8e 	bl	8000904 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff31 	bl	8000874 <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e17f      	b.n	8000d44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 8171 	beq.w	8000d3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d005      	beq.n	8000a74 <HAL_GPIO_Init+0x40>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d130      	bne.n	8000ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	f003 0201 	and.w	r2, r3, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d118      	bne.n	8000b14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	f003 0201 	and.w	r2, r3, #1
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d017      	beq.n	8000b50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d123      	bne.n	8000ba4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	08da      	lsrs	r2, r3, #3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3208      	adds	r2, #8
 8000b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	6939      	ldr	r1, [r7, #16]
 8000ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0203 	and.w	r2, r3, #3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 80ac 	beq.w	8000d3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d64 <HAL_GPIO_Init+0x330>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a5e      	ldr	r2, [pc, #376]	@ (8000d64 <HAL_GPIO_Init+0x330>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d64 <HAL_GPIO_Init+0x330>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8000d68 <HAL_GPIO_Init+0x334>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	220f      	movs	r2, #15
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c28:	d025      	beq.n	8000c76 <HAL_GPIO_Init+0x242>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8000d6c <HAL_GPIO_Init+0x338>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01f      	beq.n	8000c72 <HAL_GPIO_Init+0x23e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a4e      	ldr	r2, [pc, #312]	@ (8000d70 <HAL_GPIO_Init+0x33c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d019      	beq.n	8000c6e <HAL_GPIO_Init+0x23a>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4d      	ldr	r2, [pc, #308]	@ (8000d74 <HAL_GPIO_Init+0x340>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0x236>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4c      	ldr	r2, [pc, #304]	@ (8000d78 <HAL_GPIO_Init+0x344>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00d      	beq.n	8000c66 <HAL_GPIO_Init+0x232>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8000d7c <HAL_GPIO_Init+0x348>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d007      	beq.n	8000c62 <HAL_GPIO_Init+0x22e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4a      	ldr	r2, [pc, #296]	@ (8000d80 <HAL_GPIO_Init+0x34c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_GPIO_Init+0x22a>
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	e00c      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c5e:	2307      	movs	r3, #7
 8000c60:	e00a      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e008      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c66:	2304      	movs	r3, #4
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e004      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e002      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c76:	2300      	movs	r3, #0
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	f002 0203 	and.w	r2, r2, #3
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	4093      	lsls	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c88:	4937      	ldr	r1, [pc, #220]	@ (8000d68 <HAL_GPIO_Init+0x334>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c96:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cba:	4a32      	ldr	r2, [pc, #200]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ce4:	4a27      	ldr	r2, [pc, #156]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d38:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <HAL_GPIO_Init+0x350>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f47f ae78 	bne.w	8000a44 <HAL_GPIO_Init+0x10>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	48001400 	.word	0x48001400
 8000d80:	48001800 	.word	0x48001800
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f806 	bl	8000de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40007000 	.word	0x40007000

08000e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e2a:	d130      	bne.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e38:	d038      	beq.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e42:	4a1e      	ldr	r2, [pc, #120]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2232      	movs	r2, #50	@ 0x32
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e60:	e002      	b.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e74:	d102      	bne.n	8000e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f2      	bne.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e88:	d110      	bne.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e00f      	b.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e9a:	d007      	beq.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ea4:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40007000 	.word	0x40007000
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	431bde83 	.word	0x431bde83

08000ec8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e3ca      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eda:	4b97      	ldr	r3, [pc, #604]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee4:	4b94      	ldr	r3, [pc, #592]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80e4 	beq.w	80010c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_RCC_OscConfig+0x4a>
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	f040 808b 	bne.w	8001020 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	f040 8087 	bne.w	8001020 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f12:	4b89      	ldr	r3, [pc, #548]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <HAL_RCC_OscConfig+0x62>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e3a2      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1a      	ldr	r2, [r3, #32]
 8000f2e:	4b82      	ldr	r3, [pc, #520]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <HAL_RCC_OscConfig+0x7c>
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f42:	e005      	b.n	8000f50 <HAL_RCC_OscConfig+0x88>
 8000f44:	4b7c      	ldr	r3, [pc, #496]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d223      	bcs.n	8000f9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fd1d 	bl	8001998 <RCC_SetFlashLatencyFromMSIRange>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e383      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f68:	4b73      	ldr	r3, [pc, #460]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a72      	ldr	r2, [pc, #456]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b70      	ldr	r3, [pc, #448]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	496d      	ldr	r1, [pc, #436]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f86:	4b6c      	ldr	r3, [pc, #432]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	4968      	ldr	r1, [pc, #416]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
 8000f9a:	e025      	b.n	8000fe8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9c:	4b66      	ldr	r3, [pc, #408]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a65      	ldr	r2, [pc, #404]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4960      	ldr	r1, [pc, #384]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fba:	4b5f      	ldr	r3, [pc, #380]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	495b      	ldr	r1, [pc, #364]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fcdd 	bl	8001998 <RCC_SetFlashLatencyFromMSIRange>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e343      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fe8:	f000 fc4a 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	4950      	ldr	r1, [pc, #320]	@ (800113c <HAL_RCC_OscConfig+0x274>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	4a4e      	ldr	r2, [pc, #312]	@ (8001140 <HAL_RCC_OscConfig+0x278>)
 8001006:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001008:	4b4e      	ldr	r3, [pc, #312]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fba3 	bl	8000758 <HAL_InitTick>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d052      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	e327      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d032      	beq.n	800108e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001028:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a42      	ldr	r2, [pc, #264]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001034:	f7ff fbe0 	bl	80007f8 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800103c:	f7ff fbdc 	bl	80007f8 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e310      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800104e:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4931      	ldr	r1, [pc, #196]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	492c      	ldr	r1, [pc, #176]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e01a      	b.n	80010c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800109a:	f7ff fbad 	bl	80007f8 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010a2:	f7ff fba9 	bl	80007f8 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e2dd      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f0      	bne.n	80010a2 <HAL_RCC_OscConfig+0x1da>
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d074      	beq.n	80011ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x21a>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d10e      	bne.n	80010fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d10b      	bne.n	80010fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d064      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d160      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e2ba      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x24a>
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800110a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e026      	b.n	8001160 <HAL_RCC_OscConfig+0x298>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111a:	d115      	bne.n	8001148 <HAL_RCC_OscConfig+0x280>
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 8001122:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a02      	ldr	r2, [pc, #8]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x298>
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	080021e0 	.word	0x080021e0
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004
 8001148:	4ba0      	ldr	r3, [pc, #640]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a9f      	ldr	r2, [pc, #636]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b9d      	ldr	r3, [pc, #628]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a9c      	ldr	r2, [pc, #624]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fb46 	bl	80007f8 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fb42 	bl	80007f8 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e276      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001182:	4b92      	ldr	r3, [pc, #584]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x2a8>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fb32 	bl	80007f8 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fb2e 	bl	80007f8 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e262      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	4b88      	ldr	r3, [pc, #544]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x2d0>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d060      	beq.n	8001288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_OscConfig+0x310>
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d119      	bne.n	8001206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d116      	bne.n	8001206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d8:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_OscConfig+0x328>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e23f      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4973      	ldr	r1, [pc, #460]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001204:	e040      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d023      	beq.n	8001256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120e:	4b6f      	ldr	r3, [pc, #444]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff faed 	bl	80007f8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fae9 	bl	80007f8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e21d      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001234:	4b65      	ldr	r3, [pc, #404]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b62      	ldr	r3, [pc, #392]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	061b      	lsls	r3, r3, #24
 800124e:	495f      	ldr	r1, [pc, #380]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e018      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b5d      	ldr	r3, [pc, #372]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a5c      	ldr	r2, [pc, #368]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800125c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fac9 	bl	80007f8 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fac5 	bl	80007f8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1f9      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800127c:	4b53      	ldr	r3, [pc, #332]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03c      	beq.n	800130e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800129e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012a2:	4a4a      	ldr	r2, [pc, #296]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff faa4 	bl	80007f8 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff faa0 	bl	80007f8 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1d4      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80012c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ef      	beq.n	80012b4 <HAL_RCC_OscConfig+0x3ec>
 80012d4:	e01b      	b.n	800130e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d6:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80012d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012dc:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e6:	f7ff fa87 	bl	80007f8 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fa83 	bl	80007f8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1b7      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ef      	bne.n	80012ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80a6 	beq.w	8001468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001320:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10d      	bne.n	8001348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	4a26      	ldr	r2, [pc, #152]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	@ 0x58
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001344:	2301      	movs	r3, #1
 8001346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_RCC_OscConfig+0x508>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d118      	bne.n	8001386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_RCC_OscConfig+0x508>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1d      	ldr	r2, [pc, #116]	@ (80013d0 <HAL_RCC_OscConfig+0x508>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001360:	f7ff fa4a 	bl	80007f8 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001368:	f7ff fa46 	bl	80007f8 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e17a      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_RCC_OscConfig+0x508>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d108      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4d8>
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800139e:	e029      	b.n	80013f4 <HAL_RCC_OscConfig+0x52c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d115      	bne.n	80013d4 <HAL_RCC_OscConfig+0x50c>
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ae:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80013ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013be:	4a03      	ldr	r2, [pc, #12]	@ (80013cc <HAL_RCC_OscConfig+0x504>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x52c>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40007000 	.word	0x40007000
 80013d4:	4b9c      	ldr	r3, [pc, #624]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013da:	4a9b      	ldr	r2, [pc, #620]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013e4:	4b98      	ldr	r3, [pc, #608]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80013e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ea:	4a97      	ldr	r2, [pc, #604]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d016      	beq.n	800142a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff f9fc 	bl	80007f8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff f9f8 	bl	80007f8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e12a      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141a:	4b8b      	ldr	r3, [pc, #556]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800141c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ed      	beq.n	8001404 <HAL_RCC_OscConfig+0x53c>
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142a:	f7ff f9e5 	bl	80007f8 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff f9e1 	bl	80007f8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001440:	4293      	cmp	r3, r2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e113      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001448:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ed      	bne.n	8001432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145c:	4b7a      	ldr	r3, [pc, #488]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	4a79      	ldr	r2, [pc, #484]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80fe 	beq.w	800166e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001476:	2b02      	cmp	r3, #2
 8001478:	f040 80d0 	bne.w	800161c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800147c:	4b72      	ldr	r3, [pc, #456]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	429a      	cmp	r2, r3
 800148e:	d130      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	3b01      	subs	r3, #1
 800149c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	429a      	cmp	r2, r3
 80014a0:	d127      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d11f      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014bc:	2a07      	cmp	r2, #7
 80014be:	bf14      	ite	ne
 80014c0:	2201      	movne	r2, #1
 80014c2:	2200      	moveq	r2, #0
 80014c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d113      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	3b01      	subs	r3, #1
 80014d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	3b01      	subs	r3, #1
 80014ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d06e      	beq.n	80015d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	d069      	beq.n	80015cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001504:	4b50      	ldr	r3, [pc, #320]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0ad      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001514:	4b4c      	ldr	r3, [pc, #304]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800151a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001520:	f7ff f96a 	bl	80007f8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff f966 	bl	80007f8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e09a      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153a:	4b43      	ldr	r3, [pc, #268]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001546:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	4b40      	ldr	r3, [pc, #256]	@ (800164c <HAL_RCC_OscConfig+0x784>)
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001556:	3a01      	subs	r2, #1
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001560:	0212      	lsls	r2, r2, #8
 8001562:	4311      	orrs	r1, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001568:	0852      	lsrs	r2, r2, #1
 800156a:	3a01      	subs	r2, #1
 800156c:	0552      	lsls	r2, r2, #21
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001574:	0852      	lsrs	r2, r2, #1
 8001576:	3a01      	subs	r2, #1
 8001578:	0652      	lsls	r2, r2, #25
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001580:	0912      	lsrs	r2, r2, #4
 8001582:	0452      	lsls	r2, r2, #17
 8001584:	430a      	orrs	r2, r1
 8001586:	4930      	ldr	r1, [pc, #192]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2d      	ldr	r2, [pc, #180]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a2a      	ldr	r2, [pc, #168]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 800159e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015a4:	f7ff f928 	bl	80007f8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff f924 	bl	80007f8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e058      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ca:	e050      	b.n	800166e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e04f      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d148      	bne.n	800166e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015f4:	f7ff f900 	bl	80007f8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff f8fc 	bl	80007f8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e030      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x734>
 800161a:	e028      	b.n	800166e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	d023      	beq.n	800166a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_RCC_OscConfig+0x780>)
 8001628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff f8e3 	bl	80007f8 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001634:	e00c      	b.n	8001650 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff f8df 	bl	80007f8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d905      	bls.n	8001650 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
 8001648:	40021000 	.word	0x40021000
 800164c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_OscConfig+0x7b0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ec      	bne.n	8001636 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_RCC_OscConfig+0x7b0>)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4905      	ldr	r1, [pc, #20]	@ (8001678 <HAL_RCC_OscConfig+0x7b0>)
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_RCC_OscConfig+0x7b4>)
 8001664:	4013      	ands	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
 8001668:	e001      	b.n	800166e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	feeefffc 	.word	0xfeeefffc

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0e7      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b75      	ldr	r3, [pc, #468]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b72      	ldr	r3, [pc, #456]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4970      	ldr	r1, [pc, #448]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b6e      	ldr	r3, [pc, #440]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0cf      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d010      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016dc:	429a      	cmp	r2, r3
 80016de:	d908      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b63      	ldr	r3, [pc, #396]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4960      	ldr	r1, [pc, #384]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d04c      	beq.n	8001798 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	4b5a      	ldr	r3, [pc, #360]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d121      	bne.n	8001756 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0a6      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	4b54      	ldr	r3, [pc, #336]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e09a      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001736:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e08e      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e086      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4943      	ldr	r1, [pc, #268]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001768:	f7ff f846 	bl	80007f8 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f842 	bl	80007f8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e06e      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d010      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d208      	bcs.n	80017c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	492b      	ldr	r1, [pc, #172]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b29      	ldr	r3, [pc, #164]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d210      	bcs.n	80017f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 0207 	bic.w	r2, r3, #7
 80017dc:	4923      	ldr	r1, [pc, #140]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_ClockConfig+0x1ec>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e036      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4918      	ldr	r1, [pc, #96]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4910      	ldr	r1, [pc, #64]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001834:	f000 f824 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	490b      	ldr	r1, [pc, #44]	@ (8001874 <HAL_RCC_ClockConfig+0x1f4>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_RCC_ClockConfig+0x1f8>)
 8001852:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001854:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_ClockConfig+0x1fc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe ff7d 	bl	8000758 <HAL_InitTick>
 800185e:	4603      	mov	r3, r0
 8001860:	72fb      	strb	r3, [r7, #11]

  return status;
 8001862:	7afb      	ldrb	r3, [r7, #11]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	080021e0 	.word	0x080021e0
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188e:	4b3e      	ldr	r3, [pc, #248]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001898:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x34>
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d121      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d11e      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018b4:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e005      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018dc:	4a2b      	ldr	r2, [pc, #172]	@ (800198c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x110>)
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	e004      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d101      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001904:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x114>)
 8001906:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d134      	bne.n	8001978 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0xa6>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d003      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0xac>
 8001924:	e005      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x110>)
 8001928:	617b      	str	r3, [r7, #20]
      break;
 800192a:	e005      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x114>)
 800192e:	617b      	str	r3, [r7, #20]
      break;
 8001930:	e002      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	617b      	str	r3, [r7, #20]
      break;
 8001936:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	3301      	adds	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x108>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	0e5b      	lsrs	r3, r3, #25
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	3301      	adds	r3, #1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001978:	69bb      	ldr	r3, [r7, #24]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	080021f0 	.word	0x080021f0
 8001990:	00f42400 	.word	0x00f42400
 8001994:	007a1200 	.word	0x007a1200

08001998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019b0:	f7ff fa26 	bl	8000e00 <HAL_PWREx_GetVoltageRange>
 80019b4:	6178      	str	r0, [r7, #20]
 80019b6:	e014      	b.n	80019e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	4a24      	ldr	r2, [pc, #144]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019d0:	f7ff fa16 	bl	8000e00 <HAL_PWREx_GetVoltageRange>
 80019d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019e8:	d10b      	bne.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b80      	cmp	r3, #128	@ 0x80
 80019ee:	d919      	bls.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80019f4:	d902      	bls.n	80019fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f6:	2302      	movs	r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e013      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	e010      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b80      	cmp	r3, #128	@ 0x80
 8001a06:	d902      	bls.n	8001a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a08:	2303      	movs	r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e00a      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b80      	cmp	r3, #128	@ 0x80
 8001a12:	d102      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	e004      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b70      	cmp	r3, #112	@ 0x70
 8001a1e:	d101      	bne.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a20:	2301      	movs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 0207 	bic.w	r2, r3, #7
 8001a2c:	4909      	ldr	r1, [pc, #36]	@ (8001a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e095      	b.n	8001b96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d108      	bne.n	8001a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a7a:	d009      	beq.n	8001a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
 8001a82:	e005      	b.n	8001a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fd56 	bl	800055c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ad0:	d902      	bls.n	8001ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e002      	b.n	8001ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001ae6:	d007      	beq.n	8001af8 <HAL_SPI_Init+0xa0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001af0:	d002      	beq.n	8001af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	f003 0204 	and.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b74:	ea42 0103 	orr.w	r1, r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e049      	b.n	8001c44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fd0b 	bl	80005e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f000 f8ff 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_TIM_ConfigClockSource+0x1c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e0b6      	b.n	8001dd6 <HAL_TIM_ConfigClockSource+0x18a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ca4:	d03e      	beq.n	8001d24 <HAL_TIM_ConfigClockSource+0xd8>
 8001ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001caa:	f200 8087 	bhi.w	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb2:	f000 8086 	beq.w	8001dc2 <HAL_TIM_ConfigClockSource+0x176>
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cba:	d87f      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cbc:	2b70      	cmp	r3, #112	@ 0x70
 8001cbe:	d01a      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0xaa>
 8001cc0:	2b70      	cmp	r3, #112	@ 0x70
 8001cc2:	d87b      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cc4:	2b60      	cmp	r3, #96	@ 0x60
 8001cc6:	d050      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x11e>
 8001cc8:	2b60      	cmp	r3, #96	@ 0x60
 8001cca:	d877      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001ccc:	2b50      	cmp	r3, #80	@ 0x50
 8001cce:	d03c      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0xfe>
 8001cd0:	2b50      	cmp	r3, #80	@ 0x50
 8001cd2:	d873      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cd4:	2b40      	cmp	r3, #64	@ 0x40
 8001cd6:	d058      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0x13e>
 8001cd8:	2b40      	cmp	r3, #64	@ 0x40
 8001cda:	d86f      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cdc:	2b30      	cmp	r3, #48	@ 0x30
 8001cde:	d064      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x15e>
 8001ce0:	2b30      	cmp	r3, #48	@ 0x30
 8001ce2:	d86b      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d060      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x15e>
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d867      	bhi.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d05c      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x15e>
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d05a      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x15e>
 8001cf4:	e062      	b.n	8001dbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d06:	f000 f98b 	bl	8002020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	609a      	str	r2, [r3, #8]
      break;
 8001d22:	e04f      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d34:	f000 f974 	bl	8002020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d46:	609a      	str	r2, [r3, #8]
      break;
 8001d48:	e03c      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	461a      	mov	r2, r3
 8001d58:	f000 f8e8 	bl	8001f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2150      	movs	r1, #80	@ 0x50
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f941 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001d68:	e02c      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d76:	461a      	mov	r2, r3
 8001d78:	f000 f907 	bl	8001f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2160      	movs	r1, #96	@ 0x60
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f931 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001d88:	e01c      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d96:	461a      	mov	r2, r3
 8001d98:	f000 f8c8 	bl	8001f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2140      	movs	r1, #64	@ 0x40
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f921 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001da8:	e00c      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f000 f918 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001dba:	e003      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a46      	ldr	r2, [pc, #280]	@ (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfe:	d00f      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a43      	ldr	r2, [pc, #268]	@ (8001f10 <TIM_Base_SetConfig+0x130>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00b      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a42      	ldr	r2, [pc, #264]	@ (8001f14 <TIM_Base_SetConfig+0x134>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <TIM_Base_SetConfig+0x138>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a40      	ldr	r2, [pc, #256]	@ (8001f1c <TIM_Base_SetConfig+0x13c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d108      	bne.n	8001e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a35      	ldr	r2, [pc, #212]	@ (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e40:	d01b      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <TIM_Base_SetConfig+0x130>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d017      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a31      	ldr	r2, [pc, #196]	@ (8001f14 <TIM_Base_SetConfig+0x134>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <TIM_Base_SetConfig+0x138>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f1c <TIM_Base_SetConfig+0x13c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00b      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2e      	ldr	r2, [pc, #184]	@ (8001f20 <TIM_Base_SetConfig+0x140>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <TIM_Base_SetConfig+0x144>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <TIM_Base_SetConfig+0x148>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a16      	ldr	r2, [pc, #88]	@ (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <TIM_Base_SetConfig+0x13c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <TIM_Base_SetConfig+0x140>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <TIM_Base_SetConfig+0x144>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <TIM_Base_SetConfig+0x148>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d103      	bne.n	8001ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f023 0201 	bic.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]
  }
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40013400 	.word	0x40013400
 8001f20:	40014000 	.word	0x40014000
 8001f24:	40014400 	.word	0x40014400
 8001f28:	40014800 	.word	0x40014800

08001f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f023 0201 	bic.w	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f023 030a 	bic.w	r3, r3, #10
 8001f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	621a      	str	r2, [r3, #32]
}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f023 0210 	bic.w	r2, r3, #16
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	031b      	lsls	r3, r3, #12
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	621a      	str	r2, [r3, #32]
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	f043 0307 	orr.w	r3, r3, #7
 800200c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800203a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	021a      	lsls	r2, r3, #8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	431a      	orrs	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002074:	2302      	movs	r3, #2
 8002076:	e068      	b.n	800214a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80020b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01d      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ea:	d018      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00e      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a13      	ldr	r2, [pc, #76]	@ (800215c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10c      	bne.n	8002138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4313      	orrs	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40013400 	.word	0x40013400
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40014000 	.word	0x40014000

08002170 <memset>:
 8002170:	4402      	add	r2, r0
 8002172:	4603      	mov	r3, r0
 8002174:	4293      	cmp	r3, r2
 8002176:	d100      	bne.n	800217a <memset+0xa>
 8002178:	4770      	bx	lr
 800217a:	f803 1b01 	strb.w	r1, [r3], #1
 800217e:	e7f9      	b.n	8002174 <memset+0x4>

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4d0d      	ldr	r5, [pc, #52]	@ (80021b8 <__libc_init_array+0x38>)
 8002184:	4c0d      	ldr	r4, [pc, #52]	@ (80021bc <__libc_init_array+0x3c>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	2600      	movs	r6, #0
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	4d0b      	ldr	r5, [pc, #44]	@ (80021c0 <__libc_init_array+0x40>)
 8002192:	4c0c      	ldr	r4, [pc, #48]	@ (80021c4 <__libc_init_array+0x44>)
 8002194:	f000 f818 	bl	80021c8 <_init>
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	2600      	movs	r6, #0
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002220 	.word	0x08002220
 80021bc:	08002220 	.word	0x08002220
 80021c0:	08002220 	.word	0x08002220
 80021c4:	08002224 	.word	0x08002224

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
