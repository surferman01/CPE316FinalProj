
ShiftRegisters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002560  08002560  00003560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a0  080025a0  000035a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080025b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080025b4  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7d3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b23  00000000  00000000  0000e80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00010338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000901  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002579d  00000000  00000000  000117f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c475  00000000  00000000  00036f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9c05  00000000  00000000  0004340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  0012d054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00130068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002548 	.word	0x08002548

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002548 	.word	0x08002548

080001c8 <HAL_TIM_PeriodElapsedCallback>:
		0x00, // 6
		0x00, // 7
};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	Timer_handle();
 80001d0:	f000 fa86 	bl	80006e0 <Timer_handle>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	HAL_Init();
 80001e0:	f000 fadf 	bl	80007a2 <HAL_Init>

	SystemClock_Config();
 80001e4:	f000 f818 	bl	8000218 <SystemClock_Config>

	MX_GPIO_Init();
 80001e8:	f000 f906 	bl	80003f8 <MX_GPIO_Init>
	MX_TIM2_Init();
 80001ec:	f000 f866 	bl	80002bc <MX_TIM2_Init>
	MX_TIM5_Init();
 80001f0:	f000 f8b2 	bl	8000358 <MX_TIM5_Init>

	// timer setup
	HAL_TIM_Base_Start_IT(&htim2);
 80001f4:	4806      	ldr	r0, [pc, #24]	@ (8000210 <main+0x34>)
 80001f6:	f001 fd2d 	bl	8001c54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 80001fa:	4806      	ldr	r0, [pc, #24]	@ (8000214 <main+0x38>)
 80001fc:	f001 fcc2 	bl	8001b84 <HAL_TIM_Base_Start>

	Timer_set_ns_upcounter(&htim5);
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <main+0x38>)
 8000202:	f000 fa79 	bl	80006f8 <Timer_set_ns_upcounter>

	ShiftReg_test();
 8000206:	f000 f92f 	bl	8000468 <ShiftReg_test>

	//ShiftReg_output_enable();
	//ShiftReg_shift_in_data(test_data, SHIFT_REG_COUNT);

	while (1)
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0x2e>
 800020e:	bf00      	nop
 8000210:	20000028 	.word	0x20000028
 8000214:	20000074 	.word	0x20000074

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	@ 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	@ 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 f962 	bl	80024f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800023e:	f000 fe2b 	bl	8000e98 <HAL_PWREx_ControlVoltageScaling>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000248:	f000 f908 	bl	800045c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024c:	2302      	movs	r3, #2
 800024e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000254:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000266:	230a      	movs	r3, #10
 8000268:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800026a:	2307      	movs	r3, #7
 800026c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fe62 	bl	8000f44 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000286:	f000 f8e9 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2303      	movs	r3, #3
 8000290:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	2104      	movs	r1, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fa2a 	bl	80016fc <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ae:	f000 f8d5 	bl	800045c <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	@ 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002e4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80002e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002ec:	2210      	movs	r2, #16
 80002ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002f2:	2213      	movs	r2, #19
 80002f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80002f6:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000300:	2280      	movs	r2, #128	@ 0x80
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000304:	4813      	ldr	r0, [pc, #76]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000306:	f001 fbe5 	bl	8001ad4 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000310:	f000 f8a4 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000322:	f001 fe0e 	bl	8001f42 <HAL_TIM_ConfigClockSource>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800032c:	f000 f896 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_TIM2_Init+0x98>)
 800033e:	f002 f831 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000348:	f000 f888 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028

08000358 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000376:	4b1e      	ldr	r3, [pc, #120]	@ (80003f0 <MX_TIM5_Init+0x98>)
 8000378:	4a1e      	ldr	r2, [pc, #120]	@ (80003f4 <MX_TIM5_Init+0x9c>)
 800037a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 800037c:	4b1c      	ldr	r3, [pc, #112]	@ (80003f0 <MX_TIM5_Init+0x98>)
 800037e:	224f      	movs	r2, #79	@ 0x4f
 8000380:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_TIM5_Init+0x98>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000388:	4b19      	ldr	r3, [pc, #100]	@ (80003f0 <MX_TIM5_Init+0x98>)
 800038a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800038e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000390:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <MX_TIM5_Init+0x98>)
 8000392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000396:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_TIM5_Init+0x98>)
 800039a:	2280      	movs	r2, #128	@ 0x80
 800039c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800039e:	4814      	ldr	r0, [pc, #80]	@ (80003f0 <MX_TIM5_Init+0x98>)
 80003a0:	f001 fb98 	bl	8001ad4 <HAL_TIM_Base_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80003aa:	f000 f857 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	4619      	mov	r1, r3
 80003ba:	480d      	ldr	r0, [pc, #52]	@ (80003f0 <MX_TIM5_Init+0x98>)
 80003bc:	f001 fdc1 	bl	8001f42 <HAL_TIM_ConfigClockSource>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80003c6:	f000 f849 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4806      	ldr	r0, [pc, #24]	@ (80003f0 <MX_TIM5_Init+0x98>)
 80003d8:	f001 ffe4 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80003e2:	f000 f83b 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000074 	.word	0x20000074
 80003f4:	40000c00 	.word	0x40000c00

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_GPIO_Init+0x5c>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000410:	4a10      	ldr	r2, [pc, #64]	@ (8000454 <MX_GPIO_Init+0x5c>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000418:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_GPIO_Init+0x5c>)
 800041a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041c:	f003 0302 	and.w	r3, r3, #2
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800042a:	480b      	ldr	r0, [pc, #44]	@ (8000458 <MX_GPIO_Init+0x60>)
 800042c:	f000 fd0e 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RCK_Pin nG_Pin SRCK_Pin SIN_Pin */
  GPIO_InitStruct.Pin = RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin;
 8000430:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000434:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000436:	2311      	movs	r3, #17
 8000438:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800043e:	2303      	movs	r3, #3
 8000440:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4619      	mov	r1, r3
 8000446:	4804      	ldr	r0, [pc, #16]	@ (8000458 <MX_GPIO_Init+0x60>)
 8000448:	f000 fb56 	bl	8000af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800044c:	bf00      	nop
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	48000400 	.word	0x48000400

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <Error_Handler+0x8>

08000468 <ShiftReg_test>:
static void set_SIN(GPIO_PinState val);
static void set_nG(GPIO_PinState val);

/* exposed functions */

void ShiftReg_test() {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	while (1) {
		set_SIN(LOW);
 800046c:	2000      	movs	r0, #0
 800046e:	f000 f857 	bl	8000520 <set_SIN>
		set_RCK(LOW);
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f81c 	bl	80004b0 <set_RCK>
		set_SRCK(LOW);
 8000478:	2000      	movs	r0, #0
 800047a:	f000 f835 	bl	80004e8 <set_SRCK>
		set_nG(LOW);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 f86a 	bl	8000558 <set_nG>
		HAL_Delay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000488:	f000 fa00 	bl	800088c <HAL_Delay>
		set_SIN(HIGH);
 800048c:	2001      	movs	r0, #1
 800048e:	f000 f847 	bl	8000520 <set_SIN>
		set_RCK(HIGH);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 f80c 	bl	80004b0 <set_RCK>
		set_SRCK(HIGH);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 f825 	bl	80004e8 <set_SRCK>
		set_nG(HIGH);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 f85a 	bl	8000558 <set_nG>
		HAL_Delay(1000);
 80004a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004a8:	f000 f9f0 	bl	800088c <HAL_Delay>
		set_SIN(LOW);
 80004ac:	bf00      	nop
 80004ae:	e7dd      	b.n	800046c <ShiftReg_test+0x4>

080004b0 <set_RCK>:
	set_RCK(LOW);
}

/* static functions */

static void set_RCK(GPIO_PinState val) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_RCK_GPIO_EXPANDER, SHIFTREG_RCK_GPIO_PIN, val);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	461a      	mov	r2, r3
 80004be:	2110      	movs	r1, #16
 80004c0:	4808      	ldr	r0, [pc, #32]	@ (80004e4 <set_RCK+0x34>)
 80004c2:	f000 fcc3 	bl	8000e4c <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d103      	bne.n	80004d4 <set_RCK+0x24>
		delay_ns(RCK_RISE_TIME);
 80004cc:	207b      	movs	r0, #123	@ 0x7b
 80004ce:	f000 f923 	bl	8000718 <delay_ns>
	} else {
		delay_ns(RCK_FALL_TIME);
	}
}
 80004d2:	e002      	b.n	80004da <set_RCK+0x2a>
		delay_ns(RCK_FALL_TIME);
 80004d4:	2008      	movs	r0, #8
 80004d6:	f000 f91f 	bl	8000718 <delay_ns>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	48000400 	.word	0x48000400

080004e8 <set_SRCK>:

static void set_SRCK(GPIO_PinState val) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SRCK_GPIO_EXPANDER, SHIFTREG_SRCK_GPIO_PIN, val);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	461a      	mov	r2, r3
 80004f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <set_SRCK+0x34>)
 80004fc:	f000 fca6 	bl	8000e4c <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d103      	bne.n	800050e <set_SRCK+0x26>
		delay_ns(SRCK_RISE_TIME);
 8000506:	207b      	movs	r0, #123	@ 0x7b
 8000508:	f000 f906 	bl	8000718 <delay_ns>
	} else {
		delay_ns(SRCK_FALL_TIME);
	}
}
 800050c:	e002      	b.n	8000514 <set_SRCK+0x2c>
		delay_ns(SRCK_FALL_TIME);
 800050e:	2008      	movs	r0, #8
 8000510:	f000 f902 	bl	8000718 <delay_ns>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <set_SIN>:

static void set_SIN(GPIO_PinState val) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SIN_GPIO_EXPANDER, SHIFTREG_SIN_GPIO_PIN, val);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000532:	4808      	ldr	r0, [pc, #32]	@ (8000554 <set_SIN+0x34>)
 8000534:	f000 fc8a 	bl	8000e4c <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d103      	bne.n	8000546 <set_SIN+0x26>
		delay_ns(SIN_RISE_TIME);
 800053e:	207b      	movs	r0, #123	@ 0x7b
 8000540:	f000 f8ea 	bl	8000718 <delay_ns>
	} else {
		delay_ns(SIN_FALL_TIME);
	}
}
 8000544:	e002      	b.n	800054c <set_SIN+0x2c>
		delay_ns(SIN_FALL_TIME);
 8000546:	2008      	movs	r0, #8
 8000548:	f000 f8e6 	bl	8000718 <delay_ns>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	48000400 	.word	0x48000400

08000558 <set_nG>:

static void set_nG(GPIO_PinState val) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_NG_GPIO_EXPANDER, SHIFTREG_NG_GPIO_PIN, val);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	461a      	mov	r2, r3
 8000566:	2120      	movs	r1, #32
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <set_nG+0x34>)
 800056a:	f000 fc6f 	bl	8000e4c <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d103      	bne.n	800057c <set_nG+0x24>
		delay_ns(NG_RISE_TIME);
 8000574:	207b      	movs	r0, #123	@ 0x7b
 8000576:	f000 f8cf 	bl	8000718 <delay_ns>
	} else {
		delay_ns(NG_FALL_TIME);
	}
}
 800057a:	e002      	b.n	8000582 <set_nG+0x2a>
		delay_ns(NG_FALL_TIME);
 800057c:	2008      	movs	r0, #8
 800057e:	f000 f8cb 	bl	8000718 <delay_ns>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	48000400 	.word	0x48000400

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059a:	4a0e      	ldr	r2, [pc, #56]	@ (80005d4 <HAL_MspInit+0x44>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_MspInit+0x44>)
 80005a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_MspInit+0x44>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005e8:	d114      	bne.n	8000614 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ee:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	201c      	movs	r0, #28
 8000608:	f000 fa3f 	bl	8000a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800060c:	201c      	movs	r0, #28
 800060e:	f000 fa58 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000612:	e010      	b.n	8000636 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <HAL_TIM_Base_MspInit+0x6c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10b      	bne.n	8000636 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 8000620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000622:	4a07      	ldr	r2, [pc, #28]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6593      	str	r3, [r2, #88]	@ 0x58
 800062a:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <HAL_TIM_Base_MspInit+0x68>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000
 8000644:	40000c00 	.word	0x40000c00

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <NMI_Handler+0x4>

08000650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <UsageFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069e:	f000 f8d5 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <TIM2_IRQHandler+0x10>)
 80006ae:	f001 fb41 	bl	8001d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Timer_handle>:

#include "timer.h"

// timer
void Timer_handle(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	//__disable_irq();

	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	bf00      	nop
	{
		if (sTimer[sIndex] != 0)
			sTimer[sIndex]--;
	}
	//__enable_irq();
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <Timer_set_ns_upcounter>:

// delay
static TIM_HandleTypeDef* htim_ns_upcounter = NULL;

void Timer_set_ns_upcounter(TIM_HandleTypeDef* htim) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	htim_ns_upcounter = htim;
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <Timer_set_ns_upcounter+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000c0 	.word	0x200000c0

08000718 <delay_ns>:

void delay_ns(uint32_t ns) {
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    uint32_t start = htim_ns_upcounter->Instance->CNT;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <delay_ns+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000728:	60fb      	str	r3, [r7, #12]

    while ((uint32_t) (htim_ns_upcounter->Instance->CNT - start) < ns)
 800072a:	bf00      	nop
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <delay_ns+0x34>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	429a      	cmp	r2, r3
 800073c:	d8f6      	bhi.n	800072c <delay_ns+0x14>
        ;;
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	200000c0 	.word	0x200000c0

08000750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000788 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff ffb2 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 800075a:	490d      	ldr	r1, [pc, #52]	@ (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000770:	4c0a      	ldr	r4, [pc, #40]	@ (800079c <LoopForever+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f001 febf 	bl	8002500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000782:	f7ff fd2b 	bl	80001dc <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	080025a8 	.word	0x080025a8
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	200000c8 	.word	0x200000c8

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>

080007a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f961 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f80e 	bl	80007d4 <HAL_InitTick>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	e001      	b.n	80007c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c4:	f7ff fee4 	bl	8000590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <HAL_InitTick+0x6c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d023      	beq.n	8000830 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <HAL_InitTick+0x70>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <HAL_InitTick+0x6c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f96d 	bl	8000ade <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10f      	bne.n	800082a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d809      	bhi.n	8000824 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000818:	f000 f937 	bl	8000a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_InitTick+0x74>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e007      	b.n	8000834 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e004      	b.n	8000834 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e001      	b.n	8000834 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	20000000 	.word	0x20000000
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_IncTick+0x20>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_IncTick+0x24>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_IncTick+0x24>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008
 8000870:	200000c4 	.word	0x200000c4

08000874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <HAL_GetTick+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	200000c4 	.word	0x200000c4

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff ffee 	bl	8000874 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffde 	bl	8000874 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4907      	ldr	r1, [pc, #28]	@ (8000970 <__NVIC_EnableIRQ+0x38>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff29 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff3e 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff8e 	bl	80009c8 <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff31 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffa2 	bl	8000a30 <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	e17f      	b.n	8000e08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8171 	beq.w	8000e02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d005      	beq.n	8000b38 <HAL_GPIO_Init+0x40>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	f003 0201 	and.w	r2, r3, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d118      	bne.n	8000bd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	6939      	ldr	r1, [r7, #16]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80ac 	beq.w	8000e02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <HAL_GPIO_Init+0x330>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	4a5e      	ldr	r2, [pc, #376]	@ (8000e28 <HAL_GPIO_Init+0x330>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e28 <HAL_GPIO_Init+0x330>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8000e2c <HAL_GPIO_Init+0x334>)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cec:	d025      	beq.n	8000d3a <HAL_GPIO_Init+0x242>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8000e30 <HAL_GPIO_Init+0x338>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01f      	beq.n	8000d36 <HAL_GPIO_Init+0x23e>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8000e34 <HAL_GPIO_Init+0x33c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0x23a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4d      	ldr	r2, [pc, #308]	@ (8000e38 <HAL_GPIO_Init+0x340>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d013      	beq.n	8000d2e <HAL_GPIO_Init+0x236>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	@ (8000e3c <HAL_GPIO_Init+0x344>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00d      	beq.n	8000d2a <HAL_GPIO_Init+0x232>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4b      	ldr	r2, [pc, #300]	@ (8000e40 <HAL_GPIO_Init+0x348>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d007      	beq.n	8000d26 <HAL_GPIO_Init+0x22e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4a      	ldr	r2, [pc, #296]	@ (8000e44 <HAL_GPIO_Init+0x34c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_GPIO_Init+0x22a>
 8000d1e:	2306      	movs	r3, #6
 8000d20:	e00c      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d22:	2307      	movs	r3, #7
 8000d24:	e00a      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e008      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x244>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	f002 0203 	and.w	r2, r2, #3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4c:	4937      	ldr	r1, [pc, #220]	@ (8000e2c <HAL_GPIO_Init+0x334>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da8:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dae:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfc:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <HAL_GPIO_Init+0x350>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f ae78 	bne.w	8000b08 <HAL_GPIO_Init+0x10>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48000c00 	.word	0x48000c00
 8000e3c:	48001000 	.word	0x48001000
 8000e40:	48001400 	.word	0x48001400
 8000e44:	48001800 	.word	0x48001800
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40007000 	.word	0x40007000

08000e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ea6:	d130      	bne.n	8000f0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb4:	d038      	beq.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2232      	movs	r2, #50	@ 0x32
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	0c9b      	lsrs	r3, r3, #18
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000edc:	e002      	b.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ef0:	d102      	bne.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f2      	bne.n	8000ede <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f04:	d110      	bne.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e00f      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f16:	d007      	beq.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40007000 	.word	0x40007000
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	431bde83 	.word	0x431bde83

08000f44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e3ca      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f56:	4b97      	ldr	r3, [pc, #604]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f60:	4b94      	ldr	r3, [pc, #592]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80e4 	beq.w	8001140 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_RCC_OscConfig+0x4a>
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	f040 808b 	bne.w	800109c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 8087 	bne.w	800109c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8e:	4b89      	ldr	r3, [pc, #548]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x62>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e3a2      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4b82      	ldr	r3, [pc, #520]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x7c>
 8000fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fbe:	e005      	b.n	8000fcc <HAL_RCC_OscConfig+0x88>
 8000fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d223      	bcs.n	8001018 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fd1d 	bl	8001a14 <RCC_SetFlashLatencyFromMSIRange>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e383      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe4:	4b73      	ldr	r3, [pc, #460]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a72      	ldr	r2, [pc, #456]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b70      	ldr	r3, [pc, #448]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	496d      	ldr	r1, [pc, #436]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001002:	4b6c      	ldr	r3, [pc, #432]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	4968      	ldr	r1, [pc, #416]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
 8001016:	e025      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001018:	4b66      	ldr	r3, [pc, #408]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a65      	ldr	r2, [pc, #404]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4960      	ldr	r1, [pc, #384]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001036:	4b5f      	ldr	r3, [pc, #380]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	495b      	ldr	r1, [pc, #364]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fcdd 	bl	8001a14 <RCC_SetFlashLatencyFromMSIRange>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e343      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001064:	f000 fc4a 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4950      	ldr	r1, [pc, #320]	@ (80011b8 <HAL_RCC_OscConfig+0x274>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	4a4e      	ldr	r2, [pc, #312]	@ (80011bc <HAL_RCC_OscConfig+0x278>)
 8001082:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001084:	4b4e      	ldr	r3, [pc, #312]	@ (80011c0 <HAL_RCC_OscConfig+0x27c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fba3 	bl	80007d4 <HAL_InitTick>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d052      	beq.n	800113e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	e327      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d032      	beq.n	800110a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010a4:	4b43      	ldr	r3, [pc, #268]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a42      	ldr	r2, [pc, #264]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fbe0 	bl	8000874 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbdc 	bl	8000874 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e310      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ca:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a36      	ldr	r2, [pc, #216]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4931      	ldr	r1, [pc, #196]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f4:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	492c      	ldr	r1, [pc, #176]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e01a      	b.n	8001140 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a29      	ldr	r2, [pc, #164]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001116:	f7ff fbad 	bl	8000874 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111e:	f7ff fba9 	bl	8000874 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e2dd      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x1da>
 800113c:	e000      	b.n	8001140 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d074      	beq.n	8001236 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x21a>
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d10e      	bne.n	8001176 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d10b      	bne.n	8001176 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d064      	beq.n	8001234 <HAL_RCC_OscConfig+0x2f0>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d160      	bne.n	8001234 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e2ba      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x24a>
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e026      	b.n	80011dc <HAL_RCC_OscConfig+0x298>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001196:	d115      	bne.n	80011c4 <HAL_RCC_OscConfig+0x280>
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a02      	ldr	r2, [pc, #8]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x298>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	08002560 	.word	0x08002560
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004
 80011c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a9f      	ldr	r2, [pc, #636]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a9c      	ldr	r2, [pc, #624]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb46 	bl	8000874 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fb42 	bl	8000874 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	@ 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e276      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fe:	4b92      	ldr	r3, [pc, #584]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x2a8>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fb32 	bl	8000874 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fb2e 	bl	8000874 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	@ 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e262      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001226:	4b88      	ldr	r3, [pc, #544]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x2d0>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d060      	beq.n	8001304 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b04      	cmp	r3, #4
 8001246:	d005      	beq.n	8001254 <HAL_RCC_OscConfig+0x310>
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d119      	bne.n	8001282 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d116      	bne.n	8001282 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001254:	4b7c      	ldr	r3, [pc, #496]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x328>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e23f      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b76      	ldr	r3, [pc, #472]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	4973      	ldr	r1, [pc, #460]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	e040      	b.n	8001304 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d023      	beq.n	80012d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128a:	4b6f      	ldr	r3, [pc, #444]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6e      	ldr	r2, [pc, #440]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff faed 	bl	8000874 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fae9 	bl	8000874 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e21d      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b0:	4b65      	ldr	r3, [pc, #404]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	061b      	lsls	r3, r3, #24
 80012ca:	495f      	ldr	r1, [pc, #380]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e018      	b.n	8001304 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fac9 	bl	8000874 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fac5 	bl	8000874 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1f9      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f8:	4b53      	ldr	r3, [pc, #332]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d03c      	beq.n	800138a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01c      	beq.n	8001352 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001318:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800131a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131e:	4a4a      	ldr	r2, [pc, #296]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff faa4 	bl	8000874 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff faa0 	bl	8000874 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1d4      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0ef      	beq.n	8001330 <HAL_RCC_OscConfig+0x3ec>
 8001350:	e01b      	b.n	800138a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001358:	4a3b      	ldr	r2, [pc, #236]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff fa87 	bl	8000874 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fa83 	bl	8000874 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1b7      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800137c:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800137e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ef      	bne.n	800136a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80a6 	beq.w	80014e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800139c:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10d      	bne.n	80013c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ac:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b4:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_RCC_OscConfig+0x508>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d118      	bne.n	8001402 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_RCC_OscConfig+0x508>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_RCC_OscConfig+0x508>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fa4a 	bl	8000874 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff fa46 	bl	8000874 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e17a      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_RCC_OscConfig+0x508>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <HAL_RCC_OscConfig+0x4d8>
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800141a:	e029      	b.n	8001470 <HAL_RCC_OscConfig+0x52c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d115      	bne.n	8001450 <HAL_RCC_OscConfig+0x50c>
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142a:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143a:	4a03      	ldr	r2, [pc, #12]	@ (8001448 <HAL_RCC_OscConfig+0x504>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001444:	e014      	b.n	8001470 <HAL_RCC_OscConfig+0x52c>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	40007000 	.word	0x40007000
 8001450:	4b9c      	ldr	r3, [pc, #624]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001456:	4a9b      	ldr	r2, [pc, #620]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001460:	4b98      	ldr	r3, [pc, #608]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001466:	4a97      	ldr	r2, [pc, #604]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d016      	beq.n	80014a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff f9fc 	bl	8000874 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff f9f8 	bl	8000874 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e12a      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001496:	4b8b      	ldr	r3, [pc, #556]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ed      	beq.n	8001480 <HAL_RCC_OscConfig+0x53c>
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a6:	f7ff f9e5 	bl	8000874 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff f9e1 	bl	8000874 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e113      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c4:	4b7f      	ldr	r3, [pc, #508]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ed      	bne.n	80014ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b7a      	ldr	r3, [pc, #488]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	4a79      	ldr	r2, [pc, #484]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80fe 	beq.w	80016ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f040 80d0 	bne.w	8001698 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f8:	4b72      	ldr	r3, [pc, #456]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001508:	429a      	cmp	r2, r3
 800150a:	d130      	bne.n	800156e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	3b01      	subs	r3, #1
 8001518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d127      	bne.n	800156e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001528:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d11f      	bne.n	800156e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001538:	2a07      	cmp	r2, #7
 800153a:	bf14      	ite	ne
 800153c:	2201      	movne	r2, #1
 800153e:	2200      	moveq	r2, #0
 8001540:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001542:	4293      	cmp	r3, r2
 8001544:	d113      	bne.n	800156e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	3b01      	subs	r3, #1
 8001554:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d109      	bne.n	800156e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d06e      	beq.n	800164c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d069      	beq.n	8001648 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001574:	4b53      	ldr	r3, [pc, #332]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001580:	4b50      	ldr	r3, [pc, #320]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0ad      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001590:	4b4c      	ldr	r3, [pc, #304]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4b      	ldr	r2, [pc, #300]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800159a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800159c:	f7ff f96a 	bl	8000874 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff f966 	bl	8000874 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e09a      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b6:	4b43      	ldr	r3, [pc, #268]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c2:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <HAL_RCC_OscConfig+0x784>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015d2:	3a01      	subs	r2, #1
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015dc:	0212      	lsls	r2, r2, #8
 80015de:	4311      	orrs	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015e4:	0852      	lsrs	r2, r2, #1
 80015e6:	3a01      	subs	r2, #1
 80015e8:	0552      	lsls	r2, r2, #21
 80015ea:	4311      	orrs	r1, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015f0:	0852      	lsrs	r2, r2, #1
 80015f2:	3a01      	subs	r2, #1
 80015f4:	0652      	lsls	r2, r2, #25
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015fc:	0912      	lsrs	r2, r2, #4
 80015fe:	0452      	lsls	r2, r2, #17
 8001600:	430a      	orrs	r2, r1
 8001602:	4930      	ldr	r1, [pc, #192]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001604:	4313      	orrs	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001608:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2d      	ldr	r2, [pc, #180]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800160e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001614:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a2a      	ldr	r2, [pc, #168]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001620:	f7ff f928 	bl	8000874 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff f924 	bl	8000874 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e058      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001646:	e050      	b.n	80016ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e04f      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164c:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d148      	bne.n	80016ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800165e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001662:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800166e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001670:	f7ff f900 	bl	8000874 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff f8fc 	bl	8000874 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e030      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x734>
 8001696:	e028      	b.n	80016ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d023      	beq.n	80016e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_RCC_OscConfig+0x780>)
 80016a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f8e3 	bl	8000874 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b0:	e00c      	b.n	80016cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff f8df 	bl	8000874 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d905      	bls.n	80016cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e013      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_RCC_OscConfig+0x7b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ec      	bne.n	80016b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x7b0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4905      	ldr	r1, [pc, #20]	@ (80016f4 <HAL_RCC_OscConfig+0x7b0>)
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x7b4>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e001      	b.n	80016ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	feeefffc 	.word	0xfeeefffc

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0e7      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d910      	bls.n	8001740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b72      	ldr	r3, [pc, #456]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	4970      	ldr	r1, [pc, #448]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b6e      	ldr	r3, [pc, #440]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cf      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b66      	ldr	r3, [pc, #408]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001758:	429a      	cmp	r2, r3
 800175a:	d908      	bls.n	800176e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4960      	ldr	r1, [pc, #384]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d04c      	beq.n	8001814 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001782:	4b5a      	ldr	r3, [pc, #360]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d121      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0a6      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b54      	ldr	r3, [pc, #336]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d115      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e09a      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b2:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e08e      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c2:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e086      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4943      	ldr	r1, [pc, #268]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e4:	f7ff f846 	bl	8000874 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f842 	bl	8000874 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e06e      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d010      	beq.n	8001842 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800182c:	429a      	cmp	r2, r3
 800182e:	d208      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	492b      	ldr	r1, [pc, #172]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001842:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d210      	bcs.n	8001872 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	4923      	ldr	r1, [pc, #140]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_RCC_ClockConfig+0x1ec>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e036      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	4918      	ldr	r1, [pc, #96]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4910      	ldr	r1, [pc, #64]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b0:	f000 f824 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	490b      	ldr	r1, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f4>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1fc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe ff7d 	bl	80007d4 <HAL_InitTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80018de:	7afb      	ldrb	r3, [r7, #11]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	08002560 	.word	0x08002560
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001914:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d121      	bne.n	800196e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d11e      	bne.n	800196e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001930:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800193c:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e005      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800194c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001958:	4a2b      	ldr	r2, [pc, #172]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10d      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d102      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001974:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	e004      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d101      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001982:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d134      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d003      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xac>
 80019a0:	e005      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x110>)
 80019a4:	617b      	str	r3, [r7, #20]
      break;
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x114>)
 80019aa:	617b      	str	r3, [r7, #20]
      break;
 80019ac:	e002      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	617b      	str	r3, [r7, #20]
      break;
 80019b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	fb03 f202 	mul.w	r2, r3, r2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	0e5b      	lsrs	r3, r3, #25
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	3301      	adds	r3, #1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019f4:	69bb      	ldr	r3, [r7, #24]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08002570 	.word	0x08002570
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	007a1200 	.word	0x007a1200

08001a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a20:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a2c:	f7ff fa26 	bl	8000e7c <HAL_PWREx_GetVoltageRange>
 8001a30:	6178      	str	r0, [r7, #20]
 8001a32:	e014      	b.n	8001a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a4c:	f7ff fa16 	bl	8000e7c <HAL_PWREx_GetVoltageRange>
 8001a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a64:	d10b      	bne.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b80      	cmp	r3, #128	@ 0x80
 8001a6a:	d919      	bls.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a70:	d902      	bls.n	8001a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a72:	2302      	movs	r3, #2
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	e013      	b.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e010      	b.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b80      	cmp	r3, #128	@ 0x80
 8001a82:	d902      	bls.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a84:	2303      	movs	r3, #3
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e00a      	b.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b80      	cmp	r3, #128	@ 0x80
 8001a8e:	d102      	bne.n	8001a96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e004      	b.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b70      	cmp	r3, #112	@ 0x70
 8001a9a:	d101      	bne.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 0207 	bic.w	r2, r3, #7
 8001aa8:	4909      	ldr	r1, [pc, #36]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e049      	b.n	8001b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fd6c 	bl	80005d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 fb06 	bl	8002124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d001      	beq.n	8001b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e047      	b.n	8001c2c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <HAL_TIM_Base_Start+0xb4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01d      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb6:	d018      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_TIM_Base_Start+0xb8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_TIM_Base_Start+0xbc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00e      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c44 <HAL_TIM_Base_Start+0xc0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <HAL_TIM_Base_Start+0xc4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d004      	beq.n	8001bea <HAL_TIM_Base_Start+0x66>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_TIM_Base_Start+0xc8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d115      	bne.n	8001c16 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_TIM_Base_Start+0xcc>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d015      	beq.n	8001c28 <HAL_TIM_Base_Start+0xa4>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d011      	beq.n	8001c28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	e008      	b.n	8001c28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e000      	b.n	8001c2a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40012c00 	.word	0x40012c00
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40000800 	.word	0x40000800
 8001c44:	40000c00 	.word	0x40000c00
 8001c48:	40013400 	.word	0x40013400
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	00010007 	.word	0x00010007

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e04f      	b.n	8001d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01d      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c96:	d018      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	@ (8001d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x76>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d115      	bne.n	8001cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d015      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0xb4>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce2:	d011      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf4:	e008      	b.n	8001d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e000      	b.n	8001d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40000800 	.word	0x40000800
 8001d24:	40000c00 	.word	0x40000c00
 8001d28:	40013400 	.word	0x40013400
 8001d2c:	40014000 	.word	0x40014000
 8001d30:	00010007 	.word	0x00010007

08001d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0202 	mvn.w	r2, #2
 8001d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f9b2 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f9a4 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f9b5 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d020      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0204 	mvn.w	r2, #4
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f98c 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f97e 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f98f 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f966 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f958 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f969 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f940 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f932 	bl	80020d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f943 	bl	80020fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe f994 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00c      	beq.n	8001ece <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fafd 	bl	80024c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 faf5 	bl	80024dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8fd 	bl	8002110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0220 	mvn.w	r2, #32
 8001f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fabd 	bl	80024b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_ConfigClockSource+0x1c>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0b6      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x18a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f9a:	d03e      	beq.n	800201a <HAL_TIM_ConfigClockSource+0xd8>
 8001f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa0:	f200 8087 	bhi.w	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fa8:	f000 8086 	beq.w	80020b8 <HAL_TIM_ConfigClockSource+0x176>
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb0:	d87f      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fb2:	2b70      	cmp	r3, #112	@ 0x70
 8001fb4:	d01a      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0xaa>
 8001fb6:	2b70      	cmp	r3, #112	@ 0x70
 8001fb8:	d87b      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fba:	2b60      	cmp	r3, #96	@ 0x60
 8001fbc:	d050      	beq.n	8002060 <HAL_TIM_ConfigClockSource+0x11e>
 8001fbe:	2b60      	cmp	r3, #96	@ 0x60
 8001fc0:	d877      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fc2:	2b50      	cmp	r3, #80	@ 0x50
 8001fc4:	d03c      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0xfe>
 8001fc6:	2b50      	cmp	r3, #80	@ 0x50
 8001fc8:	d873      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fca:	2b40      	cmp	r3, #64	@ 0x40
 8001fcc:	d058      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0x13e>
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d86f      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fd2:	2b30      	cmp	r3, #48	@ 0x30
 8001fd4:	d064      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x15e>
 8001fd6:	2b30      	cmp	r3, #48	@ 0x30
 8001fd8:	d86b      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d060      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x15e>
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d867      	bhi.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d05c      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x15e>
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d05a      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x15e>
 8001fea:	e062      	b.n	80020b2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ffc:	f000 f9b2 	bl	8002364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800200e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	609a      	str	r2, [r3, #8]
      break;
 8002018:	e04f      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800202a:	f000 f99b 	bl	8002364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800203c:	609a      	str	r2, [r3, #8]
      break;
 800203e:	e03c      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800204c:	461a      	mov	r2, r3
 800204e:	f000 f90f 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2150      	movs	r1, #80	@ 0x50
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f968 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800205e:	e02c      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800206c:	461a      	mov	r2, r3
 800206e:	f000 f92e 	bl	80022ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2160      	movs	r1, #96	@ 0x60
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f958 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800207e:	e01c      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800208c:	461a      	mov	r2, r3
 800208e:	f000 f8ef 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2140      	movs	r1, #64	@ 0x40
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f948 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800209e:	e00c      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 f93f 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 80020b0:	e003      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x178>
      break;
 80020b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a46      	ldr	r2, [pc, #280]	@ (8002250 <TIM_Base_SetConfig+0x12c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002142:	d00f      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a43      	ldr	r2, [pc, #268]	@ (8002254 <TIM_Base_SetConfig+0x130>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00b      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a42      	ldr	r2, [pc, #264]	@ (8002258 <TIM_Base_SetConfig+0x134>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a41      	ldr	r2, [pc, #260]	@ (800225c <TIM_Base_SetConfig+0x138>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a40      	ldr	r2, [pc, #256]	@ (8002260 <TIM_Base_SetConfig+0x13c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a35      	ldr	r2, [pc, #212]	@ (8002250 <TIM_Base_SetConfig+0x12c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d01b      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <TIM_Base_SetConfig+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <TIM_Base_SetConfig+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <TIM_Base_SetConfig+0x138>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <TIM_Base_SetConfig+0x13c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002264 <TIM_Base_SetConfig+0x140>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002268 <TIM_Base_SetConfig+0x144>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x9a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2c      	ldr	r2, [pc, #176]	@ (800226c <TIM_Base_SetConfig+0x148>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <TIM_Base_SetConfig+0x12c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00f      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <TIM_Base_SetConfig+0x13c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00b      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <TIM_Base_SetConfig+0x140>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a16      	ldr	r2, [pc, #88]	@ (8002268 <TIM_Base_SetConfig+0x144>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a15      	ldr	r2, [pc, #84]	@ (800226c <TIM_Base_SetConfig+0x148>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f023 0201 	bic.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
  }
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40013400 	.word	0x40013400
 8002264:	40014000 	.word	0x40014000
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800

08002270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800229a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f023 030a 	bic.w	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 0210 	bic.w	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800230a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	f043 0307 	orr.w	r3, r3, #7
 8002350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800237e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	431a      	orrs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e068      	b.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80023f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01d      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800242e:	d018      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1a      	ldr	r2, [pc, #104]	@ (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00e      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a18      	ldr	r2, [pc, #96]	@ (80024ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10c      	bne.n	800247c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40013400 	.word	0x40013400
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40014000 	.word	0x40014000

080024b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <memset>:
 80024f0:	4402      	add	r2, r0
 80024f2:	4603      	mov	r3, r0
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <memset+0xa>
 80024f8:	4770      	bx	lr
 80024fa:	f803 1b01 	strb.w	r1, [r3], #1
 80024fe:	e7f9      	b.n	80024f4 <memset+0x4>

08002500 <__libc_init_array>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	4d0d      	ldr	r5, [pc, #52]	@ (8002538 <__libc_init_array+0x38>)
 8002504:	4c0d      	ldr	r4, [pc, #52]	@ (800253c <__libc_init_array+0x3c>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	2600      	movs	r6, #0
 800250c:	42a6      	cmp	r6, r4
 800250e:	d109      	bne.n	8002524 <__libc_init_array+0x24>
 8002510:	4d0b      	ldr	r5, [pc, #44]	@ (8002540 <__libc_init_array+0x40>)
 8002512:	4c0c      	ldr	r4, [pc, #48]	@ (8002544 <__libc_init_array+0x44>)
 8002514:	f000 f818 	bl	8002548 <_init>
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	2600      	movs	r6, #0
 800251e:	42a6      	cmp	r6, r4
 8002520:	d105      	bne.n	800252e <__libc_init_array+0x2e>
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	f855 3b04 	ldr.w	r3, [r5], #4
 8002528:	4798      	blx	r3
 800252a:	3601      	adds	r6, #1
 800252c:	e7ee      	b.n	800250c <__libc_init_array+0xc>
 800252e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002532:	4798      	blx	r3
 8002534:	3601      	adds	r6, #1
 8002536:	e7f2      	b.n	800251e <__libc_init_array+0x1e>
 8002538:	080025a0 	.word	0x080025a0
 800253c:	080025a0 	.word	0x080025a0
 8002540:	080025a0 	.word	0x080025a0
 8002544:	080025a4 	.word	0x080025a4

08002548 <_init>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr

08002554 <_fini>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	bf00      	nop
 8002558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255a:	bc08      	pop	{r3}
 800255c:	469e      	mov	lr, r3
 800255e:	4770      	bx	lr
