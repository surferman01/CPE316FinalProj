
FinalProjectReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb4  08006cb4  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006cb4  08006cb4  00007cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cbc  08006cbc  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cbc  08006cbc  00007cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006cc4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000014  08006cd8  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08006cd8  00008234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001579e  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003234  00000000  00000000  0001d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00020a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f69  00000000  00000000  00021e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b8b  00000000  00000000  00022d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017774  00000000  00000000  0004a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6317  00000000  00000000  00062068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015837f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  001583c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0015d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bc4 	.word	0x08006bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006bc4 	.word	0x08006bc4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <KeypadClear>:

#include "keypad.h"
#include "timer.h"
#include "main.h"

void KeypadClear() {
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
	int sIndex;

	// Clear all debounced records, Previous, Low2High
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e016      	b.n	800053e <KeypadClear+0x3a>
	{
		sKeyDebouncedCol[sIndex] = 0x0000;
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <KeypadClear+0x50>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2100      	movs	r1, #0
 8000516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sKeyPreviousCol[sIndex] = 0x0000;
 800051a:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <KeypadClear+0x54>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2100      	movs	r1, #0
 8000520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sKeyLow2HighCol[sIndex] = 0x0000;
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <KeypadClear+0x58>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2100      	movs	r1, #0
 800052a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sKeyHigh2LowCol[sIndex] = 0x0000;
 800052e:	4a0c      	ldr	r2, [pc, #48]	@ (8000560 <KeypadClear+0x5c>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2100      	movs	r1, #0
 8000534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b02      	cmp	r3, #2
 8000542:	dde5      	ble.n	8000510 <KeypadClear+0xc>
	}
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000003c 	.word	0x2000003c
 8000558:	20000048 	.word	0x20000048
 800055c:	20000050 	.word	0x20000050
 8000560:	20000058 	.word	0x20000058

08000564 <KeypadScan>:

void KeypadScan()
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	unsigned short Temp;

	// Clear all key records
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800056a:	2300      	movs	r3, #0
 800056c:	80fb      	strh	r3, [r7, #6]
 800056e:	e007      	b.n	8000580 <KeypadScan+0x1c>
	{
		sKeyCurrentCol[sIndex] = 0x00;
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	4aa4      	ldr	r2, [pc, #656]	@ (8000804 <KeypadScan+0x2a0>)
 8000574:	2100      	movs	r1, #0
 8000576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	3301      	adds	r3, #1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d9f4      	bls.n	8000570 <KeypadScan+0xc>
	}

	// Read all 3 column
	for (sIndex=0; sIndex<Number_of_Keys; sIndex++)
 8000586:	2300      	movs	r3, #0
 8000588:	80fb      	strh	r3, [r7, #6]
 800058a:	e0c8      	b.n	800071e <KeypadScan+0x1ba>
	{
		GPIOA->ODR &=~(PA4 | PA1 | PA0);
 800058c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000596:	f023 0313 	bic.w	r3, r3, #19
 800059a:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= sKeyControl[sIndex].sKeySend;
 800059c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a0:	6959      	ldr	r1, [r3, #20]
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	4898      	ldr	r0, [pc, #608]	@ (8000808 <KeypadScan+0x2a4>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	4403      	add	r3, r0
 80005b0:	3304      	adds	r3, #4
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6153      	str	r3, [r2, #20]

		switch (sKeyControl[sIndex].KeyLetter)
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	4992      	ldr	r1, [pc, #584]	@ (8000808 <KeypadScan+0x2a4>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	440b      	add	r3, r1
 80005ca:	3308      	adds	r3, #8
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3b23      	subs	r3, #35	@ 0x23
 80005d0:	2b16      	cmp	r3, #22
 80005d2:	f200 80a1 	bhi.w	8000718 <KeypadScan+0x1b4>
 80005d6:	a201      	add	r2, pc, #4	@ (adr r2, 80005dc <KeypadScan+0x78>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080006cb 	.word	0x080006cb
 80005e0:	08000719 	.word	0x08000719
 80005e4:	08000719 	.word	0x08000719
 80005e8:	08000719 	.word	0x08000719
 80005ec:	08000719 	.word	0x08000719
 80005f0:	08000719 	.word	0x08000719
 80005f4:	08000719 	.word	0x08000719
 80005f8:	080006cb 	.word	0x080006cb
 80005fc:	08000719 	.word	0x08000719
 8000600:	08000719 	.word	0x08000719
 8000604:	08000719 	.word	0x08000719
 8000608:	08000719 	.word	0x08000719
 800060c:	08000719 	.word	0x08000719
 8000610:	080006cb 	.word	0x080006cb
 8000614:	08000639 	.word	0x08000639
 8000618:	08000639 	.word	0x08000639
 800061c:	08000639 	.word	0x08000639
 8000620:	08000683 	.word	0x08000683
 8000624:	08000683 	.word	0x08000683
 8000628:	08000683 	.word	0x08000683
 800062c:	08000683 	.word	0x08000683
 8000630:	08000683 	.word	0x08000683
 8000634:	08000683 	.word	0x08000683
		{
		case '1':
		case '2':
		case '3':
			if (GPIOA->IDR & sKeyControl[sIndex].sKeyRead)
 8000638:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800063c:	6919      	ldr	r1, [r3, #16]
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	4871      	ldr	r0, [pc, #452]	@ (8000808 <KeypadScan+0x2a4>)
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4403      	add	r3, r0
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	400b      	ands	r3, r1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d05e      	beq.n	8000712 <KeypadScan+0x1ae>
				sKeyCurrentCol[sKeyControl[sIndex].sKeyCol]= sKeyControl[sIndex].sKeyReadTempPos;
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	88f9      	ldrh	r1, [r7, #6]
 8000658:	486b      	ldr	r0, [pc, #428]	@ (8000808 <KeypadScan+0x2a4>)
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4403      	add	r3, r0
 8000664:	3306      	adds	r3, #6
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	4967      	ldr	r1, [pc, #412]	@ (8000808 <KeypadScan+0x2a4>)
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	440b      	add	r3, r1
 8000676:	3302      	adds	r3, #2
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	4b62      	ldr	r3, [pc, #392]	@ (8000804 <KeypadScan+0x2a0>)
 800067c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			break;
 8000680:	e047      	b.n	8000712 <KeypadScan+0x1ae>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			if (GPIOC->IDR & sKeyControl[sIndex].sKeyRead)
 8000682:	4b62      	ldr	r3, [pc, #392]	@ (800080c <KeypadScan+0x2a8>)
 8000684:	6919      	ldr	r1, [r3, #16]
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	485f      	ldr	r0, [pc, #380]	@ (8000808 <KeypadScan+0x2a4>)
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4403      	add	r3, r0
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	400b      	ands	r3, r1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d03c      	beq.n	8000716 <KeypadScan+0x1b2>
				sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	88f9      	ldrh	r1, [r7, #6]
 80006a0:	4859      	ldr	r0, [pc, #356]	@ (8000808 <KeypadScan+0x2a4>)
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4403      	add	r3, r0
 80006ac:	3306      	adds	r3, #6
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	4955      	ldr	r1, [pc, #340]	@ (8000808 <KeypadScan+0x2a4>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	440b      	add	r3, r1
 80006be:	3302      	adds	r3, #2
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	4b50      	ldr	r3, [pc, #320]	@ (8000804 <KeypadScan+0x2a0>)
 80006c4:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
			break;
 80006c8:	e025      	b.n	8000716 <KeypadScan+0x1b2>

		case '*':
		case '0':
		case '#':
			if (GPIOB->IDR & sKeyControl[sIndex].sKeyRead)
 80006ca:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <KeypadScan+0x2ac>)
 80006cc:	6919      	ldr	r1, [r3, #16]
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	484d      	ldr	r0, [pc, #308]	@ (8000808 <KeypadScan+0x2a4>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4403      	add	r3, r0
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	400b      	ands	r3, r1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d019      	beq.n	8000718 <KeypadScan+0x1b4>
				sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 80006e4:	88fa      	ldrh	r2, [r7, #6]
 80006e6:	88f9      	ldrh	r1, [r7, #6]
 80006e8:	4847      	ldr	r0, [pc, #284]	@ (8000808 <KeypadScan+0x2a4>)
 80006ea:	460b      	mov	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	440b      	add	r3, r1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4403      	add	r3, r0
 80006f4:	3306      	adds	r3, #6
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	4943      	ldr	r1, [pc, #268]	@ (8000808 <KeypadScan+0x2a4>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	440b      	add	r3, r1
 8000706:	3302      	adds	r3, #2
 8000708:	881a      	ldrh	r2, [r3, #0]
 800070a:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <KeypadScan+0x2a0>)
 800070c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000710:	e002      	b.n	8000718 <KeypadScan+0x1b4>
			break;
 8000712:	bf00      	nop
 8000714:	e000      	b.n	8000718 <KeypadScan+0x1b4>
			break;
 8000716:	bf00      	nop
	for (sIndex=0; sIndex<Number_of_Keys; sIndex++)
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	3301      	adds	r3, #1
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2b0b      	cmp	r3, #11
 8000722:	f67f af33 	bls.w	800058c <KeypadScan+0x28>
		}
	}

	// Check if a key is steadily read
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000726:	2300      	movs	r3, #0
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	e038      	b.n	800079e <KeypadScan+0x23a>
	{
		if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) && (sKeyCurrentCol[sIndex] != 0x0000))
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4a35      	ldr	r2, [pc, #212]	@ (8000804 <KeypadScan+0x2a0>)
 8000730:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4937      	ldr	r1, [pc, #220]	@ (8000814 <KeypadScan+0x2b0>)
 8000738:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800073c:	429a      	cmp	r2, r3
 800073e:	d10d      	bne.n	800075c <KeypadScan+0x1f8>
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	4a30      	ldr	r2, [pc, #192]	@ (8000804 <KeypadScan+0x2a0>)
 8000744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <KeypadScan+0x1f8>
		{
			sKeyStatus |= KeyIsOn;
 800074c:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <KeypadScan+0x2b4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <KeypadScan+0x2b4>)
 8000758:	801a      	strh	r2, [r3, #0]
			break;
 800075a:	e023      	b.n	80007a4 <KeypadScan+0x240>
		}

		if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) && (sKeyCurrentCol[sIndex] == 0x0000) && (sKeyPreviousCol[sIndex]!= 0x0000))
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <KeypadScan+0x2a0>)
 8000760:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	492b      	ldr	r1, [pc, #172]	@ (8000814 <KeypadScan+0x2b0>)
 8000768:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800076c:	429a      	cmp	r2, r3
 800076e:	d113      	bne.n	8000798 <KeypadScan+0x234>
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <KeypadScan+0x2a0>)
 8000774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10d      	bne.n	8000798 <KeypadScan+0x234>
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	4a27      	ldr	r2, [pc, #156]	@ (800081c <KeypadScan+0x2b8>)
 8000780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <KeypadScan+0x234>
		{
			sKeyStatus |= KeyIsOff;
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <KeypadScan+0x2b4>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <KeypadScan+0x2b4>)
 8000794:	801a      	strh	r2, [r3, #0]
			break;
 8000796:	e005      	b.n	80007a4 <KeypadScan+0x240>
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	3301      	adds	r3, #1
 800079c:	80fb      	strh	r3, [r7, #6]
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d9c3      	bls.n	800072c <KeypadScan+0x1c8>
		}

	}

	if (sIndex <Number_of_Cols)
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	f200 80ed 	bhi.w	8000986 <KeypadScan+0x422>
	{
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	80fb      	strh	r3, [r7, #6]
 80007b0:	e022      	b.n	80007f8 <KeypadScan+0x294>
		{
			Temp = sKeyCurrentCol[sIndex] ^ sKeyPreviousCol[sIndex];
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <KeypadScan+0x2a0>)
 80007b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	4917      	ldr	r1, [pc, #92]	@ (800081c <KeypadScan+0x2b8>)
 80007be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007c2:	4053      	eors	r3, r2
 80007c4:	80bb      	strh	r3, [r7, #4]
			sKeyLow2HighCol[sIndex] = (sKeyCurrentCol[sIndex] & Temp);
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <KeypadScan+0x2a0>)
 80007ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	88ba      	ldrh	r2, [r7, #4]
 80007d2:	400a      	ands	r2, r1
 80007d4:	b291      	uxth	r1, r2
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <KeypadScan+0x2bc>)
 80007d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sKeyHigh2LowCol[sIndex] = (sKeyPreviousCol[sIndex] & Temp);
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <KeypadScan+0x2b8>)
 80007e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	400a      	ands	r2, r1
 80007ea:	b291      	uxth	r1, r2
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <KeypadScan+0x2c0>)
 80007ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	3301      	adds	r3, #1
 80007f6:	80fb      	strh	r3, [r7, #6]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d9d9      	bls.n	80007b2 <KeypadScan+0x24e>

		}

		// Find which key is JUST depressed (Low To High) or KeyRepeat detected
		for (sIndex=0 ; sIndex<Number_of_Keys; sIndex++)
 80007fe:	2300      	movs	r3, #0
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	e0bb      	b.n	800097c <KeypadScan+0x418>
 8000804:	20000034 	.word	0x20000034
 8000808:	08006bf4 	.word	0x08006bf4
 800080c:	48000800 	.word	0x48000800
 8000810:	48000400 	.word	0x48000400
 8000814:	2000003c 	.word	0x2000003c
 8000818:	20000030 	.word	0x20000030
 800081c:	20000048 	.word	0x20000048
 8000820:	20000050 	.word	0x20000050
 8000824:	20000058 	.word	0x20000058
		{
			if (sKeyStatus & KeyIsOn)
 8000828:	4b7a      	ldr	r3, [pc, #488]	@ (8000a14 <KeypadScan+0x4b0>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d068      	beq.n	8000906 <KeypadScan+0x3a2>
			{
				if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] & sKeyControl[sIndex].sKeyReadTempPos)
 8000834:	88fa      	ldrh	r2, [r7, #6]
 8000836:	4978      	ldr	r1, [pc, #480]	@ (8000a18 <KeypadScan+0x4b4>)
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	440b      	add	r3, r1
 8000842:	3306      	adds	r3, #6
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b74      	ldr	r3, [pc, #464]	@ (8000a1c <KeypadScan+0x4b8>)
 800084a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	4871      	ldr	r0, [pc, #452]	@ (8000a18 <KeypadScan+0x4b4>)
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4403      	add	r3, r0
 800085c:	3302      	adds	r3, #2
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	400b      	ands	r3, r1
 8000862:	b29b      	uxth	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <KeypadScan+0x348>
				{
					sKeyIssued = sKeyControl[sIndex].KeyLetter;
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	496b      	ldr	r1, [pc, #428]	@ (8000a18 <KeypadScan+0x4b4>)
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	440b      	add	r3, r1
 8000876:	3308      	adds	r3, #8
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b68      	ldr	r3, [pc, #416]	@ (8000a20 <KeypadScan+0x4bc>)
 800087e:	801a      	strh	r2, [r3, #0]
					sKeyStatus |= (KeyDetect | KeyLow2High);
 8000880:	4b64      	ldr	r3, [pc, #400]	@ (8000a14 <KeypadScan+0x4b0>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	f043 0303 	orr.w	r3, r3, #3
 8000888:	b29a      	uxth	r2, r3
 800088a:	4b62      	ldr	r3, [pc, #392]	@ (8000a14 <KeypadScan+0x4b0>)
 800088c:	801a      	strh	r2, [r3, #0]
					sTimer[KEY_WAIT_REPEAT_TIMER] = KEY_WAIT_REPEAT_TIME;
 800088e:	4b65      	ldr	r3, [pc, #404]	@ (8000a24 <KeypadScan+0x4c0>)
 8000890:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000894:	809a      	strh	r2, [r3, #4]
					sKeyStatus |= KeyRepeat;		// a new key comes in, set the repeat flag
 8000896:	4b5f      	ldr	r3, [pc, #380]	@ (8000a14 <KeypadScan+0x4b0>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a14 <KeypadScan+0x4b0>)
 80008a2:	801a      	strh	r2, [r3, #0]
					sIndexCopy = sIndex;			// save a copy of sIndex for push & held use
 80008a4:	4a60      	ldr	r2, [pc, #384]	@ (8000a28 <KeypadScan+0x4c4>)
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	8013      	strh	r3, [r2, #0]
					break;
 80008aa:	e076      	b.n	800099a <KeypadScan+0x436>
				}
				else if ((sKeyStatus & KeyRepeat) && (sTimer[KEY_WAIT_REPEAT_TIMER]==0))
 80008ac:	4b59      	ldr	r3, [pc, #356]	@ (8000a14 <KeypadScan+0x4b0>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d021      	beq.n	80008fc <KeypadScan+0x398>
 80008b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a24 <KeypadScan+0x4c0>)
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11d      	bne.n	80008fc <KeypadScan+0x398>
				{
					if (sTimer[KEY_REPEAT_TIMER] == 0)
 80008c0:	4b58      	ldr	r3, [pc, #352]	@ (8000a24 <KeypadScan+0x4c0>)
 80008c2:	885b      	ldrh	r3, [r3, #2]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d156      	bne.n	8000976 <KeypadScan+0x412>
					{
						sKeyIssued = sKeyControl[sIndexCopy].KeyLetter;
 80008c8:	4b57      	ldr	r3, [pc, #348]	@ (8000a28 <KeypadScan+0x4c4>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4a52      	ldr	r2, [pc, #328]	@ (8000a18 <KeypadScan+0x4b4>)
 80008d0:	460b      	mov	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	3308      	adds	r3, #8
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4b4f      	ldr	r3, [pc, #316]	@ (8000a20 <KeypadScan+0x4bc>)
 80008e2:	801a      	strh	r2, [r3, #0]
						sKeyStatus |= (KeyDetect | KeyToBeRepeated);
 80008e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <KeypadScan+0x4b0>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <KeypadScan+0x4b0>)
 80008f0:	801a      	strh	r2, [r3, #0]
						sTimer[KEY_REPEAT_TIMER] = KEY_REPEAT_TIME;
 80008f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a24 <KeypadScan+0x4c0>)
 80008f4:	f240 124d 	movw	r2, #333	@ 0x14d
 80008f8:	805a      	strh	r2, [r3, #2]
					if (sTimer[KEY_REPEAT_TIMER] == 0)
 80008fa:	e03c      	b.n	8000976 <KeypadScan+0x412>
					}
				}
				else
					sKeyIssued = 0xFFFF;
 80008fc:	4b48      	ldr	r3, [pc, #288]	@ (8000a20 <KeypadScan+0x4bc>)
 80008fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000902:	801a      	strh	r2, [r3, #0]
 8000904:	e037      	b.n	8000976 <KeypadScan+0x412>
			}
			else if (sKeyStatus & KeyIsOff)
 8000906:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <KeypadScan+0x4b0>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	2b00      	cmp	r3, #0
 8000910:	d031      	beq.n	8000976 <KeypadScan+0x412>
			{
				if (sKeyHigh2LowCol[sKeyControl[sIndex].sKeyCol] & sKeyControl[sIndex].sKeyReadTempPos)
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	4940      	ldr	r1, [pc, #256]	@ (8000a18 <KeypadScan+0x4b4>)
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	440b      	add	r3, r1
 8000920:	3306      	adds	r3, #6
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b41      	ldr	r3, [pc, #260]	@ (8000a2c <KeypadScan+0x4c8>)
 8000928:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800092c:	88fa      	ldrh	r2, [r7, #6]
 800092e:	483a      	ldr	r0, [pc, #232]	@ (8000a18 <KeypadScan+0x4b4>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4403      	add	r3, r0
 800093a:	3302      	adds	r3, #2
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	400b      	ands	r3, r1
 8000940:	b29b      	uxth	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d013      	beq.n	800096e <KeypadScan+0x40a>
				{
					sKeyReleased = sKeyControl[sIndex].KeyLetter;
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4933      	ldr	r1, [pc, #204]	@ (8000a18 <KeypadScan+0x4b4>)
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	440b      	add	r3, r1
 8000954:	3308      	adds	r3, #8
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <KeypadScan+0x4cc>)
 800095c:	801a      	strh	r2, [r3, #0]
					sKeyStatus |= (KeyDetect | KeyHigh2Low);
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <KeypadScan+0x4b0>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	f043 0305 	orr.w	r3, r3, #5
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <KeypadScan+0x4b0>)
 800096a:	801a      	strh	r2, [r3, #0]
					break;
 800096c:	e015      	b.n	800099a <KeypadScan+0x436>
				}
				else
					sKeyReleased = 0xFFFF;
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <KeypadScan+0x4cc>)
 8000970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000974:	801a      	strh	r2, [r3, #0]
		for (sIndex=0 ; sIndex<Number_of_Keys; sIndex++)
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	3301      	adds	r3, #1
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	2b0b      	cmp	r3, #11
 8000980:	f67f af52 	bls.w	8000828 <KeypadScan+0x2c4>
 8000984:	e009      	b.n	800099a <KeypadScan+0x436>

		}
	}
	else
	{
		sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyHigh2Low | KeyIsOn | KeyIsOff | KeyToBeRepeated | KeyRepeat);
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <KeypadScan+0x4b0>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <KeypadScan+0x4b0>)
 8000992:	801a      	strh	r2, [r3, #0]
		sTimer[KEY_REPEAT_TIMER] = 0;  // Reset repeat timer if no key
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <KeypadScan+0x4c0>)
 8000996:	2200      	movs	r2, #0
 8000998:	805a      	strh	r2, [r3, #2]

	}

	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800099a:	2300      	movs	r3, #0
 800099c:	80fb      	strh	r3, [r7, #6]
 800099e:	e014      	b.n	80009ca <KeypadScan+0x466>
	{
		if (sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex])
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	4a24      	ldr	r2, [pc, #144]	@ (8000a34 <KeypadScan+0x4d0>)
 80009a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	4923      	ldr	r1, [pc, #140]	@ (8000a38 <KeypadScan+0x4d4>)
 80009ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d107      	bne.n	80009c4 <KeypadScan+0x460>
		{
			// Update Previous records
			sKeyPreviousCol[sIndex] = sKeyCurrentCol[sIndex];
 80009b4:	88fa      	ldrh	r2, [r7, #6]
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	491e      	ldr	r1, [pc, #120]	@ (8000a34 <KeypadScan+0x4d0>)
 80009ba:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <KeypadScan+0x4d8>)
 80009c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	3301      	adds	r3, #1
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d9e7      	bls.n	80009a0 <KeypadScan+0x43c>
		}
	}


	// Transfer Current reading to debounced reading
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	80fb      	strh	r3, [r7, #6]
 80009d4:	e014      	b.n	8000a00 <KeypadScan+0x49c>
	{
		sKeyDebouncedCol[sIndex] = sKeyCurrentCol[sIndex];
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4916      	ldr	r1, [pc, #88]	@ (8000a34 <KeypadScan+0x4d0>)
 80009dc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80009e0:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <KeypadScan+0x4d4>)
 80009e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sKeyLow2HighCol[sIndex] = 0;
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <KeypadScan+0x4b8>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sKeyHigh2LowCol[sIndex] = 0;
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <KeypadScan+0x4c8>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	3301      	adds	r3, #1
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d9e7      	bls.n	80009d6 <KeypadScan+0x472>
	}
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000030 	.word	0x20000030
 8000a18:	08006bf4 	.word	0x08006bf4
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	20000042 	.word	0x20000042
 8000a24:	20000218 	.word	0x20000218
 8000a28:	20000046 	.word	0x20000046
 8000a2c:	20000058 	.word	0x20000058
 8000a30:	20000044 	.word	0x20000044
 8000a34:	20000034 	.word	0x20000034
 8000a38:	2000003c 	.word	0x2000003c
 8000a3c:	20000048 	.word	0x20000048

08000a40 <KeyProcess>:


void KeyProcess(void (*keyPressedCallback)(char key), void (*keyRepeatedCallback)(char key), void (*keyReleasedCallback)(char key))
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	uint16_t sIndex;

	if ((sKeyStatus & KeyDetect) && (sKeyIssued != 0xFF))
 8000a4c:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <KeyProcess+0xb0>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d047      	beq.n	8000ae8 <KeyProcess+0xa8>
 8000a58:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <KeyProcess+0xb4>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2bff      	cmp	r3, #255	@ 0xff
 8000a5e:	d043      	beq.n	8000ae8 <KeyProcess+0xa8>
	{

		if (keyPressedCallback && sKeyStatus & KeyLow2High) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00c      	beq.n	8000a80 <KeyProcess+0x40>
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <KeyProcess+0xb0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <KeyProcess+0x40>
			keyPressedCallback(sKeyIssued);
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <KeyProcess+0xb4>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4798      	blx	r3
 8000a7e:	e01e      	b.n	8000abe <KeyProcess+0x7e>
		} else if (keyRepeatedCallback && sKeyStatus & KeyToBeRepeated) {
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00c      	beq.n	8000aa0 <KeyProcess+0x60>
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <KeyProcess+0xb0>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <KeyProcess+0x60>
			keyRepeatedCallback(sKeyIssued);
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <KeyProcess+0xb4>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4798      	blx	r3
 8000a9e:	e00e      	b.n	8000abe <KeyProcess+0x7e>
		} else if (keyReleasedCallback && sKeyStatus & KeyHigh2Low) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00b      	beq.n	8000abe <KeyProcess+0x7e>
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <KeyProcess+0xb0>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d005      	beq.n	8000abe <KeyProcess+0x7e>
			keyReleasedCallback(sKeyIssued);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <KeyProcess+0xb4>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4610      	mov	r0, r2
 8000abc:	4798      	blx	r3
		}


		sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyToBeRepeated);
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <KeyProcess+0xb0>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f023 0343 	bic.w	r3, r3, #67	@ 0x43
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <KeyProcess+0xb0>)
 8000aca:	801a      	strh	r2, [r3, #0]

		// Clear all Low-2-High and High-2-Low records
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	82fb      	strh	r3, [r7, #22]
 8000ad0:	e007      	b.n	8000ae2 <KeyProcess+0xa2>
			sKeyLow2HighCol[sIndex] = 0x0000;
 8000ad2:	8afb      	ldrh	r3, [r7, #22]
 8000ad4:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <KeyProcess+0xb8>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	82fb      	strh	r3, [r7, #22]
 8000ae2:	8afb      	ldrh	r3, [r7, #22]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d9f4      	bls.n	8000ad2 <KeyProcess+0x92>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000030 	.word	0x20000030
 8000af4:	20000042 	.word	0x20000042
 8000af8:	20000050 	.word	0x20000050

08000afc <HAL_GPIO_EXTI_Callback>:
static void MX_USART2_UART_Init(void);

#define Timer_Running 0x01

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	Receiver_irq(GPIO_Pin);
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fd55 	bl	80015b8 <Receiver_irq>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	UART_irq();
 8000b1e:	f001 f85d 	bl	8001bdc <UART_irq>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	Timer_handle();
 8000b32:	f000 ffe5 	bl	8001b00 <Timer_handle>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <main>:
	0x00,
	0x00
};

int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	HAL_Init();
 8000b44:	f001 f8b9 	bl	8001cba <HAL_Init>

	SystemClock_Config();
 8000b48:	f000 f842 	bl	8000bd0 <SystemClock_Config>

	MX_GPIO_Init();
 8000b4c:	f000 f99e 	bl	8000e8c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000b50:	f000 f8ce 	bl	8000cf0 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000b54:	f000 f91a 	bl	8000d8c <MX_TIM5_Init>
	MX_SPI1_Init();
 8000b58:	f000 f88c 	bl	8000c74 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000b5c:	f000 f966 	bl	8000e2c <MX_USART2_UART_Init>

	// timer setup
	HAL_TIM_Base_Start_IT(&htim2);
 8000b60:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <main+0x70>)
 8000b62:	f003 ffb9 	bl	8004ad8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <main+0x74>)
 8000b68:	f003 ff4e 	bl	8004a08 <HAL_TIM_Base_Start>
	Timer_set_us_upcounter(&htim5);
 8000b6c:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <main+0x74>)
 8000b6e:	f000 ffeb 	bl	8001b48 <Timer_set_us_upcounter>

	// radio setup
	Receiver_setup(&hspi1);
 8000b72:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <main+0x78>)
 8000b74:	f000 fd0c 	bl	8001590 <Receiver_setup>

	// uart setup
	UART_setup(&huart2);
 8000b78:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <main+0x7c>)
 8000b7a:	f001 f811 	bl	8001ba0 <UART_setup>

	// keypad setup
	KeypadClear();
 8000b7e:	f7ff fcc1 	bl	8000504 <KeypadClear>
	sTimer[KEY_SCAN_TIMER] = KEY_SCAN_TIME;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <main+0x80>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	801a      	strh	r2, [r3, #0]

	HAL_Delay(2000);
 8000b88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b8c:	f001 f90a 	bl	8001da4 <HAL_Delay>
	ShiftReg_shift_in_data(test_data, 7);
 8000b90:	2107      	movs	r1, #7
 8000b92:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <main+0x84>)
 8000b94:	f000 fd50 	bl	8001638 <ShiftReg_shift_in_data>
	ShiftReg_output_enable();
 8000b98:	f000 fd44 	bl	8001624 <ShiftReg_output_enable>
	while (1)
	{
//		HAL_refresh(&hal);

		// callback processing
		Receiver_process(&Shotclock_Radio_recv_callback);
 8000b9c:	480a      	ldr	r0, [pc, #40]	@ (8000bc8 <main+0x88>)
 8000b9e:	f000 fd2b 	bl	80015f8 <Receiver_process>
		UART_process(&Shotclock_UART_recv_callback);
 8000ba2:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <main+0x8c>)
 8000ba4:	f001 f826 	bl	8001bf4 <UART_process>

		// main processing
		Shotclock_process();
 8000ba8:	f000 fe36 	bl	8001818 <Shotclock_process>
		Receiver_process(&Shotclock_Radio_recv_callback);
 8000bac:	bf00      	nop
 8000bae:	e7f5      	b.n	8000b9c <main+0x5c>
 8000bb0:	200000c4 	.word	0x200000c4
 8000bb4:	20000110 	.word	0x20000110
 8000bb8:	20000060 	.word	0x20000060
 8000bbc:	2000015c 	.word	0x2000015c
 8000bc0:	20000218 	.word	0x20000218
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	080017dd 	.word	0x080017dd
 8000bcc:	080017a1 	.word	0x080017a1

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b096      	sub	sp, #88	@ 0x58
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2244      	movs	r2, #68	@ 0x44
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 ffb2 	bl	8006b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bf6:	f001 fc71 	bl	80024dc <HAL_PWREx_ControlVoltageScaling>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c00:	f000 fa0a 	bl	8001018 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fca8 	bl	8002588 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c3e:	f000 f9eb 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2303      	movs	r3, #3
 8000c48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 f870 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c66:	f000 f9d7 	bl	8001018 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3758      	adds	r7, #88	@ 0x58
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_SPI1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000caa:	2228      	movs	r2, #40	@ 0x28
 8000cac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_SPI1_Init+0x74>)
 8000cd4:	f002 ff14 	bl	8003b00 <HAL_SPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 f99b 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000060 	.word	0x20000060
 8000cec:	40013000 	.word	0x40013000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d18:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d20:	2210      	movs	r2, #16
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d26:	2213      	movs	r2, #19
 8000d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d3a:	f003 fe0d 	bl	8004958 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 f968 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d56:	f004 f836 	bl	8004dc6 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d60:	f000 f95a 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_TIM2_Init+0x98>)
 8000d72:	f004 fa59 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d7c:	f000 f94c 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000c4 	.word	0x200000c4

08000d8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <MX_TIM5_Init+0x9c>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000db2:	224f      	movs	r2, #79	@ 0x4f
 8000db4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dd2:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000dd4:	f003 fdc0 	bl	8004958 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000dde:	f000 f91b 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000df0:	f003 ffe9 	bl	8004dc6 <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000dfa:	f000 f90d 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_TIM5_Init+0x98>)
 8000e0c:	f004 fa0c 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000e16:	f000 f8ff 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000110 	.word	0x20000110
 8000e28:	40000c00 	.word	0x40000c00

08000e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <MX_USART2_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e70:	f004 fa80 	bl	8005374 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 f8cd 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000015c 	.word	0x2000015c
 8000e88:	40004400 	.word	0x40004400

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a59      	ldr	r2, [pc, #356]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <MX_GPIO_Init+0x180>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b54      	ldr	r3, [pc, #336]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a53      	ldr	r2, [pc, #332]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b51      	ldr	r3, [pc, #324]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b4b      	ldr	r3, [pc, #300]	@ (800100c <MX_GPIO_Init+0x180>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2113      	movs	r1, #19
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef2:	f001 fab5 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efc:	4844      	ldr	r0, [pc, #272]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000efe:	f001 faaf 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	4843      	ldr	r0, [pc, #268]	@ (8001014 <MX_GPIO_Init+0x188>)
 8000f08:	f001 faaa 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000f12:	483f      	ldr	r0, [pc, #252]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000f14:	f001 faa4 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	483a      	ldr	r0, [pc, #232]	@ (8001014 <MX_GPIO_Init+0x188>)
 8000f2c:	f001 f8ee 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000f30:	2313      	movs	r3, #19
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f001 f8df 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	482b      	ldr	r0, [pc, #172]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000f62:	f001 f8d3 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4824      	ldr	r0, [pc, #144]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000f80:	f001 f8c4 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481e      	ldr	r0, [pc, #120]	@ (8001014 <MX_GPIO_Init+0x188>)
 8000f9c:	f001 f8b6 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb8:	f001 f8a8 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_Pin nG_Pin SRCK_Pin SIN_Pin */
  GPIO_InitStruct.Pin = RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin;
 8000fbc:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fc2:	2311      	movs	r3, #17
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000fd6:	f001 f899 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000fda:	2340      	movs	r3, #64	@ 0x40
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4808      	ldr	r0, [pc, #32]	@ (8001010 <MX_GPIO_Init+0x184>)
 8000ff0:	f001 f88c 	bl	800210c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2017      	movs	r0, #23
 8000ffa:	f000 ffd2 	bl	8001fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ffe:	2017      	movs	r0, #23
 8001000:	f000 ffeb 	bl	8001fda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <Radio_rx_init>:
static void reuse_last_tx_payload(void);

/* exposed functions */

void Radio_rx_init(channel MHz, air_data_rate bps, SPI_HandleTypeDef *hspi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	603a      	str	r2, [r7, #0]
 800102e:	80fb      	strh	r3, [r7, #6]
 8001030:	460b      	mov	r3, r1
 8001032:	717b      	strb	r3, [r7, #5]
	spi_handle = hspi;
 8001034:	4a15      	ldr	r2, [pc, #84]	@ (800108c <Radio_rx_init+0x68>)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	6013      	str	r3, [r2, #0]

    Radio_reset();
 800103a:	f000 f836 	bl	80010aa <Radio_reset>

    Radio_prx_mode();
 800103e:	f000 f888 	bl	8001152 <Radio_prx_mode>
    Radio_power_up();
 8001042:	f000 f931 	bl	80012a8 <Radio_power_up>
    HAL_Delay(2);
 8001046:	2002      	movs	r0, #2
 8001048:	f000 feac 	bl	8001da4 <HAL_Delay>


    Radio_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 800104c:	2020      	movs	r0, #32
 800104e:	f000 f909 	bl	8001264 <Radio_rx_set_payload_widths>

    Radio_set_rf_channel(MHz);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f9b9 	bl	80013cc <Radio_set_rf_channel>
    Radio_set_rf_air_data_rate(bps);
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9e6 	bl	800142e <Radio_set_rf_air_data_rate>
    Radio_set_rf_tx_output_power(_0dBm);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f9c5 	bl	80013f2 <Radio_set_rf_tx_output_power>

    Radio_set_crc_length(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 f932 	bl	80012d2 <Radio_set_crc_length>
    Radio_set_address_widths(5);
 800106e:	2005      	movs	r0, #5
 8001070:	f000 f952 	bl	8001318 <Radio_set_address_widths>

    Radio_auto_retransmit_count(15);
 8001074:	200f      	movs	r0, #15
 8001076:	f000 f95f 	bl	8001338 <Radio_auto_retransmit_count>
    Radio_auto_retransmit_delay(NRF24L01P_RETRANSMIT_DELAY_US);
 800107a:	20fa      	movs	r0, #250	@ 0xfa
 800107c:	f000 f97e 	bl	800137c <Radio_auto_retransmit_delay>

    ce_high();
 8001080:	f000 fa16 	bl	80014b0 <ce_high>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001e4 	.word	0x200001e4

08001090 <Radio_rx_receive>:

    ce_high();
}

void Radio_rx_receive(uint8_t* rx_payload)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    Radio_read_rx_fifo(rx_payload);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f86f 	bl	800117c <Radio_read_rx_fifo>
    Radio_clear_rx_dr();
 800109e:	f000 f8ef 	bl	8001280 <Radio_clear_rx_dr>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <Radio_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void Radio_reset()
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80010ae:	f000 f9e7 	bl	8001480 <cs_high>
    ce_low();
 80010b2:	f000 fa09 	bl	80014c8 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80010b6:	2108      	movs	r1, #8
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fa39 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80010be:	213f      	movs	r1, #63	@ 0x3f
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 fa35 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80010c6:	2103      	movs	r1, #3
 80010c8:	2002      	movs	r0, #2
 80010ca:	f000 fa31 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80010ce:	2103      	movs	r1, #3
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fa2d 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2004      	movs	r0, #4
 80010da:	f000 fa29 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80010de:	2102      	movs	r1, #2
 80010e0:	2005      	movs	r0, #5
 80010e2:	f000 fa25 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80010e6:	2107      	movs	r1, #7
 80010e8:	2006      	movs	r0, #6
 80010ea:	f000 fa21 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80010ee:	217e      	movs	r1, #126	@ 0x7e
 80010f0:	2007      	movs	r0, #7
 80010f2:	f000 fa1d 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2011      	movs	r0, #17
 80010fa:	f000 fa19 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80010fe:	2100      	movs	r1, #0
 8001100:	2011      	movs	r0, #17
 8001102:	f000 fa15 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8001106:	2100      	movs	r1, #0
 8001108:	2012      	movs	r0, #18
 800110a:	f000 fa11 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800110e:	2100      	movs	r1, #0
 8001110:	2013      	movs	r0, #19
 8001112:	f000 fa0d 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8001116:	2100      	movs	r1, #0
 8001118:	2014      	movs	r0, #20
 800111a:	f000 fa09 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800111e:	2100      	movs	r1, #0
 8001120:	2015      	movs	r0, #21
 8001122:	f000 fa05 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8001126:	2100      	movs	r1, #0
 8001128:	2016      	movs	r0, #22
 800112a:	f000 fa01 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800112e:	2111      	movs	r1, #17
 8001130:	2017      	movs	r0, #23
 8001132:	f000 f9fd 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	201c      	movs	r0, #28
 800113a:	f000 f9f9 	bl	8001530 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800113e:	2100      	movs	r1, #0
 8001140:	201d      	movs	r0, #29
 8001142:	f000 f9f5 	bl	8001530 <write_register>

    // Reset FIFO
    Radio_flush_rx_fifo();
 8001146:	f000 f83f 	bl	80011c8 <Radio_flush_rx_fifo>
    Radio_flush_tx_fifo();
 800114a:	f000 f857 	bl	80011fc <Radio_flush_tx_fifo>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <Radio_prx_mode>:

void Radio_prx_mode()
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001158:	2000      	movs	r0, #0
 800115a:	f000 f9c1 	bl	80014e0 <read_register>
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4619      	mov	r1, r3
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f9de 	bl	8001530 <write_register>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Radio_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t Radio_read_rx_fifo(uint8_t* rx_payload)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8001184:	2361      	movs	r3, #97	@ 0x61
 8001186:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001188:	f000 f986 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <Radio_read_rx_fifo+0x48>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 020e 	add.w	r2, r7, #14
 8001194:	f107 010f 	add.w	r1, r7, #15
 8001198:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	f002 ffff 	bl	80041a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <Radio_read_rx_fifo+0x48>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011ac:	2220      	movs	r2, #32
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f002 febf 	bl	8003f32 <HAL_SPI_Receive>
    cs_high();
 80011b4:	f000 f964 	bl	8001480 <cs_high>

    return status;
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200001e4 	.word	0x200001e4

080011c8 <Radio_flush_rx_fifo>:

    return status;
}

void Radio_flush_rx_fifo()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80011ce:	23e2      	movs	r3, #226	@ 0xe2
 80011d0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80011d2:	f000 f961 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <Radio_flush_rx_fifo+0x30>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	1dba      	adds	r2, r7, #6
 80011dc:	1df9      	adds	r1, r7, #7
 80011de:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	f002 ffdc 	bl	80041a2 <HAL_SPI_TransmitReceive>
    cs_high();
 80011ea:	f000 f949 	bl	8001480 <cs_high>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001e4 	.word	0x200001e4

080011fc <Radio_flush_tx_fifo>:

void Radio_flush_tx_fifo()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8001202:	23e1      	movs	r3, #225	@ 0xe1
 8001204:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001206:	f000 f947 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Radio_flush_tx_fifo+0x30>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	1dba      	adds	r2, r7, #6
 8001210:	1df9      	adds	r1, r7, #7
 8001212:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	f002 ffc2 	bl	80041a2 <HAL_SPI_TransmitReceive>
    cs_high();
 800121e:	f000 f92f 	bl	8001480 <cs_high>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001e4 	.word	0x200001e4

08001230 <Radio_get_status>:

uint8_t Radio_get_status()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8001236:	23ff      	movs	r3, #255	@ 0xff
 8001238:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800123a:	f000 f92d 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <Radio_get_status+0x30>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	1dba      	adds	r2, r7, #6
 8001244:	1df9      	adds	r1, r7, #7
 8001246:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	f002 ffa8 	bl	80041a2 <HAL_SPI_TransmitReceive>
    cs_high();
 8001252:	f000 f915 	bl	8001480 <cs_high>

    return status;
 8001256:	79bb      	ldrb	r3, [r7, #6]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001e4 	.word	0x200001e4

08001264 <Radio_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void Radio_rx_set_payload_widths(widths bytes)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4619      	mov	r1, r3
 8001272:	2011      	movs	r0, #17
 8001274:	f000 f95c 	bl	8001530 <write_register>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <Radio_clear_rx_dr>:

void Radio_clear_rx_dr()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
    uint8_t new_status = Radio_get_status();
 8001286:	f7ff ffd3 	bl	8001230 <Radio_get_status>
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001294:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4619      	mov	r1, r3
 800129a:	2007      	movs	r0, #7
 800129c:	f000 f948 	bl	8001530 <write_register>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Radio_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void Radio_power_up()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f916 	bl	80014e0 <read_register>
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f933 	bl	8001530 <write_register>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <Radio_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void Radio_set_crc_length(length bytes)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f8ff 	bl	80014e0 <read_register>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d002      	beq.n	80012f2 <Radio_set_crc_length+0x20>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d005      	beq.n	80012fc <Radio_set_crc_length+0x2a>
 80012f0:	e009      	b.n	8001306 <Radio_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	73fb      	strb	r3, [r7, #15]
            break;
 80012fa:	e004      	b.n	8001306 <Radio_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	73fb      	strb	r3, [r7, #15]
            break;
 8001304:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4619      	mov	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f910 	bl	8001530 <write_register>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <Radio_set_address_widths>:

void Radio_set_address_widths(widths bytes)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	3b02      	subs	r3, #2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f900 	bl	8001530 <write_register>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <Radio_auto_retransmit_count>:

void Radio_auto_retransmit_count(count cnt)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8001342:	2004      	movs	r0, #4
 8001344:	f000 f8cc 	bl	80014e0 <read_register>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
    v &= 0xF0;                 // keep ARD, clear ARC
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f023 030f 	bic.w	r3, r3, #15
 8001352:	73fb      	strb	r3, [r7, #15]
    v |= (cnt & 0x0F);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	b25a      	sxtb	r2, r3
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4313      	orrs	r3, r2
 8001364:	b25b      	sxtb	r3, r3
 8001366:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	4619      	mov	r1, r3
 800136c:	2004      	movs	r0, #4
 800136e:	f000 f8df 	bl	8001530 <write_register>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <Radio_auto_retransmit_delay>:

void Radio_auto_retransmit_delay(delay us)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8001386:	2004      	movs	r0, #4
 8001388:	f000 f8aa 	bl	80014e0 <read_register>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
    v &= 0x0F;                 // keep ARC, clear ARD
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	73fb      	strb	r3, [r7, #15]
    v |= (((us/250) - 1) & 0x0F) << 4;
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <Radio_auto_retransmit_delay+0x4c>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2004      	movs	r0, #4
 80013bc:	f000 f8b8 	bl	8001530 <write_register>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	10624dd3 	.word	0x10624dd3

080013cc <Radio_set_rf_channel>:

void Radio_set_rf_channel(channel MHz)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80013dc:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2005      	movs	r0, #5
 80013e6:	f000 f8a3 	bl	8001530 <write_register>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Radio_set_rf_tx_output_power>:

void Radio_set_rf_tx_output_power(output_power dBm)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80013fc:	2006      	movs	r0, #6
 80013fe:	f000 f86f 	bl	80014e0 <read_register>
 8001402:	4603      	mov	r3, r0
 8001404:	f023 0306 	bic.w	r3, r3, #6
 8001408:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b25a      	sxtb	r2, r3
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4313      	orrs	r3, r2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4619      	mov	r1, r3
 8001420:	2006      	movs	r0, #6
 8001422:	f000 f885 	bl	8001530 <write_register>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <Radio_set_rf_air_data_rate>:

void Radio_set_rf_air_data_rate(air_data_rate bps)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8001438:	2006      	movs	r0, #6
 800143a:	f000 f851 	bl	80014e0 <read_register>
 800143e:	4603      	mov	r3, r0
 8001440:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001444:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d00a      	beq.n	8001462 <Radio_set_rf_air_data_rate+0x34>
 800144c:	2b02      	cmp	r3, #2
 800144e:	dc0e      	bgt.n	800146e <Radio_set_rf_air_data_rate+0x40>
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <Radio_set_rf_air_data_rate+0x3e>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d10a      	bne.n	800146e <Radio_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	73fb      	strb	r3, [r7, #15]
            break;
 8001460:	e005      	b.n	800146e <Radio_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	73fb      	strb	r3, [r7, #15]
            break;
 800146a:	e000      	b.n	800146e <Radio_set_rf_air_data_rate+0x40>
            break;
 800146c:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	4619      	mov	r1, r3
 8001472:	2006      	movs	r0, #6
 8001474:	f000 f85c 	bl	8001530 <write_register>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <cs_high>:
    HAL_SPI_Transmit(spi_handle, &cmd, 1, 2000);
    cs_high();
}

static void cs_high()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148a:	4802      	ldr	r0, [pc, #8]	@ (8001494 <cs_high+0x14>)
 800148c:	f000 ffe8 	bl	8002460 <HAL_GPIO_WritePin>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	48000400 	.word	0x48000400

08001498 <cs_low>:

static void cs_low()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a2:	4802      	ldr	r0, [pc, #8]	@ (80014ac <cs_low+0x14>)
 80014a4:	f000 ffdc 	bl	8002460 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	48000400 	.word	0x48000400

080014b0 <ce_high>:

static void ce_high()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <ce_high+0x14>)
 80014ba:	f000 ffd1 	bl	8002460 <HAL_GPIO_WritePin>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	48000800 	.word	0x48000800

080014c8 <ce_low>:

static void ce_low()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <ce_low+0x14>)
 80014d2:	f000 ffc5 	bl	8002460 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	48000800 	.word	0x48000800

080014e0 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80014ee:	f7ff ffd3 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <read_register+0x4c>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f107 020e 	add.w	r2, r7, #14
 80014fa:	f107 010f 	add.w	r1, r7, #15
 80014fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f002 fe4c 	bl	80041a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, &read_val, 1, 2000);
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <read_register+0x4c>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	f107 010d 	add.w	r1, r7, #13
 8001512:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001516:	2201      	movs	r2, #1
 8001518:	f002 fd0b 	bl	8003f32 <HAL_SPI_Receive>
    cs_high();
 800151c:	f7ff ffb0 	bl	8001480 <cs_high>

    return read_val;
 8001520:	7b7b      	ldrb	r3, [r7, #13]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001e4 	.word	0x200001e4

08001530 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	737b      	strb	r3, [r7, #13]

    cs_low();
 800154e:	f7ff ffa3 	bl	8001498 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <write_register+0x5c>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	f107 020e 	add.w	r2, r7, #14
 800155a:	f107 010f 	add.w	r1, r7, #15
 800155e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	f002 fe1c 	bl	80041a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, &write_val, 1, 2000);
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <write_register+0x5c>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f107 010d 	add.w	r1, r7, #13
 8001572:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001576:	2201      	movs	r2, #1
 8001578:	f002 fb65 	bl	8003c46 <HAL_SPI_Transmit>
    cs_high();
 800157c:	f7ff ff80 	bl	8001480 <cs_high>

    return write_val;
 8001580:	7b7b      	ldrb	r3, [r7, #13]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001e4 	.word	0x200001e4

08001590 <Receiver_setup>:
#include "timer.h"

static volatile int recved;
static uint8_t recved_data[32];

void Receiver_setup(SPI_HandleTypeDef *hspi) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	Radio_rx_init(2500, _1Mbps, hspi);
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	2100      	movs	r1, #0
 800159c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80015a0:	f7ff fd40 	bl	8001024 <Radio_rx_init>
	recved = 0;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <Receiver_setup+0x24>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001e8 	.word	0x200001e8

080015b8 <Receiver_irq>:

void Receiver_irq(uint16_t GPIO_Pin) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	2b40      	cmp	r3, #64	@ 0x40
 80015c6:	d10e      	bne.n	80015e6 <Receiver_irq+0x2e>
		if (recved == 0) {
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <Receiver_irq+0x38>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <Receiver_irq+0x26>
			Radio_rx_receive(recved_data);
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <Receiver_irq+0x3c>)
 80015d2:	f7ff fd5d 	bl	8001090 <Radio_rx_receive>
			recved = 1;
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <Receiver_irq+0x38>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
			// discard the packet, we aren't ready for it
			Radio_flush_rx_fifo();
			Radio_clear_rx_dr();
		}
	}
}
 80015dc:	e003      	b.n	80015e6 <Receiver_irq+0x2e>
			Radio_flush_rx_fifo();
 80015de:	f7ff fdf3 	bl	80011c8 <Radio_flush_rx_fifo>
			Radio_clear_rx_dr();
 80015e2:	f7ff fe4d 	bl	8001280 <Radio_clear_rx_dr>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200001e8 	.word	0x200001e8
 80015f4:	200001ec 	.word	0x200001ec

080015f8 <Receiver_process>:

void Receiver_process(void (*commandCallback)(uint8_t *command)) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if (recved) {
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <Receiver_process+0x24>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <Receiver_process+0x1c>
		commandCallback(recved_data);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <Receiver_process+0x28>)
 800160c:	4798      	blx	r3
		recved = 0;
 800160e:	4b03      	ldr	r3, [pc, #12]	@ (800161c <Receiver_process+0x24>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
	}
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001e8 	.word	0x200001e8
 8001620:	200001ec 	.word	0x200001ec

08001624 <ShiftReg_output_enable>:
		set_nG(HIGH);
		HAL_Delay(1000);
	}
}

void ShiftReg_output_enable() {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	set_nG(LOW);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 f89f 	bl	800176c <set_nG>
	DELAY_NS(TYP_NG_HIGH_TO_LOW_PROPAGATION_DELAY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 fa9a 	bl	8001b68 <delay_us>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <ShiftReg_shift_in_data>:
void ShiftReg_output_disable() {
	set_nG(HIGH);
	DELAY_NS(TYP_NG_LOW_TO_HIGH_PROPAGATION_DELAY);
}

void ShiftReg_shift_in_data(uint8_t *data, int shiftreg_count) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	int regnum, bitnum;
	int bit;

	// from TPIC6596 datasheet section 6 (Parameter Measurement Information)
	// "Write data and read data are valid only when RCK is low"
	set_RCK(LOW);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f840 	bl	80016c8 <set_RCK>

	// reset SRCLK to low
	set_SRCK(LOW);
 8001648:	2000      	movs	r0, #0
 800164a:	f000 f857 	bl	80016fc <set_SRCK>

	for (regnum = shiftreg_count - 1; regnum >= 0; regnum--) {
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e027      	b.n	80016a6 <ShiftReg_shift_in_data+0x6e>
		for (bitnum = 7; bitnum >= 0; bitnum--) {
 8001656:	2307      	movs	r3, #7
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	e01e      	b.n	800169a <ShiftReg_shift_in_data+0x62>
			// get bitnum of regnum's data
			bit = (data[regnum] >> bitnum) & 0x01;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	fa42 f303 	asr.w	r3, r2, r3
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]

			// clock the bit in
			// shifts previously shifted bits forward

			set_SIN(bit);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f85c 	bl	8001734 <set_SIN>
			DELAY_NS(MIN_SIN_SETUP_TIME);
 800167c:	2000      	movs	r0, #0
 800167e:	f000 fa73 	bl	8001b68 <delay_us>

			set_SRCK(HIGH);
 8001682:	2001      	movs	r0, #1
 8001684:	f000 f83a 	bl	80016fc <set_SRCK>

			DELAY_NS(MIN_SIN_PULSE_DURATION);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fa6d 	bl	8001b68 <delay_us>
			set_SRCK(LOW);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f834 	bl	80016fc <set_SRCK>
		for (bitnum = 7; bitnum >= 0; bitnum--) {
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	3b01      	subs	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	dadd      	bge.n	800165c <ShiftReg_shift_in_data+0x24>
	for (regnum = shiftreg_count - 1; regnum >= 0; regnum--) {
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dad4      	bge.n	8001656 <ShiftReg_shift_in_data+0x1e>
		}
	}

	// clock RCLK, saving the values that were shifted in
	set_RCK(HIGH);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 f80b 	bl	80016c8 <set_RCK>
	set_RCK(LOW);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <set_RCK>

	DELAY_NS(TYP_OUTPUT_DRAIN_RISE_TIME);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fa55 	bl	8001b68 <delay_us>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <set_RCK>:

/* static functions */

static void set_RCK(GPIO_PinState val) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_RCK_GPIO_EXPANDER, SHIFTREG_RCK_GPIO_PIN, !val);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	2110      	movs	r1, #16
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <set_RCK+0x30>)
 80016e4:	f000 febc 	bl	8002460 <HAL_GPIO_WritePin>
	DELAY_NS(RCK_RISE_FALL_TIME);
 80016e8:	f242 708b 	movw	r0, #10123	@ 0x278b
 80016ec:	f000 fa3c 	bl	8001b68 <delay_us>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	48000400 	.word	0x48000400

080016fc <set_SRCK>:

static void set_SRCK(GPIO_PinState val) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SRCK_GPIO_EXPANDER, SHIFTREG_SRCK_GPIO_PIN, !val);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <set_SRCK+0x34>)
 800171a:	f000 fea1 	bl	8002460 <HAL_GPIO_WritePin>
	DELAY_NS(SRCK_RISE_FALL_TIME);
 800171e:	f242 708b 	movw	r0, #10123	@ 0x278b
 8001722:	f000 fa21 	bl	8001b68 <delay_us>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	48000400 	.word	0x48000400

08001734 <set_SIN>:

static void set_SIN(GPIO_PinState val) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SIN_GPIO_EXPANDER, SHIFTREG_SIN_GPIO_PIN, !val);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <set_SIN+0x34>)
 8001752:	f000 fe85 	bl	8002460 <HAL_GPIO_WritePin>
	DELAY_NS(SIN_RISE_FALL_TIME);
 8001756:	f242 708b 	movw	r0, #10123	@ 0x278b
 800175a:	f000 fa05 	bl	8001b68 <delay_us>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	48000400 	.word	0x48000400

0800176c <set_nG>:

static void set_nG(GPIO_PinState val) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_NG_GPIO_EXPANDER, SHIFTREG_NG_GPIO_PIN, !val);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	2120      	movs	r1, #32
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <set_nG+0x30>)
 8001788:	f000 fe6a 	bl	8002460 <HAL_GPIO_WritePin>
	DELAY_NS(NG_RISE_FALL_TIME);
 800178c:	f242 708b 	movw	r0, #10123	@ 0x278b
 8001790:	f000 f9ea 	bl	8001b68 <delay_us>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	48000400 	.word	0x48000400

080017a0 <Shotclock_UART_recv_callback>:

// called when a UART character is received
// this would be if we are directly hooked up
// mostly gonna be unused unless sending direct commands
// (dangerous if plugged into STM while connected to shotclock)
void Shotclock_UART_recv_callback(char c) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]

}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <keyPressedCallback>:

void keyPressedCallback(char key) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	if (key == '1') {
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b31      	cmp	r3, #49	@ 0x31
 80017c6:	d102      	bne.n	80017ce <keyPressedCallback+0x16>
		UART_send("KEY 1 PRESS\n\r");
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <keyPressedCallback+0x20>)
 80017ca:	f000 fa35 	bl	8001c38 <UART_send>
	}
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08006bdc 	.word	0x08006bdc

080017dc <Shotclock_Radio_recv_callback>:

// called when radio received and has processed a command
// command is 32 bytes
void Shotclock_Radio_recv_callback(uint8_t* command) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    Incoming_Command = (char*)command;
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <Shotclock_Radio_recv_callback+0x30>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]

    if (strncmp(HORN_STR, Incoming_Command, strlen(HORN_STR)) == 0) {
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <Shotclock_Radio_recv_callback+0x30>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4807      	ldr	r0, [pc, #28]	@ (8001810 <Shotclock_Radio_recv_callback+0x34>)
 80017f4:	f005 f9b0 	bl	8006b58 <strncmp>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <Shotclock_Radio_recv_callback+0x28>
        SSEG_Data[6] = 0xFF;
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <Shotclock_Radio_recv_callback+0x38>)
 8001800:	22ff      	movs	r2, #255	@ 0xff
 8001802:	719a      	strb	r2, [r3, #6]
        // for (i = 0; i < SHIFT_REG_COUNT; i++) {
        //   ShiftReg_display_digit(&SSEG_Data, i, i);
        // }
    }

}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000214 	.word	0x20000214
 8001810:	08006bec 	.word	0x08006bec
 8001814:	2000020c 	.word	0x2000020c

08001818 <Shotclock_process>:

// called in main while loop
void Shotclock_process() {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

	if (sTimer[KEY_SCAN_TIMER] == 0)
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <Shotclock_process+0x24>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <Shotclock_process+0x20>
		{
			KeypadScan();
 8001824:	f7fe fe9e 	bl	8000564 <KeypadScan>
			KeyProcess(&keyPressedCallback, NULL, NULL);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <Shotclock_process+0x28>)
 800182e:	f7ff f907 	bl	8000a40 <KeyProcess>
			sTimer[KEY_SCAN_TIMER] = KEY_SCAN_TIME;
 8001832:	4b02      	ldr	r3, [pc, #8]	@ (800183c <Shotclock_process+0x24>)
 8001834:	220a      	movs	r2, #10
 8001836:	801a      	strh	r2, [r3, #0]
//		      UART_send_newline();
//			  AllKeyRestart();
//
//		  }
    // ShiftReg_shift_in_data(test_data, SHIFT_REG_COUNT);
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000218 	.word	0x20000218
 8001840:	080017b9 	.word	0x080017b9

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184e:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <HAL_MspInit+0x44>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6613      	str	r3, [r2, #96]	@ 0x60
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <HAL_MspInit+0x44>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <HAL_MspInit+0x44>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	6593      	str	r3, [r2, #88]	@ 0x58
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_SPI_MspInit+0x7c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d128      	bne.n	8001900 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018de:	23e0      	movs	r3, #224	@ 0xe0
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ee:	2305      	movs	r3, #5
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f000 fc06 	bl	800210c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40013000 	.word	0x40013000
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001920:	d114      	bne.n	800194c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201c      	movs	r0, #28
 8001940:	f000 fb2f 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001944:	201c      	movs	r0, #28
 8001946:	f000 fb48 	bl	8001fda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800194a:	e010      	b.n	800196e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_TIM_Base_MspInit+0x6c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6593      	str	r3, [r2, #88]	@ 0x58
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40000c00 	.word	0x40000c00

08001980 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ac      	sub	sp, #176	@ 0xb0
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2288      	movs	r2, #136	@ 0x88
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 f8d1 	bl	8006b48 <memset>
  if(huart->Instance==USART2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a25      	ldr	r2, [pc, #148]	@ (8001a40 <HAL_UART_MspInit+0xc0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d143      	bne.n	8001a38 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 fbe3 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fb26 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a16      	ldr	r2, [pc, #88]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_UART_MspInit+0xc4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fc:	230c      	movs	r3, #12
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a24:	f000 fb72 	bl	800210c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2026      	movs	r0, #38	@ 0x26
 8001a2e:	f000 fab8 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a32:	2026      	movs	r0, #38	@ 0x26
 8001a34:	f000 fad1 	bl	8001fda <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a38:	bf00      	nop
 8001a3a:	37b0      	adds	r7, #176	@ 0xb0
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 f961 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001aaa:	2040      	movs	r0, #64	@ 0x40
 8001aac:	f000 fcf0 	bl	8002490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <TIM2_IRQHandler+0x10>)
 8001aba:	f003 f87d 	bl	8004bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000c4 	.word	0x200000c4

08001ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <USART2_IRQHandler+0x10>)
 8001ace:	f003 fd75 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000015c 	.word	0x2000015c

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Timer_handle>:

#include "timer.h"

// timer
void Timer_handle(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	//__disable_irq();

	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	e011      	b.n	8001b30 <Timer_handle+0x30>
	{
		if (sTimer[sIndex] != 0)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <Timer_handle+0x44>)
 8001b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <Timer_handle+0x2a>
			sTimer[sIndex]--;
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <Timer_handle+0x44>)
 8001b1c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	b291      	uxth	r1, r2
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <Timer_handle+0x44>)
 8001b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	80fb      	strh	r3, [r7, #6]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d9ea      	bls.n	8001b0c <Timer_handle+0xc>
	}
	//__enable_irq();
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000218 	.word	0x20000218

08001b48 <Timer_set_us_upcounter>:

// delay
static TIM_HandleTypeDef* htim_us_upcounter = NULL;

void Timer_set_us_upcounter(TIM_HandleTypeDef* htim) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	htim_us_upcounter = htim;
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <Timer_set_us_upcounter+0x1c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000220 	.word	0x20000220

08001b68 <delay_us>:

void delay_us(uint32_t us) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    uint32_t start = htim_us_upcounter->Instance->CNT;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <delay_us+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	60fb      	str	r3, [r7, #12]

    while ((uint32_t) (htim_us_upcounter->Instance->CNT - start) < us) {
 8001b7a:	bf00      	nop
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <delay_us+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d8f6      	bhi.n	8001b7c <delay_us+0x14>

    }
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000220 	.word	0x20000220

08001ba0 <UART_setup>:
static UART_HandleTypeDef *huart = NULL;
static char recvChar;
static volatile int recved;

/* setup function */
void UART_setup(UART_HandleTypeDef *huartRef) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	huart = huartRef;
 8001ba8:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <UART_setup+0x30>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
	recved = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <UART_setup+0x34>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
	recvChar = '\0';
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <UART_setup+0x38>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, (uint8_t *) &recvChar, 1);
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <UART_setup+0x30>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4905      	ldr	r1, [pc, #20]	@ (8001bd8 <UART_setup+0x38>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fcae 	bl	8005524 <HAL_UART_Receive_IT>

}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000224 	.word	0x20000224
 8001bd4:	2000022c 	.word	0x2000022c
 8001bd8:	20000228 	.word	0x20000228

08001bdc <UART_irq>:

/* recv functions */
void UART_irq() {
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	recved = 1;
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <UART_irq+0x14>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	2000022c 	.word	0x2000022c

08001bf4 <UART_process>:

void UART_process(void (*uartCallback)(char c)) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (recved) {
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <UART_process+0x38>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <UART_process+0x2e>
		uartCallback(recvChar);
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <UART_process+0x3c>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4798      	blx	r3
		recved = 0;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <UART_process+0x38>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

		// restart callback
		HAL_UART_Receive_IT(huart, (uint8_t *) &recvChar, 1);
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <UART_process+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4905      	ldr	r1, [pc, #20]	@ (8001c30 <UART_process+0x3c>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fc81 	bl	8005524 <HAL_UART_Receive_IT>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000022c 	.word	0x2000022c
 8001c30:	20000228 	.word	0x20000228
 8001c34:	20000224 	.word	0x20000224

08001c38 <UART_send>:

/* send functions */
void UART_send(char *str) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <UART_send+0x2c>)
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fabf 	bl	80001c8 <strlen>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4620      	mov	r0, r4
 8001c56:	f003 fbdb 	bl	8005410 <HAL_UART_Transmit>
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000224 	.word	0x20000224

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff ff36 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f004 ff71 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7fe ff51 	bl	8000b40 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001cac:	08006cc4 	.word	0x08006cc4
  ldr r2, =_sbss
 8001cb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001cb4:	20000234 	.word	0x20000234

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>

08001cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f961 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f80e 	bl	8001cec <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	e001      	b.n	8001ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cdc:	f7ff fdb2 	bl	8001844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_InitTick+0x6c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_InitTick+0x70>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <HAL_InitTick+0x6c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f96d 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d809      	bhi.n	8001d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d30:	f000 f937 	bl	8001fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_InitTick+0x74>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e007      	b.n	8001d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e004      	b.n	8001d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e001      	b.n	8001d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000010 	.word	0x20000010
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	2000000c 	.word	0x2000000c

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000010 	.word	0x20000010
 8001d88:	20000230 	.word	0x20000230

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000230 	.word	0x20000230

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000010 	.word	0x20000010

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d008      	beq.n	8002038 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e022      	b.n	800207e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 020e 	bic.w	r2, r2, #14
 8002046:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	f003 021c 	and.w	r2, r3, #28
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d005      	beq.n	80020ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e029      	b.n	8002102 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020e 	bic.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 021c 	and.w	r2, r3, #28
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    }
  }
  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e17f      	b.n	800241c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8171 	beq.w	8002416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d005      	beq.n	800214c <HAL_GPIO_Init+0x40>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0201 	and.w	r2, r3, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d118      	bne.n	80021ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	6939      	ldr	r1, [r7, #16]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80ac 	beq.w	8002416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c2:	4a5e      	ldr	r2, [pc, #376]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x242>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	@ (8002444 <HAL_GPIO_Init+0x338>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x23e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_GPIO_Init+0x33c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x23a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	@ (800244c <HAL_GPIO_Init+0x340>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x236>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x344>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x232>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <HAL_GPIO_Init+0x348>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x22e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4a      	ldr	r2, [pc, #296]	@ (8002458 <HAL_GPIO_Init+0x34c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x22a>
 8002332:	2306      	movs	r3, #6
 8002334:	e00c      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002336:	2307      	movs	r3, #7
 8002338:	e00a      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800233a:	2305      	movs	r3, #5
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800233e:	2304      	movs	r3, #4
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800234e:	2300      	movs	r3, #0
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_GPIO_Init+0x334>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002392:	4a32      	ldr	r2, [pc, #200]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_GPIO_Init+0x350>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023bc:	4a27      	ldr	r2, [pc, #156]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c2:	4b26      	ldr	r3, [pc, #152]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e6:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	f47f ae78 	bne.w	800211c <HAL_GPIO_Init+0x10>
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800
 800244c:	48000c00 	.word	0x48000c00
 8002450:	48001000 	.word	0x48001000
 8002454:	48001400 	.word	0x48001400
 8002458:	48001800 	.word	0x48001800
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800247c:	e002      	b.n	8002484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fb24 	bl	8000afc <HAL_GPIO_EXTI_Callback>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024ea:	d130      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f8:	d038      	beq.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002502:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2232      	movs	r2, #50	@ 0x32
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002520:	e002      	b.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3b01      	subs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002534:	d102      	bne.n	800253c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f2      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002548:	d110      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e00f      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d007      	beq.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002564:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000
 8002580:	20000008 	.word	0x20000008
 8002584:	431bde83 	.word	0x431bde83

08002588 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e3ca      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b97      	ldr	r3, [pc, #604]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a4:	4b94      	ldr	r3, [pc, #592]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80e4 	beq.w	8002784 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4a>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	f040 808b 	bne.w	80026e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f040 8087 	bne.w	80026e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d2:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e3a2      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_RCC_OscConfig+0x7c>
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002602:	e005      	b.n	8002610 <HAL_RCC_OscConfig+0x88>
 8002604:	4b7c      	ldr	r3, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002610:	4293      	cmp	r3, r2
 8002612:	d223      	bcs.n	800265c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fd55 	bl	80030c8 <RCC_SetFlashLatencyFromMSIRange>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e383      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4b73      	ldr	r3, [pc, #460]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a72      	ldr	r2, [pc, #456]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	496d      	ldr	r1, [pc, #436]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002646:	4b6c      	ldr	r3, [pc, #432]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4968      	ldr	r1, [pc, #416]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e025      	b.n	80026a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265c:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4960      	ldr	r1, [pc, #384]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267a:	4b5f      	ldr	r3, [pc, #380]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	495b      	ldr	r1, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fd15 	bl	80030c8 <RCC_SetFlashLatencyFromMSIRange>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e343      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a8:	f000 fc4a 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	4950      	ldr	r1, [pc, #320]	@ (80027fc <HAL_RCC_OscConfig+0x274>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002800 <HAL_RCC_OscConfig+0x278>)
 80026c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fb0d 	bl	8001cec <HAL_InitTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d052      	beq.n	8002782 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	e327      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d032      	beq.n	800274e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026e8:	4b43      	ldr	r3, [pc, #268]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a42      	ldr	r2, [pc, #264]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fb4a 	bl	8001d8c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026fc:	f7ff fb46 	bl	8001d8c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e310      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270e:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271a:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4931      	ldr	r1, [pc, #196]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	492c      	ldr	r1, [pc, #176]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e01a      	b.n	8002784 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275a:	f7ff fb17 	bl	8001d8c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002762:	f7ff fb13 	bl	8001d8c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e2dd      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002774:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x1da>
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002782:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d074      	beq.n	800287a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b08      	cmp	r3, #8
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x21a>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d10e      	bne.n	80027ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d10b      	bne.n	80027ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d064      	beq.n	8002878 <HAL_RCC_OscConfig+0x2f0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d160      	bne.n	8002878 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e2ba      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x24a>
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x298>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027da:	d115      	bne.n	8002808 <HAL_RCC_OscConfig+0x280>
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a02      	ldr	r2, [pc, #8]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x298>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08006c6c 	.word	0x08006c6c
 8002800:	20000008 	.word	0x20000008
 8002804:	2000000c 	.word	0x2000000c
 8002808:	4ba0      	ldr	r3, [pc, #640]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a9f      	ldr	r2, [pc, #636]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b9d      	ldr	r3, [pc, #628]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a9c      	ldr	r2, [pc, #624]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7ff fab0 	bl	8001d8c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff faac 	bl	8001d8c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e276      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002842:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x2a8>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7ff fa9c 	bl	8001d8c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fa98 	bl	8001d8c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e262      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x2d0>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d060      	beq.n	8002948 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x310>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d116      	bne.n	80028c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x328>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e23f      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4973      	ldr	r1, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	e040      	b.n	8002948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d023      	beq.n	8002916 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7ff fa57 	bl	8001d8c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e2:	f7ff fa53 	bl	8001d8c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e21d      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b62      	ldr	r3, [pc, #392]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	495f      	ldr	r1, [pc, #380]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e018      	b.n	8002948 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800291c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7ff fa33 	bl	8001d8c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292a:	f7ff fa2f 	bl	8001d8c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1f9      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03c      	beq.n	80029ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01c      	beq.n	8002996 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002962:	4a4a      	ldr	r2, [pc, #296]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff fa0e 	bl	8001d8c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7ff fa0a 	bl	8001d8c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1d4      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCC_OscConfig+0x3ec>
 8002994:	e01b      	b.n	80029ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7ff f9f1 	bl	8001d8c <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ae:	f7ff f9ed 	bl	8001d8c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1b7      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ef      	bne.n	80029ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80a6 	beq.w	8002b28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f8:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a14:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a20:	f7ff f9b4 	bl	8001d8c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7ff f9b0 	bl	8001d8c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e17a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4d8>
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a5e:	e029      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d115      	bne.n	8002a94 <HAL_RCC_OscConfig+0x50c>
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	4a07      	ldr	r2, [pc, #28]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	4a03      	ldr	r2, [pc, #12]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	4b9c      	ldr	r3, [pc, #624]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a9b      	ldr	r2, [pc, #620]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	4b98      	ldr	r3, [pc, #608]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a97      	ldr	r2, [pc, #604]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d016      	beq.n	8002aea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7ff f966 	bl	8001d8c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7ff f962 	bl	8001d8c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e12a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	4b8b      	ldr	r3, [pc, #556]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ed      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x53c>
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7ff f94f 	bl	8001d8c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7ff f94b 	bl	8001d8c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e113      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b08:	4b7f      	ldr	r3, [pc, #508]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ed      	bne.n	8002af2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	4a79      	ldr	r2, [pc, #484]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80fe 	beq.w	8002d2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	f040 80d0 	bne.w	8002cdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b3c:	4b72      	ldr	r3, [pc, #456]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d130      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d127      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b7c:	2a07      	cmp	r2, #7
 8002b7e:	bf14      	ite	ne
 8002b80:	2201      	movne	r2, #1
 8002b82:	2200      	moveq	r2, #0
 8002b84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d109      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d06e      	beq.n	8002c90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d069      	beq.n	8002c8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bc4:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0ad      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be0:	f7ff f8d4 	bl	8001d8c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff f8d0 	bl	8001d8c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e09a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfa:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c06:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <HAL_RCC_OscConfig+0x784>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c20:	0212      	lsls	r2, r2, #8
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0552      	lsls	r2, r2, #21
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c34:	0852      	lsrs	r2, r2, #1
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0652      	lsls	r2, r2, #25
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c40:	0912      	lsrs	r2, r2, #4
 8002c42:	0452      	lsls	r2, r2, #17
 8002c44:	430a      	orrs	r2, r1
 8002c46:	4930      	ldr	r1, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2d      	ldr	r2, [pc, #180]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c58:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c64:	f7ff f892 	bl	8001d8c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f88e 	bl	8001d8c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e058      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c8a:	e050      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e04f      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d148      	bne.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb4:	f7ff f86a 	bl	8001d8c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7ff f866 	bl	8001d8c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e030      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x734>
 8002cda:	e028      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d023      	beq.n	8002d2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7ff f84d 	bl	8001d8c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	e00c      	b.n	8002d10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7ff f849 	bl	8001d8c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d905      	bls.n	8002d10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e013      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ec      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4905      	ldr	r1, [pc, #20]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x7b4>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	e001      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	feeefffc 	.word	0xfeeefffc

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0e7      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b75      	ldr	r3, [pc, #468]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b72      	ldr	r3, [pc, #456]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4970      	ldr	r1, [pc, #448]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b6e      	ldr	r3, [pc, #440]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0cf      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d010      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d908      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4960      	ldr	r1, [pc, #384]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d04c      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0a6      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dde:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e09a      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e08e      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e06:	4b4a      	ldr	r3, [pc, #296]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e086      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4943      	ldr	r1, [pc, #268]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fe ffb0 	bl	8001d8c <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe ffac 	bl	8001d8c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e06e      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d208      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	492b      	ldr	r1, [pc, #172]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d210      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	4923      	ldr	r1, [pc, #140]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e036      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4918      	ldr	r1, [pc, #96]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee0:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4910      	ldr	r1, [pc, #64]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef4:	f000 f824 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	490b      	ldr	r1, [pc, #44]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f4>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002f12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_ClockConfig+0x1fc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fee7 	bl	8001cec <HAL_InitTick>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f22:	7afb      	ldrb	r3, [r7, #11]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08006c6c 	.word	0x08006c6c
 8002f38:	20000008 	.word	0x20000008
 8002f3c:	2000000c 	.word	0x2000000c

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x34>
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d121      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11e      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f74:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f80:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800304c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc4:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d134      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d003      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xac>
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	e005      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fee:	617b      	str	r3, [r7, #20]
      break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	617b      	str	r3, [r7, #20]
      break;
 8002ff6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	0e5b      	lsrs	r3, r3, #25
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	3301      	adds	r3, #1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003038:	69bb      	ldr	r3, [r7, #24]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	08006c84 	.word	0x08006c84
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b03      	ldr	r3, [pc, #12]	@ (800306c <HAL_RCC_GetHCLKFreq+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000008 	.word	0x20000008

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003074:	f7ff fff0 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4904      	ldr	r1, [pc, #16]	@ (8003098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	08006c7c 	.word	0x08006c7c

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030a0:	f7ff ffda 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4904      	ldr	r1, [pc, #16]	@ (80030c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08006c7c 	.word	0x08006c7c

080030c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030e0:	f7ff f9ee 	bl	80024c0 <HAL_PWREx_GetVoltageRange>
 80030e4:	6178      	str	r0, [r7, #20]
 80030e6:	e014      	b.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	4a24      	ldr	r2, [pc, #144]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f4:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003100:	f7ff f9de 	bl	80024c0 <HAL_PWREx_GetVoltageRange>
 8003104:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003118:	d10b      	bne.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b80      	cmp	r3, #128	@ 0x80
 800311e:	d919      	bls.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2ba0      	cmp	r3, #160	@ 0xa0
 8003124:	d902      	bls.n	800312c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003126:	2302      	movs	r3, #2
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	e013      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800312c:	2301      	movs	r3, #1
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e010      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	@ 0x80
 8003136:	d902      	bls.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003138:	2303      	movs	r3, #3
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e00a      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b80      	cmp	r3, #128	@ 0x80
 8003142:	d102      	bne.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003144:	2302      	movs	r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e004      	b.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b70      	cmp	r3, #112	@ 0x70
 800314e:	d101      	bne.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003150:	2301      	movs	r3, #1
 8003152:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	4909      	ldr	r1, [pc, #36]	@ (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003164:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	40022000 	.word	0x40022000

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003190:	2300      	movs	r3, #0
 8003192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003194:	2300      	movs	r3, #0
 8003196:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d041      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031ac:	d02a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031b2:	d824      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031be:	d81e      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c8:	d010      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ca:	e018      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031cc:	4b86      	ldr	r3, [pc, #536]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a85      	ldr	r2, [pc, #532]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d8:	e015      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fabb 	bl	800375c <RCCEx_PLLSAI1_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031ea:	e00c      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3320      	adds	r3, #32
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fba6 	bl	8003944 <RCCEx_PLLSAI2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	74fb      	strb	r3, [r7, #19]
      break;
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320c:	4b76      	ldr	r3, [pc, #472]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800321a:	4973      	ldr	r1, [pc, #460]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003222:	e001      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d041      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003238:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800323c:	d02a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800323e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003242:	d824      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003244:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800324a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800324e:	d81e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003258:	d010      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325a:	e018      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800325c:	4b62      	ldr	r3, [pc, #392]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a61      	ldr	r2, [pc, #388]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003268:	e015      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fa73 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3320      	adds	r3, #32
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fb5e 	bl	8003944 <RCCEx_PLLSAI2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	74fb      	strb	r3, [r7, #19]
      break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032aa:	494f      	ldr	r1, [pc, #316]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032b2:	e001      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a0 	beq.w	8003406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	4a40      	ldr	r2, [pc, #256]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ec:	4b3e      	ldr	r3, [pc, #248]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032fc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3a      	ldr	r2, [pc, #232]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003308:	f7fe fd40 	bl	8001d8c <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800330e:	e009      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fe fd3c 	bl	8001d8c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	74fb      	strb	r3, [r7, #19]
        break;
 8003322:	e005      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003324:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d15c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003336:	4b2c      	ldr	r3, [pc, #176]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003340:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01f      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	d019      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003354:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003360:	4b21      	ldr	r3, [pc, #132]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003370:	4b1d      	ldr	r3, [pc, #116]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fcfb 	bl	8001d8c <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003398:	e00b      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fcf7 	bl	8001d8c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d902      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	74fb      	strb	r3, [r7, #19]
            break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ec      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d6:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033de:	e009      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f4:	7c7b      	ldrb	r3, [r7, #17]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	4a9d      	ldr	r2, [pc, #628]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003412:	4b98      	ldr	r3, [pc, #608]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003418:	f023 0203 	bic.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	4994      	ldr	r1, [pc, #592]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003434:	4b8f      	ldr	r3, [pc, #572]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f023 020c 	bic.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003442:	498c      	ldr	r1, [pc, #560]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003456:	4b87      	ldr	r3, [pc, #540]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	4983      	ldr	r1, [pc, #524]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003478:	4b7e      	ldr	r3, [pc, #504]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	497b      	ldr	r1, [pc, #492]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349a:	4b76      	ldr	r3, [pc, #472]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	4972      	ldr	r1, [pc, #456]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	496a      	ldr	r1, [pc, #424]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034de:	4b65      	ldr	r3, [pc, #404]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ec:	4961      	ldr	r1, [pc, #388]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003500:	4b5c      	ldr	r3, [pc, #368]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	4959      	ldr	r1, [pc, #356]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003522:	4b54      	ldr	r3, [pc, #336]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	4950      	ldr	r1, [pc, #320]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003544:	4b4b      	ldr	r3, [pc, #300]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	4948      	ldr	r1, [pc, #288]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003566:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	493f      	ldr	r1, [pc, #252]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d028      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003588:	4b3a      	ldr	r3, [pc, #232]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003596:	4937      	ldr	r1, [pc, #220]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035a6:	d106      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a8:	4b32      	ldr	r3, [pc, #200]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a31      	ldr	r2, [pc, #196]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b2:	60d3      	str	r3, [r2, #12]
 80035b4:	e011      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035be:	d10c      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f8c8 	bl	800375c <RCCEx_PLLSAI1_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d028      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e6:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f4:	491f      	ldr	r1, [pc, #124]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003604:	d106      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a1a      	ldr	r2, [pc, #104]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003610:	60d3      	str	r3, [r2, #12]
 8003612:	e011      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f899 	bl	800375c <RCCEx_PLLSAI1_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003652:	4908      	ldr	r1, [pc, #32]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800365e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003662:	d109      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a02      	ldr	r2, [pc, #8]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800366e:	60d3      	str	r3, [r2, #12]
 8003670:	e014      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f867 	bl	800375c <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02f      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b6:	4928      	ldr	r1, [pc, #160]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f844 	bl	800375c <RCCEx_PLLSAI1_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d014      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	74bb      	strb	r3, [r7, #18]
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3320      	adds	r3, #32
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f925 	bl	8003944 <RCCEx_PLLSAI2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003722:	490d      	ldr	r1, [pc, #52]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003746:	4904      	ldr	r1, [pc, #16]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800374e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000

0800375c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376a:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003776:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d10d      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
       ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800378e:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
       ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d047      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e044      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d018      	beq.n	80037e2 <RCCEx_PLLSAI1_Config+0x86>
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d825      	bhi.n	8003800 <RCCEx_PLLSAI1_Config+0xa4>
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <RCCEx_PLLSAI1_Config+0x62>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d009      	beq.n	80037d0 <RCCEx_PLLSAI1_Config+0x74>
 80037bc:	e020      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037be:	4b60      	ldr	r3, [pc, #384]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e01a      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e013      	b.n	800380a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e2:	4b57      	ldr	r3, [pc, #348]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ee:	4b54      	ldr	r3, [pc, #336]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037fe:	e006      	b.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e004      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800380e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003816:	4b4a      	ldr	r3, [pc, #296]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	430b      	orrs	r3, r1
 800382c:	4944      	ldr	r1, [pc, #272]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d17d      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003838:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a40      	ldr	r2, [pc, #256]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fe faa2 	bl	8001d8c <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384a:	e009      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800384c:	f7fe fa9e 	bl	8001d8c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	73fb      	strb	r3, [r7, #15]
        break;
 800385e:	e005      	b.n	800386c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003860:	4b37      	ldr	r3, [pc, #220]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ef      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d160      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003878:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	0912      	lsrs	r2, r2, #4
 8003890:	0452      	lsls	r2, r2, #17
 8003892:	430a      	orrs	r2, r1
 8003894:	492a      	ldr	r1, [pc, #168]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	610b      	str	r3, [r1, #16]
 800389a:	e027      	b.n	80038ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d112      	bne.n	80038c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a2:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	0211      	lsls	r1, r2, #8
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6912      	ldr	r2, [r2, #16]
 80038b8:	0852      	lsrs	r2, r2, #1
 80038ba:	3a01      	subs	r2, #1
 80038bc:	0552      	lsls	r2, r2, #21
 80038be:	430a      	orrs	r2, r1
 80038c0:	491f      	ldr	r1, [pc, #124]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
 80038c6:	e011      	b.n	80038ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6892      	ldr	r2, [r2, #8]
 80038d8:	0211      	lsls	r1, r2, #8
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6952      	ldr	r2, [r2, #20]
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0652      	lsls	r2, r2, #25
 80038e4:	430a      	orrs	r2, r1
 80038e6:	4916      	ldr	r1, [pc, #88]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a13      	ldr	r2, [pc, #76]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fa48 	bl	8001d8c <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038fe:	e009      	b.n	8003914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003900:	f7fe fa44 	bl	8001d8c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d902      	bls.n	8003914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	73fb      	strb	r3, [r7, #15]
          break;
 8003912:	e005      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003914:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ef      	beq.n	8003900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4904      	ldr	r1, [pc, #16]	@ (8003940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003952:	4b6a      	ldr	r3, [pc, #424]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800395e:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d10d      	bne.n	800398a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
       ||
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003976:	4b61      	ldr	r3, [pc, #388]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
       ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d047      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	e044      	b.n	8003a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d018      	beq.n	80039ca <RCCEx_PLLSAI2_Config+0x86>
 8003998:	2b03      	cmp	r3, #3
 800399a:	d825      	bhi.n	80039e8 <RCCEx_PLLSAI2_Config+0xa4>
 800399c:	2b01      	cmp	r3, #1
 800399e:	d002      	beq.n	80039a6 <RCCEx_PLLSAI2_Config+0x62>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d009      	beq.n	80039b8 <RCCEx_PLLSAI2_Config+0x74>
 80039a4:	e020      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039a6:	4b55      	ldr	r3, [pc, #340]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11d      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b6:	e01a      	b.n	80039ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b8:	4b50      	ldr	r3, [pc, #320]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c8:	e013      	b.n	80039f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ca:	4b4c      	ldr	r3, [pc, #304]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039d6:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039e6:	e006      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e004      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ee:	bf00      	nop
 80039f0:	e002      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039fe:	4b3f      	ldr	r3, [pc, #252]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	430b      	orrs	r3, r1
 8003a14:	4939      	ldr	r1, [pc, #228]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d167      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a20:	4b36      	ldr	r3, [pc, #216]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a35      	ldr	r2, [pc, #212]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7fe f9ae 	bl	8001d8c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a32:	e009      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a34:	f7fe f9aa 	bl	8001d8c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	73fb      	strb	r3, [r7, #15]
        break;
 8003a46:	e005      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a48:	4b2c      	ldr	r3, [pc, #176]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ef      	bne.n	8003a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d14a      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d111      	bne.n	8003a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a60:	4b26      	ldr	r3, [pc, #152]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	0211      	lsls	r1, r2, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	0912      	lsrs	r2, r2, #4
 8003a78:	0452      	lsls	r2, r2, #17
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	491f      	ldr	r1, [pc, #124]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	614b      	str	r3, [r1, #20]
 8003a82:	e011      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6892      	ldr	r2, [r2, #8]
 8003a94:	0211      	lsls	r1, r2, #8
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6912      	ldr	r2, [r2, #16]
 8003a9a:	0852      	lsrs	r2, r2, #1
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	0652      	lsls	r2, r2, #25
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4916      	ldr	r1, [pc, #88]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a13      	ldr	r2, [pc, #76]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe f96a 	bl	8001d8c <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aba:	e009      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003abc:	f7fe f966 	bl	8001d8c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ace:	e005      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4904      	ldr	r1, [pc, #16]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e095      	b.n	8003c3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fe9a 	bl	800188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b78:	d902      	bls.n	8003b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b8e:	d007      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	f003 0204 	and.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b088      	sub	sp, #32
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c56:	f7fe f899 	bl	8001d8c <HAL_GetTick>
 8003c5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e15c      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SPI_Transmit+0x36>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e154      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_SPI_Transmit+0x48>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e14d      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce0:	d10f      	bne.n	8003d02 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d007      	beq.n	8003d20 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d28:	d952      	bls.n	8003dd0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_Transmit+0xf2>
 8003d32:	8b7b      	ldrh	r3, [r7, #26]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d145      	bne.n	8003dc4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d5c:	e032      	b.n	8003dc4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d112      	bne.n	8003d92 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d90:	e018      	b.n	8003dc4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d92:	f7fd fffb 	bl	8001d8c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d803      	bhi.n	8003daa <HAL_SPI_Transmit+0x164>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003da8:	d102      	bne.n	8003db0 <HAL_SPI_Transmit+0x16a>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e0b2      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1c7      	bne.n	8003d5e <HAL_SPI_Transmit+0x118>
 8003dce:	e083      	b.n	8003ed8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_SPI_Transmit+0x198>
 8003dd8:	8b7b      	ldrh	r3, [r7, #26]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d177      	bne.n	8003ece <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d912      	bls.n	8003e0e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	881a      	ldrh	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b02      	subs	r3, #2
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e0c:	e05f      	b.n	8003ece <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e34:	e04b      	b.n	8003ece <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d12b      	bne.n	8003e9c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d912      	bls.n	8003e74 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	881a      	ldrh	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b02      	subs	r3, #2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e72:	e02c      	b.n	8003ece <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e9a:	e018      	b.n	8003ece <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9c:	f7fd ff76 	bl	8001d8c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d803      	bhi.n	8003eb4 <HAL_SPI_Transmit+0x26e>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb2:	d102      	bne.n	8003eba <HAL_SPI_Transmit+0x274>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e02d      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ae      	bne.n	8003e36 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fcf5 	bl	80048cc <SPI_EndRxTxTransaction>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af02      	add	r7, sp, #8
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e123      	b.n	800419a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5a:	d112      	bne.n	8003f82 <HAL_SPI_Receive+0x50>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f6c:	88fa      	ldrh	r2, [r7, #6]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f912 	bl	80041a2 <HAL_SPI_TransmitReceive>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e10b      	b.n	800419a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f82:	f7fd ff03 	bl	8001d8c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Receive+0x62>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e100      	b.n	800419a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SPI_Receive+0x74>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0f9      	b.n	800419a <HAL_SPI_Receive+0x268>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ff8:	d908      	bls.n	800400c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e007      	b.n	800401c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004024:	d10f      	bne.n	8004046 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004044:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d007      	beq.n	8004064 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004062:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800406c:	d875      	bhi.n	800415a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800406e:	e037      	b.n	80040e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d117      	bne.n	80040ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f103 020c 	add.w	r2, r3, #12
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	7812      	ldrb	r2, [r2, #0]
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80040ac:	e018      	b.n	80040e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ae:	f7fd fe6d 	bl	8001d8c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d803      	bhi.n	80040c6 <HAL_SPI_Receive+0x194>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_Receive+0x19a>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e05c      	b.n	800419a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1c1      	bne.n	8004070 <HAL_SPI_Receive+0x13e>
 80040ec:	e03b      	b.n	8004166 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d115      	bne.n	8004128 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	b292      	uxth	r2, r2
 8004108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004126:	e018      	b.n	800415a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004128:	f7fd fe30 	bl	8001d8c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d803      	bhi.n	8004140 <HAL_SPI_Receive+0x20e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800413e:	d102      	bne.n	8004146 <HAL_SPI_Receive+0x214>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e01f      	b.n	800419a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1c3      	bne.n	80040ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	6839      	ldr	r1, [r7, #0]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fb56 	bl	800481c <SPI_EndRxTransaction>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004198:	2300      	movs	r3, #0
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08a      	sub	sp, #40	@ 0x28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fd fdea 	bl	8001d8c <HAL_GetTick>
 80041b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d00c      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x4e>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041dc:	d106      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x4a>
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d001      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	e1f3      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x60>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x60>
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e1e8      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x72>
 8004210:	2302      	movs	r3, #2
 8004212:	e1e1      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b04      	cmp	r3, #4
 8004226:	d003      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2205      	movs	r2, #5
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004272:	d802      	bhi.n	800427a <HAL_SPI_TransmitReceive+0xd8>
 8004274:	8abb      	ldrh	r3, [r7, #20]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d908      	bls.n	800428c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e007      	b.n	800429c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d007      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042c2:	f240 8083 	bls.w	80043cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x132>
 80042ce:	8afb      	ldrh	r3, [r7, #22]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d16f      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	1c9a      	adds	r2, r3, #2
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f8:	e05c      	b.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11b      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x19e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x19e>
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	2b01      	cmp	r3, #1
 8004316:	d113      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d11c      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x1e6>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	b292      	uxth	r2, r2
 8004366:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004384:	2301      	movs	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004388:	f7fd fd00 	bl	8001d8c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004394:	429a      	cmp	r2, r3
 8004396:	d80d      	bhi.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800439e:	d009      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e111      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d19d      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x158>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d197      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x158>
 80043ca:	e0e5      	b.n	8004598 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x23a>
 80043d4:	8afb      	ldrh	r3, [r7, #22]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f040 80d1 	bne.w	800457e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d912      	bls.n	800440c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b02      	subs	r3, #2
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800440a:	e0b8      	b.n	800457e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004432:	e0a4      	b.n	800457e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d134      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02f      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12c      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d912      	bls.n	8004482 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b02      	subs	r3, #2
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004480:	e012      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d148      	bne.n	800454c <HAL_SPI_TransmitReceive+0x3aa>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d042      	beq.n	800454c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d923      	bls.n	800451a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b02      	subs	r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d81f      	bhi.n	8004548 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e016      	b.n	8004548 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f103 020c 	add.w	r2, r3, #12
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454c:	f7fd fc1e 	bl	8001d8c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004558:	429a      	cmp	r2, r3
 800455a:	d803      	bhi.n	8004564 <HAL_SPI_TransmitReceive+0x3c2>
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004562:	d102      	bne.n	800456a <HAL_SPI_TransmitReceive+0x3c8>
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e02c      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	f47f af55 	bne.w	8004434 <HAL_SPI_TransmitReceive+0x292>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	f47f af4e 	bne.w	8004434 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f995 	bl	80048cc <SPI_EndRxTxTransaction>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00e      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	@ 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fd fbcc 	bl	8001d8c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fd fbc4 	bl	8001d8c <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fd fbb4 	bl	8001d8c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000008 	.word	0x20000008

080046f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	@ 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004702:	f7fd fb43 	bl	8001d8c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	4413      	add	r3, r2
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004712:	f7fd fb3b 	bl	8001d8c <HAL_GetTick>
 8004716:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	330c      	adds	r3, #12
 800471e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004720:	4b3d      	ldr	r3, [pc, #244]	@ (8004818 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	0d1b      	lsrs	r3, r3, #20
 8004730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004738:	e060      	b.n	80047fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004740:	d107      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004750:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004758:	d050      	beq.n	80047fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800475a:	f7fd fb17 	bl	8001d8c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004766:	429a      	cmp	r2, r3
 8004768:	d902      	bls.n	8004770 <SPI_WaitFifoStateUntilTimeout+0x80>
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13d      	bne.n	80047ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800477e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004788:	d111      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004792:	d004      	beq.n	800479e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479c:	d107      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b6:	d10f      	bne.n	80047d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e010      	b.n	800480e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d196      	bne.n	800473a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	@ 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000008 	.word	0x20000008

0800481c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004830:	d111      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483a:	d004      	beq.n	8004846 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	d107      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff febd 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e023      	b.n	80048c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004884:	d11d      	bne.n	80048c2 <SPI_EndRxTransaction+0xa6>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488e:	d004      	beq.n	800489a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004898:	d113      	bne.n	80048c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff22 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e000      	b.n	80048c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff ff03 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e027      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	2180      	movs	r1, #128	@ 0x80
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fe68 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e014      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fedc 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e000      	b.n	8004950 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e049      	b.n	80049fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc ffc6 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 fb06 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e047      	b.n	8004ab0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	@ (8004abc <HAL_TIM_Base_Start+0xb4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01d      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3a:	d018      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <HAL_TIM_Base_Start+0xb8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <HAL_TIM_Base_Start+0xbc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_TIM_Base_Start+0xc0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004acc <HAL_TIM_Base_Start+0xc4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIM_Base_Start+0x66>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a19      	ldr	r2, [pc, #100]	@ (8004ad0 <HAL_TIM_Base_Start+0xc8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d115      	bne.n	8004a9a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b17      	ldr	r3, [pc, #92]	@ (8004ad4 <HAL_TIM_Base_Start+0xcc>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b06      	cmp	r3, #6
 8004a7e:	d015      	beq.n	8004aac <HAL_TIM_Base_Start+0xa4>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a86:	d011      	beq.n	8004aac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	e008      	b.n	8004aac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e000      	b.n	8004aae <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40013400 	.word	0x40013400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	00010007 	.word	0x00010007

08004ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e04f      	b.n	8004b90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01d      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d018      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <HAL_TIM_Base_Start_IT+0xd4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_TIM_Base_Start_IT+0x76>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d115      	bne.n	8004b7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b06      	cmp	r3, #6
 8004b5e:	d015      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0xb4>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b66:	d011      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b78:	e008      	b.n	8004b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e000      	b.n	8004b8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40013400 	.word	0x40013400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	00010007 	.word	0x00010007

08004bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0202 	mvn.w	r2, #2
 8004bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9b2 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9a4 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9b5 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0204 	mvn.w	r2, #4
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f98c 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f97e 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f98f 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0208 	mvn.w	r2, #8
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f966 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f958 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f969 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d020      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01b      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0210 	mvn.w	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f940 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f932 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f943 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0201 	mvn.w	r2, #1
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fb ff03 	bl	8000b2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fafd 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00c      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 faf5 	bl	8005360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8fd 	bl	8004f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0220 	mvn.w	r2, #32
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fabd 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_ConfigClockSource+0x1c>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0b6      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x18a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e00:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1e:	d03e      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xd8>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e24:	f200 8087 	bhi.w	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2c:	f000 8086 	beq.w	8004f3c <HAL_TIM_ConfigClockSource+0x176>
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e34:	d87f      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e36:	2b70      	cmp	r3, #112	@ 0x70
 8004e38:	d01a      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xaa>
 8004e3a:	2b70      	cmp	r3, #112	@ 0x70
 8004e3c:	d87b      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e3e:	2b60      	cmp	r3, #96	@ 0x60
 8004e40:	d050      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0x11e>
 8004e42:	2b60      	cmp	r3, #96	@ 0x60
 8004e44:	d877      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e46:	2b50      	cmp	r3, #80	@ 0x50
 8004e48:	d03c      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xfe>
 8004e4a:	2b50      	cmp	r3, #80	@ 0x50
 8004e4c:	d873      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	d058      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x13e>
 8004e52:	2b40      	cmp	r3, #64	@ 0x40
 8004e54:	d86f      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e56:	2b30      	cmp	r3, #48	@ 0x30
 8004e58:	d064      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15e>
 8004e5a:	2b30      	cmp	r3, #48	@ 0x30
 8004e5c:	d86b      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d060      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15e>
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d867      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05c      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15e>
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d05a      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15e>
 8004e6e:	e062      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	f000 f9b2 	bl	80051e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]
      break;
 8004e9c:	e04f      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eae:	f000 f99b 	bl	80051e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e03c      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f000 f90f 	bl	80050f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2150      	movs	r1, #80	@ 0x50
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f968 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e02c      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f92e 	bl	8005152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2160      	movs	r1, #96	@ 0x60
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f958 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f02:	e01c      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f10:	461a      	mov	r2, r3
 8004f12:	f000 f8ef 	bl	80050f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2140      	movs	r1, #64	@ 0x40
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f948 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f22:	e00c      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 f93f 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e003      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3a:	e000      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a46      	ldr	r2, [pc, #280]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a43      	ldr	r2, [pc, #268]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a42      	ldr	r2, [pc, #264]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a40      	ldr	r2, [pc, #256]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a35      	ldr	r2, [pc, #212]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01f      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005008:	d01b      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a32      	ldr	r2, [pc, #200]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d017      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a31      	ldr	r2, [pc, #196]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a30      	ldr	r2, [pc, #192]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <TIM_Base_SetConfig+0x140>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <TIM_Base_SetConfig+0x144>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <TIM_Base_SetConfig+0x148>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d108      	bne.n	8005054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a16      	ldr	r2, [pc, #88]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <TIM_Base_SetConfig+0x140>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a16      	ldr	r2, [pc, #88]	@ (80050ec <TIM_Base_SetConfig+0x144>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <TIM_Base_SetConfig+0x148>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
  }
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0210 	bic.w	r2, r3, #16
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800517c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800518e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e068      	b.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2d      	ldr	r2, [pc, #180]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d108      	bne.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800527a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b2:	d018      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1a      	ldr	r2, [pc, #104]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a13      	ldr	r2, [pc, #76]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a14      	ldr	r2, [pc, #80]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10c      	bne.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40014000 	.word	0x40014000

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e040      	b.n	8005408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc faf2 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	@ 0x24
 80053a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fedc 	bl	8006178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fc21 	bl	8005c08 <UART_SetConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e01b      	b.n	8005408 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 ff5b 	bl	80062bc <UART_CheckIdleState>
 8005406:	4603      	mov	r3, r0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005424:	2b20      	cmp	r3, #32
 8005426:	d177      	bne.n	8005518 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Transmit+0x24>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e070      	b.n	800551a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2221      	movs	r2, #33	@ 0x21
 8005444:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005446:	f7fc fca1 	bl	8001d8c <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005464:	d108      	bne.n	8005478 <HAL_UART_Transmit+0x68>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e003      	b.n	8005480 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005480:	e02f      	b.n	80054e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	2180      	movs	r1, #128	@ 0x80
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 ffbd 	bl	800640c <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e03b      	b.n	800551a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	881a      	ldrh	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b4:	b292      	uxth	r2, r2
 80054b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3302      	adds	r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e007      	b.n	80054d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3301      	adds	r3, #1
 80054ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1c9      	bne.n	8005482 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2140      	movs	r1, #64	@ 0x40
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 ff87 	bl	800640c <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e005      	b.n	800551a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	2b20      	cmp	r3, #32
 800553a:	d137      	bne.n	80055ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_UART_Receive_IT+0x24>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e030      	b.n	80055ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <HAL_UART_Receive_IT+0x94>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01f      	beq.n	800559c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69f9      	ldr	r1, [r7, #28]
 800558e:	6a3a      	ldr	r2, [r7, #32]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	61bb      	str	r3, [r7, #24]
   return(result);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	461a      	mov	r2, r3
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 ffa0 	bl	80064e8 <UART_Start_Receive_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	@ 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40008000 	.word	0x40008000

080055bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0ba      	sub	sp, #232	@ 0xe8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055ea:	4013      	ands	r3, r2
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00f      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 82ca 	beq.w	8005bae <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
      }
      return;
 8005622:	e2c4      	b.n	8005bae <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8117 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800563a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800563e:	4b85      	ldr	r3, [pc, #532]	@ (8005854 <HAL_UART_IRQHandler+0x298>)
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 810a 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d011      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571c:	2b00      	cmp	r3, #0
 800571e:	d012      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8230 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04f      	beq.n	800583e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff68 	bl	8006674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d141      	bne.n	8005836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1d9      	bne.n	80057b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580a:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <HAL_UART_IRQHandler+0x29c>)
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	4618      	mov	r0, r3
 8005814:	f7fc fc39 	bl	800208a <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e00f      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9d4 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e00b      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9d0 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e007      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9cc 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800584c:	e1b1      	b.n	8005bb2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	bf00      	nop
    return;
 8005850:	e1af      	b.n	8005bb2 <HAL_UART_IRQHandler+0x5f6>
 8005852:	bf00      	nop
 8005854:	04000120 	.word	0x04000120
 8005858:	0800673d 	.word	0x0800673d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 816a 	bne.w	8005b3a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8163 	beq.w	8005b3a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 815c 	beq.w	8005b3a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2210      	movs	r2, #16
 8005888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b40      	cmp	r3, #64	@ 0x40
 8005896:	f040 80d4 	bne.w	8005a42 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80ad 	beq.w	8005a0a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f080 80a5 	bcs.w	8005a0a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 8086 	bne.w	80059e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800590a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1da      	bne.n	80058dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800594e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b8:	f023 0310 	bic.w	r3, r3, #16
 80059bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e4      	bne.n	80059a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc fb13 	bl	800200e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8f4 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a08:	e0d5      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f040 80ce 	bne.w	8005bb6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	f040 80c5 	bne.w	8005bb6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8d8 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
      return;
 8005a40:	e0b9      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80ab 	beq.w	8005bba <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a6 	beq.w	8005bba <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e4      	bne.n	8005a6e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ac8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e4      	bne.n	8005af0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f85c 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b38:	e03f      	b.n	8005bba <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_IRQHandler+0x5a8>
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 ffe9 	bl	8006b34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b62:	e02d      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    }
    return;
 8005b8c:	e017      	b.n	8005bbe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d012      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x604>
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fdde 	bl	8006768 <UART_EndTransmit_IT>
    return;
 8005bac:	e008      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bae:	bf00      	nop
 8005bb0:	e006      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
    return;
 8005bb2:	bf00      	nop
 8005bb4:	e004      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e002      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
    return;
 8005bbe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bc0:	37e8      	adds	r7, #232	@ 0xe8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop

08005bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c0c:	b08a      	sub	sp, #40	@ 0x28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4ba4      	ldr	r3, [pc, #656]	@ (8005ec8 <UART_SetConfig+0x2c0>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a99      	ldr	r2, [pc, #612]	@ (8005ecc <UART_SetConfig+0x2c4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	4313      	orrs	r3, r2
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a90      	ldr	r2, [pc, #576]	@ (8005ed0 <UART_SetConfig+0x2c8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d126      	bne.n	8005ce0 <UART_SetConfig+0xd8>
 8005c92:	4b90      	ldr	r3, [pc, #576]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d81b      	bhi.n	8005cd8 <UART_SetConfig+0xd0>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0xa0>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cd1 	.word	0x08005cd1
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e116      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc6:	e112      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cce:	e10e      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd6:	e10a      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cde:	e106      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a7c      	ldr	r2, [pc, #496]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d138      	bne.n	8005d5c <UART_SetConfig+0x154>
 8005cea:	4b7a      	ldr	r3, [pc, #488]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d82d      	bhi.n	8005d54 <UART_SetConfig+0x14c>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0xf8>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	08005d55 	.word	0x08005d55
 8005d0c:	08005d55 	.word	0x08005d55
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d55 	.word	0x08005d55
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d3d 	.word	0x08005d3d
 8005d24:	08005d55 	.word	0x08005d55
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	2300      	movs	r3, #0
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e0d8      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e0d4      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e0d0      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e0cc      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5a:	e0c8      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5e      	ldr	r2, [pc, #376]	@ (8005edc <UART_SetConfig+0x2d4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d125      	bne.n	8005db2 <UART_SetConfig+0x1aa>
 8005d66:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d016      	beq.n	8005da2 <UART_SetConfig+0x19a>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d818      	bhi.n	8005daa <UART_SetConfig+0x1a2>
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d00a      	beq.n	8005d92 <UART_SetConfig+0x18a>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d814      	bhi.n	8005daa <UART_SetConfig+0x1a2>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <UART_SetConfig+0x182>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d008      	beq.n	8005d9a <UART_SetConfig+0x192>
 8005d88:	e00f      	b.n	8005daa <UART_SetConfig+0x1a2>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d90:	e0ad      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d92:	2302      	movs	r3, #2
 8005d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d98:	e0a9      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da0:	e0a5      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005da2:	2308      	movs	r3, #8
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da8:	e0a1      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005daa:	2310      	movs	r3, #16
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db0:	e09d      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <UART_SetConfig+0x2d8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d125      	bne.n	8005e08 <UART_SetConfig+0x200>
 8005dbc:	4b45      	ldr	r3, [pc, #276]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc8:	d016      	beq.n	8005df8 <UART_SetConfig+0x1f0>
 8005dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dcc:	d818      	bhi.n	8005e00 <UART_SetConfig+0x1f8>
 8005dce:	2b80      	cmp	r3, #128	@ 0x80
 8005dd0:	d00a      	beq.n	8005de8 <UART_SetConfig+0x1e0>
 8005dd2:	2b80      	cmp	r3, #128	@ 0x80
 8005dd4:	d814      	bhi.n	8005e00 <UART_SetConfig+0x1f8>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <UART_SetConfig+0x1d8>
 8005dda:	2b40      	cmp	r3, #64	@ 0x40
 8005ddc:	d008      	beq.n	8005df0 <UART_SetConfig+0x1e8>
 8005dde:	e00f      	b.n	8005e00 <UART_SetConfig+0x1f8>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e082      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005de8:	2302      	movs	r3, #2
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e07e      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e07a      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e076      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e072      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ee4 <UART_SetConfig+0x2dc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d12a      	bne.n	8005e68 <UART_SetConfig+0x260>
 8005e12:	4b30      	ldr	r3, [pc, #192]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e20:	d01a      	beq.n	8005e58 <UART_SetConfig+0x250>
 8005e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e26:	d81b      	bhi.n	8005e60 <UART_SetConfig+0x258>
 8005e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e2c:	d00c      	beq.n	8005e48 <UART_SetConfig+0x240>
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e32:	d815      	bhi.n	8005e60 <UART_SetConfig+0x258>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <UART_SetConfig+0x238>
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e3c:	d008      	beq.n	8005e50 <UART_SetConfig+0x248>
 8005e3e:	e00f      	b.n	8005e60 <UART_SetConfig+0x258>
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e052      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e04e      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e04a      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e046      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e042      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <UART_SetConfig+0x2c4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d13a      	bne.n	8005ee8 <UART_SetConfig+0x2e0>
 8005e72:	4b18      	ldr	r3, [pc, #96]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e80:	d01a      	beq.n	8005eb8 <UART_SetConfig+0x2b0>
 8005e82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e86:	d81b      	bhi.n	8005ec0 <UART_SetConfig+0x2b8>
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8c:	d00c      	beq.n	8005ea8 <UART_SetConfig+0x2a0>
 8005e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e92:	d815      	bhi.n	8005ec0 <UART_SetConfig+0x2b8>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <UART_SetConfig+0x298>
 8005e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9c:	d008      	beq.n	8005eb0 <UART_SetConfig+0x2a8>
 8005e9e:	e00f      	b.n	8005ec0 <UART_SetConfig+0x2b8>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e022      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e01e      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb6:	e01a      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	e016      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec6:	e012      	b.n	8005eee <UART_SetConfig+0x2e6>
 8005ec8:	efff69f3 	.word	0xefff69f3
 8005ecc:	40008000 	.word	0x40008000
 8005ed0:	40013800 	.word	0x40013800
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40004400 	.word	0x40004400
 8005edc:	40004800 	.word	0x40004800
 8005ee0:	40004c00 	.word	0x40004c00
 8005ee4:	40005000 	.word	0x40005000
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a9f      	ldr	r2, [pc, #636]	@ (8006170 <UART_SetConfig+0x568>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d17a      	bne.n	8005fee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d824      	bhi.n	8005f4a <UART_SetConfig+0x342>
 8005f00:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <UART_SetConfig+0x300>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f4b 	.word	0x08005f4b
 8005f18:	08005f3b 	.word	0x08005f3b
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f4b 	.word	0x08005f4b
 8005f24:	08005f4b 	.word	0x08005f4b
 8005f28:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2c:	f7fd f8a0 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8005f30:	61f8      	str	r0, [r7, #28]
        break;
 8005f32:	e010      	b.n	8005f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f34:	4b8f      	ldr	r3, [pc, #572]	@ (8006174 <UART_SetConfig+0x56c>)
 8005f36:	61fb      	str	r3, [r7, #28]
        break;
 8005f38:	e00d      	b.n	8005f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3a:	f7fd f801 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8005f3e:	61f8      	str	r0, [r7, #28]
        break;
 8005f40:	e009      	b.n	8005f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f46:	61fb      	str	r3, [r7, #28]
        break;
 8005f48:	e005      	b.n	8005f56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80fb 	beq.w	8006154 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d305      	bcc.n	8005f7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d903      	bls.n	8005f82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f80:	e0e8      	b.n	8006154 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2200      	movs	r2, #0
 8005f86:	461c      	mov	r4, r3
 8005f88:	4615      	mov	r5, r2
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	022b      	lsls	r3, r5, #8
 8005f94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f98:	0222      	lsls	r2, r4, #8
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	0849      	lsrs	r1, r1, #1
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	4688      	mov	r8, r1
 8005fa4:	4681      	mov	r9, r0
 8005fa6:	eb12 0a08 	adds.w	sl, r2, r8
 8005faa:	eb43 0b09 	adc.w	fp, r3, r9
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	f7fa f90a 	bl	80001d8 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd2:	d308      	bcc.n	8005fe6 <UART_SetConfig+0x3de>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fda:	d204      	bcs.n	8005fe6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e0b6      	b.n	8006154 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fec:	e0b2      	b.n	8006154 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff6:	d15e      	bne.n	80060b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x44a>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x400>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fd f820 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8006030:	61f8      	str	r0, [r7, #28]
        break;
 8006032:	e014      	b.n	800605e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fd f832 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8006038:	61f8      	str	r0, [r7, #28]
        break;
 800603a:	e010      	b.n	800605e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b4d      	ldr	r3, [pc, #308]	@ (8006174 <UART_SetConfig+0x56c>)
 800603e:	61fb      	str	r3, [r7, #28]
        break;
 8006040:	e00d      	b.n	800605e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fc ff7d 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8006046:	61f8      	str	r0, [r7, #28]
        break;
 8006048:	e009      	b.n	800605e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604e:	61fb      	str	r3, [r7, #28]
        break;
 8006050:	e005      	b.n	800605e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800605c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d077      	beq.n	8006154 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005a      	lsls	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d916      	bls.n	80060ae <UART_SetConfig+0x4a6>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006086:	d212      	bcs.n	80060ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f023 030f 	bic.w	r3, r3, #15
 8006090:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	b29a      	uxth	r2, r3
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	8afa      	ldrh	r2, [r7, #22]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e052      	b.n	8006154 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060b4:	e04e      	b.n	8006154 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d827      	bhi.n	800610e <UART_SetConfig+0x506>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <UART_SetConfig+0x4bc>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7fc ffc2 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 80060ec:	61f8      	str	r0, [r7, #28]
        break;
 80060ee:	e014      	b.n	800611a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fc ffd4 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80060f4:	61f8      	str	r0, [r7, #28]
        break;
 80060f6:	e010      	b.n	800611a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <UART_SetConfig+0x56c>)
 80060fa:	61fb      	str	r3, [r7, #28]
        break;
 80060fc:	e00d      	b.n	800611a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fc ff1f 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8006102:	61f8      	str	r0, [r7, #28]
        break;
 8006104:	e009      	b.n	800611a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610a:	61fb      	str	r3, [r7, #28]
        break;
 800610c:	e005      	b.n	800611a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006118:	bf00      	nop
    }

    if (pclk != 0U)
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085a      	lsrs	r2, r3, #1
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d909      	bls.n	800614e <UART_SetConfig+0x546>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006140:	d205      	bcs.n	800614e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e002      	b.n	8006154 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006160:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006164:	4618      	mov	r0, r3
 8006166:	3728      	adds	r7, #40	@ 0x28
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616e:	bf00      	nop
 8006170:	40008000 	.word	0x40008000
 8006174:	00f42400 	.word	0x00f42400

08006178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01a      	beq.n	800628e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006276:	d10a      	bne.n	800628e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b098      	sub	sp, #96	@ 0x60
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062cc:	f7fb fd5e 	bl	8001d8c <HAL_GetTick>
 80062d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d12e      	bne.n	800633e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f88c 	bl	800640c <UART_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d021      	beq.n	800633e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800630e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006318:	647b      	str	r3, [r7, #68]	@ 0x44
 800631a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800631e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e6      	bne.n	80062fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e062      	b.n	8006404 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d149      	bne.n	80063e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800634c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006354:	2200      	movs	r2, #0
 8006356:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f856 	bl	800640c <UART_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03c      	beq.n	80063e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	623b      	str	r3, [r7, #32]
   return(result);
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800637a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
 8006386:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800638a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e6      	bne.n	8006366 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b8:	61fa      	str	r2, [r7, #28]
 80063ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	617b      	str	r3, [r7, #20]
   return(result);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e011      	b.n	8006404 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3758      	adds	r7, #88	@ 0x58
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641c:	e04f      	b.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006424:	d04b      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fb fcb1 	bl	8001d8c <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <UART_WaitOnFlagUntilTimeout+0x30>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e04e      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d037      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b80      	cmp	r3, #128	@ 0x80
 8006452:	d034      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b40      	cmp	r3, #64	@ 0x40
 8006458:	d031      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d110      	bne.n	800648a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2208      	movs	r2, #8
 800646e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f8ff 	bl	8006674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2208      	movs	r2, #8
 800647a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e029      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006498:	d111      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f8e5 	bl	8006674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e00f      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4013      	ands	r3, r2
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d0a0      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b097      	sub	sp, #92	@ 0x5c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d10e      	bne.n	800653a <UART_Start_Receive_IT+0x52>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <UART_Start_Receive_IT+0x48>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800652a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800652e:	e02d      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	22ff      	movs	r2, #255	@ 0xff
 8006534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006538:	e028      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <UART_Start_Receive_IT+0x76>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <UART_Start_Receive_IT+0x6c>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006552:	e01b      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	227f      	movs	r2, #127	@ 0x7f
 8006558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800655c:	e016      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006566:	d10d      	bne.n	8006584 <UART_Start_Receive_IT+0x9c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <UART_Start_Receive_IT+0x92>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	227f      	movs	r2, #127	@ 0x7f
 8006574:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006578:	e008      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	223f      	movs	r2, #63	@ 0x3f
 800657e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006582:	e003      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2222      	movs	r2, #34	@ 0x22
 8006598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d107      	bne.n	80065ea <UART_Start_Receive_IT+0x102>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a21      	ldr	r2, [pc, #132]	@ (800666c <UART_Start_Receive_IT+0x184>)
 80065e6:	669a      	str	r2, [r3, #104]	@ 0x68
 80065e8:	e002      	b.n	80065f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <UART_Start_Receive_IT+0x188>)
 80065ee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d019      	beq.n	800662c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800660c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e6      	bne.n	80065f8 <UART_Start_Receive_IT+0x110>
 800662a:	e018      	b.n	800665e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	653b      	str	r3, [r7, #80]	@ 0x50
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69f9      	ldr	r1, [r7, #28]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	61bb      	str	r3, [r7, #24]
   return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	375c      	adds	r7, #92	@ 0x5c
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	08006979 	.word	0x08006979
 8006670:	080067bd 	.word	0x080067bd

08006674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b095      	sub	sp, #84	@ 0x54
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40
 800669c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d118      	bne.n	800671c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006730:	bf00      	nop
 8006732:	3754      	adds	r7, #84	@ 0x54
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff fa3e 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	60bb      	str	r3, [r7, #8]
   return(result);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	613b      	str	r3, [r7, #16]
   return(result);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fa0a 	bl	8005bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b4:	bf00      	nop
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b09c      	sub	sp, #112	@ 0x70
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d4:	2b22      	cmp	r3, #34	@ 0x22
 80067d6:	f040 80be 	bne.w	8006956 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067e8:	b2d9      	uxtb	r1, r3
 80067ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f4:	400a      	ands	r2, r1
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 80a3 	bne.w	800696a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006842:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006844:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	667b      	str	r3, [r7, #100]	@ 0x64
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006876:	647a      	str	r2, [r7, #68]	@ 0x44
 8006878:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800687c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a34      	ldr	r2, [pc, #208]	@ (8006974 <UART_RxISR_8BIT+0x1b8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01f      	beq.n	80068e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d018      	beq.n	80068e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	623b      	str	r3, [r7, #32]
   return(result);
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d12e      	bne.n	800694e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	60fb      	str	r3, [r7, #12]
   return(result);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	617b      	str	r3, [r7, #20]
   return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d103      	bne.n	800693e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f952 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800694c:	e00d      	b.n	800696a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa f8e1 	bl	8000b16 <HAL_UART_RxCpltCallback>
}
 8006954:	e009      	b.n	800696a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	8b1b      	ldrh	r3, [r3, #24]
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0208 	orr.w	r2, r2, #8
 8006966:	b292      	uxth	r2, r2
 8006968:	831a      	strh	r2, [r3, #24]
}
 800696a:	bf00      	nop
 800696c:	3770      	adds	r7, #112	@ 0x70
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40008000 	.word	0x40008000

08006978 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b09c      	sub	sp, #112	@ 0x70
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006986:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006990:	2b22      	cmp	r3, #34	@ 0x22
 8006992:	f040 80be 	bne.w	8006b12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800699c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80069aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069ae:	4013      	ands	r3, r2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 80a3 	bne.w	8006b26 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a00:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a34      	ldr	r2, [pc, #208]	@ (8006b30 <UART_RxISR_16BIT+0x1b8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01f      	beq.n	8006aa4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a92:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d12e      	bne.n	8006b0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0310 	bic.w	r3, r3, #16
 8006ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6979      	ldr	r1, [r7, #20]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	d103      	bne.n	8006afa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2210      	movs	r2, #16
 8006af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff f874 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b08:	e00d      	b.n	8006b26 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa f803 	bl	8000b16 <HAL_UART_RxCpltCallback>
}
 8006b10:	e009      	b.n	8006b26 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	8b1b      	ldrh	r3, [r3, #24]
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	b292      	uxth	r2, r2
 8006b24:	831a      	strh	r2, [r3, #24]
}
 8006b26:	bf00      	nop
 8006b28:	3770      	adds	r7, #112	@ 0x70
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40008000 	.word	0x40008000

08006b34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <memset>:
 8006b48:	4402      	add	r2, r0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d100      	bne.n	8006b52 <memset+0xa>
 8006b50:	4770      	bx	lr
 8006b52:	f803 1b01 	strb.w	r1, [r3], #1
 8006b56:	e7f9      	b.n	8006b4c <memset+0x4>

08006b58 <strncmp>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	b16a      	cbz	r2, 8006b78 <strncmp+0x20>
 8006b5c:	3901      	subs	r1, #1
 8006b5e:	1884      	adds	r4, r0, r2
 8006b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d103      	bne.n	8006b74 <strncmp+0x1c>
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d001      	beq.n	8006b74 <strncmp+0x1c>
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	d1f5      	bne.n	8006b60 <strncmp+0x8>
 8006b74:	1ad0      	subs	r0, r2, r3
 8006b76:	bd10      	pop	{r4, pc}
 8006b78:	4610      	mov	r0, r2
 8006b7a:	e7fc      	b.n	8006b76 <strncmp+0x1e>

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bb4 <__libc_init_array+0x38>)
 8006b80:	4c0d      	ldr	r4, [pc, #52]	@ (8006bb8 <__libc_init_array+0x3c>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	2600      	movs	r6, #0
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bbc <__libc_init_array+0x40>)
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bc0 <__libc_init_array+0x44>)
 8006b90:	f000 f818 	bl	8006bc4 <_init>
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	2600      	movs	r6, #0
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08006cbc 	.word	0x08006cbc
 8006bb8:	08006cbc 	.word	0x08006cbc
 8006bbc:	08006cbc 	.word	0x08006cbc
 8006bc0:	08006cc0 	.word	0x08006cc0

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
