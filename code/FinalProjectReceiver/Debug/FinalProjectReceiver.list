
FinalProjectReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800617c  0800617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061c4  080061c4  000071c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080061d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  080061e0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080061e0  000081e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f31  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  0001cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0001fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f03  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027675  00000000  00000000  00022023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161d6  00000000  00000000  00049698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5448  00000000  00000000  0005f86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  00154cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00159dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006164 	.word	0x08006164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006164 	.word	0x08006164

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM5_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	Receiver_irq(GPIO_Pin);
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fd09 	bl	8000f18 <Receiver_irq>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	UART_irq();
 8000516:	f000 fee5 	bl	80012e4 <UART_irq>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
	Timer_handle();
 800052a:	f000 fea5 	bl	8001278 <Timer_handle>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <main>:

int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	HAL_Init();
 800053c:	f000 ff29 	bl	8001392 <HAL_Init>

	SystemClock_Config();
 8000540:	f000 f830 	bl	80005a4 <SystemClock_Config>

	MX_GPIO_Init();
 8000544:	f000 f98c 	bl	8000860 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000548:	f000 f8bc 	bl	80006c4 <MX_TIM2_Init>
	MX_TIM5_Init();
 800054c:	f000 f908 	bl	8000760 <MX_TIM5_Init>
	MX_SPI1_Init();
 8000550:	f000 f87a 	bl	8000648 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000554:	f000 f954 	bl	8000800 <MX_USART2_UART_Init>

	// radio setup
	Receiver_setup(&hspi1);
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <main+0x54>)
 800055a:	f000 fcc9 	bl	8000ef0 <Receiver_setup>

	// uart setup
	UART_setup(&huart2);
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <main+0x58>)
 8000560:	f000 fea6 	bl	80012b0 <UART_setup>

	// timer setup
	HAL_TIM_Base_Start_IT(&htim2);
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <main+0x5c>)
 8000566:	f003 fe23 	bl	80041b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 800056a:	480b      	ldr	r0, [pc, #44]	@ (8000598 <main+0x60>)
 800056c:	f003 fdb8 	bl	80040e0 <HAL_TIM_Base_Start>
	Timer_set_ns_upcounter(&htim5);
 8000570:	4809      	ldr	r0, [pc, #36]	@ (8000598 <main+0x60>)
 8000572:	f000 fe8d 	bl	8001290 <Timer_set_ns_upcounter>

	while (1)
	{
		// callback processing
		Receiver_process(&Shotclock_Radio_recv_callback);
 8000576:	4809      	ldr	r0, [pc, #36]	@ (800059c <main+0x64>)
 8000578:	f000 fcee 	bl	8000f58 <Receiver_process>
		UART_process(&Shotclock_UART_recv_callback);
 800057c:	4808      	ldr	r0, [pc, #32]	@ (80005a0 <main+0x68>)
 800057e:	f000 febd 	bl	80012fc <UART_process>

		// main processing
		Shotclock_process();
 8000582:	f000 fd14 	bl	8000fae <Shotclock_process>
		Receiver_process(&Shotclock_Radio_recv_callback);
 8000586:	bf00      	nop
 8000588:	e7f5      	b.n	8000576 <main+0x3e>
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028
 8000590:	20000124 	.word	0x20000124
 8000594:	2000008c 	.word	0x2000008c
 8000598:	200000d8 	.word	0x200000d8
 800059c:	08000f9b 	.word	0x08000f9b
 80005a0:	08000f85 	.word	0x08000f85

080005a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	@ 0x58
 80005a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	@ 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fdaa 	bl	800610c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ca:	f001 faf3 	bl	8001bb4 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80005d4:	f000 f9d0 	bl	8000978 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fb2a 	bl	8001c60 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000612:	f000 f9b1 	bl	8000978 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fef2 	bl	8002418 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800063a:	f000 f99d 	bl	8000978 <Error_Handler>
	}
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	@ 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_SPI1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_SPI1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000658:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_SPI1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000662:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000666:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_SPI1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_SPI1_Init+0x74>)
 800067e:	2228      	movs	r2, #40	@ 0x28
 8000680:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_SPI1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000696:	2207      	movs	r2, #7
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_SPI1_Init+0x74>)
 80006a8:	f002 fd96 	bl	80031d8 <HAL_SPI_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80006b2:	f000 f961 	bl	8000978 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40013000 	.word	0x40013000

080006c4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <MX_TIM2_Init+0x98>)
 80006e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3999;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <MX_TIM2_Init+0x98>)
 80006ec:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80006f0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_TIM2_Init+0x98>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_TIM2_Init+0x98>)
 80006fa:	2213      	movs	r2, #19
 80006fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_TIM2_Init+0x98>)
 8000700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000704:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_TIM2_Init+0x98>)
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	@ (800075c <MX_TIM2_Init+0x98>)
 800070e:	f003 fc8f 	bl	8004030 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8000718:	f000 f92e 	bl	8000978 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <MX_TIM2_Init+0x98>)
 800072a:	f003 feb8 	bl	800449e <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000734:	f000 f920 	bl	8000978 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_TIM2_Init+0x98>)
 8000746:	f004 f8db 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000750:	f000 f912 	bl	8000978 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000008c 	.word	0x2000008c

08000760 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_TIM5_Init+0x98>)
 8000780:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_TIM5_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 79;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_TIM5_Init+0x98>)
 8000786:	224f      	movs	r2, #79	@ 0x4f
 8000788:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_TIM5_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_TIM5_Init+0x98>)
 8000792:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000796:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_TIM5_Init+0x98>)
 800079a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_TIM5_Init+0x98>)
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <MX_TIM5_Init+0x98>)
 80007a8:	f003 fc42 	bl	8004030 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM5_Init+0x56>
	{
		Error_Handler();
 80007b2:	f000 f8e1 	bl	8000978 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_TIM5_Init+0x98>)
 80007c4:	f003 fe6b 	bl	800449e <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM5_Init+0x72>
	{
		Error_Handler();
 80007ce:	f000 f8d3 	bl	8000978 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_TIM5_Init+0x98>)
 80007e0:	f004 f88e 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM5_Init+0x8e>
	{
		Error_Handler();
 80007ea:	f000 f8c5 	bl	8000978 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000d8 	.word	0x200000d8
 80007fc:	40000c00 	.word	0x40000c00

08000800 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f004 f902 	bl	8004a4c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800084e:	f000 f893 	bl	8000978 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000124 	.word	0x20000124
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b3d      	ldr	r3, [pc, #244]	@ (800096c <MX_GPIO_Init+0x10c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	4a3c      	ldr	r2, [pc, #240]	@ (800096c <MX_GPIO_Init+0x10c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000882:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_GPIO_Init+0x10c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b37      	ldr	r3, [pc, #220]	@ (800096c <MX_GPIO_Init+0x10c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a36      	ldr	r2, [pc, #216]	@ (800096c <MX_GPIO_Init+0x10c>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b34      	ldr	r3, [pc, #208]	@ (800096c <MX_GPIO_Init+0x10c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_GPIO_Init+0x10c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a30      	ldr	r2, [pc, #192]	@ (800096c <MX_GPIO_Init+0x10c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <MX_GPIO_Init+0x10c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c4:	482a      	ldr	r0, [pc, #168]	@ (8000970 <MX_GPIO_Init+0x110>)
 80008c6:	f001 f937 	bl	8001b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	4829      	ldr	r0, [pc, #164]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008d0:	f001 f932 	bl	8001b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 714c 	mov.w	r1, #816	@ 0x330
 80008da:	4825      	ldr	r0, [pc, #148]	@ (8000970 <MX_GPIO_Init+0x110>)
 80008dc:	f001 f92c 	bl	8001b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	481d      	ldr	r0, [pc, #116]	@ (8000970 <MX_GPIO_Init+0x110>)
 80008fa:	f000 ff73 	bl	80017e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4817      	ldr	r0, [pc, #92]	@ (8000974 <MX_GPIO_Init+0x114>)
 8000916:	f000 ff65 	bl	80017e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RCK_Pin nG_Pin SRCK_Pin SIN_Pin */
	GPIO_InitStruct.Pin = RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin;
 800091a:	f44f 734c 	mov.w	r3, #816	@ 0x330
 800091e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000920:	2311      	movs	r3, #17
 8000922:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	480f      	ldr	r0, [pc, #60]	@ (8000970 <MX_GPIO_Init+0x110>)
 8000934:	f000 ff56 	bl	80017e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000940:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <MX_GPIO_Init+0x110>)
 800094e:	f000 ff49 	bl	80017e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2017      	movs	r0, #23
 8000958:	f000 fe8f 	bl	800167a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800095c:	2017      	movs	r0, #23
 800095e:	f000 fea8 	bl	80016b2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400
 8000974:	48000800 	.word	0x48000800

08000978 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <Radio_rx_init>:
static void reuse_last_tx_payload(void);

/* exposed functions */

void Radio_rx_init(channel MHz, air_data_rate bps, SPI_HandleTypeDef *hspi)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	603a      	str	r2, [r7, #0]
 800098e:	80fb      	strh	r3, [r7, #6]
 8000990:	460b      	mov	r3, r1
 8000992:	717b      	strb	r3, [r7, #5]
	spi_handle = hspi;
 8000994:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <Radio_rx_init+0x68>)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	6013      	str	r3, [r2, #0]

    Radio_reset();
 800099a:	f000 f836 	bl	8000a0a <Radio_reset>

    Radio_prx_mode();
 800099e:	f000 f888 	bl	8000ab2 <Radio_prx_mode>
    Radio_power_up();
 80009a2:	f000 f931 	bl	8000c08 <Radio_power_up>
    HAL_Delay(2);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fd68 	bl	800147c <HAL_Delay>


    Radio_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 80009ac:	2020      	movs	r0, #32
 80009ae:	f000 f909 	bl	8000bc4 <Radio_rx_set_payload_widths>

    Radio_set_rf_channel(MHz);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f9b9 	bl	8000d2c <Radio_set_rf_channel>
    Radio_set_rf_air_data_rate(bps);
 80009ba:	797b      	ldrb	r3, [r7, #5]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f9e6 	bl	8000d8e <Radio_set_rf_air_data_rate>
    Radio_set_rf_tx_output_power(_0dBm);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f000 f9c5 	bl	8000d52 <Radio_set_rf_tx_output_power>

    Radio_set_crc_length(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 f932 	bl	8000c32 <Radio_set_crc_length>
    Radio_set_address_widths(5);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 f952 	bl	8000c78 <Radio_set_address_widths>

    Radio_auto_retransmit_count(15);
 80009d4:	200f      	movs	r0, #15
 80009d6:	f000 f95f 	bl	8000c98 <Radio_auto_retransmit_count>
    Radio_auto_retransmit_delay(NRF24L01P_RETRANSMIT_DELAY_US);
 80009da:	20fa      	movs	r0, #250	@ 0xfa
 80009dc:	f000 f97e 	bl	8000cdc <Radio_auto_retransmit_delay>

    ce_high();
 80009e0:	f000 fa16 	bl	8000e10 <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001ac 	.word	0x200001ac

080009f0 <Radio_rx_receive>:

    ce_high();
}

void Radio_rx_receive(uint8_t* rx_payload)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    Radio_read_rx_fifo(rx_payload);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f86f 	bl	8000adc <Radio_read_rx_fifo>
    Radio_clear_rx_dr();
 80009fe:	f000 f8ef 	bl	8000be0 <Radio_clear_rx_dr>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <Radio_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void Radio_reset()
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000a0e:	f000 f9e7 	bl	8000de0 <cs_high>
    ce_low();
 8000a12:	f000 fa09 	bl	8000e28 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000a16:	2108      	movs	r1, #8
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 fa39 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000a1e:	213f      	movs	r1, #63	@ 0x3f
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fa35 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000a26:	2103      	movs	r1, #3
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f000 fa31 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000a2e:	2103      	movs	r1, #3
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 fa2d 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000a36:	2103      	movs	r1, #3
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f000 fa29 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	2005      	movs	r0, #5
 8000a42:	f000 fa25 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000a46:	2107      	movs	r1, #7
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f000 fa21 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000a4e:	217e      	movs	r1, #126	@ 0x7e
 8000a50:	2007      	movs	r0, #7
 8000a52:	f000 fa1d 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000a56:	2100      	movs	r1, #0
 8000a58:	2011      	movs	r0, #17
 8000a5a:	f000 fa19 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2011      	movs	r0, #17
 8000a62:	f000 fa15 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2012      	movs	r0, #18
 8000a6a:	f000 fa11 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2013      	movs	r0, #19
 8000a72:	f000 fa0d 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f000 fa09 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2015      	movs	r0, #21
 8000a82:	f000 fa05 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2016      	movs	r0, #22
 8000a8a:	f000 fa01 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000a8e:	2111      	movs	r1, #17
 8000a90:	2017      	movs	r0, #23
 8000a92:	f000 f9fd 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000a96:	2100      	movs	r1, #0
 8000a98:	201c      	movs	r0, #28
 8000a9a:	f000 f9f9 	bl	8000e90 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	201d      	movs	r0, #29
 8000aa2:	f000 f9f5 	bl	8000e90 <write_register>

    // Reset FIFO
    Radio_flush_rx_fifo();
 8000aa6:	f000 f83f 	bl	8000b28 <Radio_flush_rx_fifo>
    Radio_flush_tx_fifo();
 8000aaa:	f000 f857 	bl	8000b5c <Radio_flush_tx_fifo>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <Radio_prx_mode>:

void Radio_prx_mode()
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f9c1 	bl	8000e40 <read_register>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f9de 	bl	8000e90 <write_register>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Radio_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t Radio_read_rx_fifo(uint8_t* rx_payload)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000ae4:	2361      	movs	r3, #97	@ 0x61
 8000ae6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000ae8:	f000 f986 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <Radio_read_rx_fifo+0x48>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	f107 020e 	add.w	r2, r7, #14
 8000af4:	f107 010f 	add.w	r1, r7, #15
 8000af8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	f002 febb 	bl	800387a <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <Radio_read_rx_fifo+0x48>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f002 fd7b 	bl	800360a <HAL_SPI_Receive>
    cs_high();
 8000b14:	f000 f964 	bl	8000de0 <cs_high>

    return status;
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200001ac 	.word	0x200001ac

08000b28 <Radio_flush_rx_fifo>:

    return status;
}

void Radio_flush_rx_fifo()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000b2e:	23e2      	movs	r3, #226	@ 0xe2
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b32:	f000 f961 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <Radio_flush_rx_fifo+0x30>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	1dba      	adds	r2, r7, #6
 8000b3c:	1df9      	adds	r1, r7, #7
 8000b3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	f002 fe98 	bl	800387a <HAL_SPI_TransmitReceive>
    cs_high();
 8000b4a:	f000 f949 	bl	8000de0 <cs_high>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001ac 	.word	0x200001ac

08000b5c <Radio_flush_tx_fifo>:

void Radio_flush_tx_fifo()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000b62:	23e1      	movs	r3, #225	@ 0xe1
 8000b64:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b66:	f000 f947 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <Radio_flush_tx_fifo+0x30>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	1dba      	adds	r2, r7, #6
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f002 fe7e 	bl	800387a <HAL_SPI_TransmitReceive>
    cs_high();
 8000b7e:	f000 f92f 	bl	8000de0 <cs_high>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001ac 	.word	0x200001ac

08000b90 <Radio_get_status>:

uint8_t Radio_get_status()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000b96:	23ff      	movs	r3, #255	@ 0xff
 8000b98:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b9a:	f000 f92d 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <Radio_get_status+0x30>)
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	1dba      	adds	r2, r7, #6
 8000ba4:	1df9      	adds	r1, r7, #7
 8000ba6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	f002 fe64 	bl	800387a <HAL_SPI_TransmitReceive>
    cs_high();
 8000bb2:	f000 f915 	bl	8000de0 <cs_high>

    return status;
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001ac 	.word	0x200001ac

08000bc4 <Radio_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void Radio_rx_set_payload_widths(widths bytes)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2011      	movs	r0, #17
 8000bd4:	f000 f95c 	bl	8000e90 <write_register>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Radio_clear_rx_dr>:

void Radio_clear_rx_dr()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
    uint8_t new_status = Radio_get_status();
 8000be6:	f7ff ffd3 	bl	8000b90 <Radio_get_status>
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f000 f948 	bl	8000e90 <write_register>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <Radio_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void Radio_power_up()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f916 	bl	8000e40 <read_register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f933 	bl	8000e90 <write_register>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <Radio_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void Radio_set_crc_length(length bytes)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f8ff 	bl	8000e40 <read_register>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d002      	beq.n	8000c52 <Radio_set_crc_length+0x20>
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d005      	beq.n	8000c5c <Radio_set_crc_length+0x2a>
 8000c50:	e009      	b.n	8000c66 <Radio_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f023 0304 	bic.w	r3, r3, #4
 8000c58:	73fb      	strb	r3, [r7, #15]
            break;
 8000c5a:	e004      	b.n	8000c66 <Radio_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	73fb      	strb	r3, [r7, #15]
            break;
 8000c64:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f910 	bl	8000e90 <write_register>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Radio_set_address_widths>:

void Radio_set_address_widths(widths bytes)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	3b02      	subs	r3, #2
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f900 	bl	8000e90 <write_register>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Radio_auto_retransmit_count>:

void Radio_auto_retransmit_count(count cnt)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f000 f8cc 	bl	8000e40 <read_register>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
    v &= 0xF0;                 // keep ARD, clear ARC
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	f023 030f 	bic.w	r3, r3, #15
 8000cb2:	73fb      	strb	r3, [r7, #15]
    v |= (cnt & 0x0F);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f000 f8df 	bl	8000e90 <write_register>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <Radio_auto_retransmit_delay>:

void Radio_auto_retransmit_delay(delay us)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    uint8_t v = read_register(NRF24L01P_REG_SETUP_RETR);
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f000 f8aa 	bl	8000e40 <read_register>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
    v &= 0x0F;                 // keep ARC, clear ARD
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	73fb      	strb	r3, [r7, #15]
    v |= (((us/250) - 1) & 0x0F) << 4;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <Radio_auto_retransmit_delay+0x4c>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, v);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f000 f8b8 	bl	8000e90 <write_register>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	10624dd3 	.word	0x10624dd3

08000d2c <Radio_set_rf_channel>:

void Radio_set_rf_channel(channel MHz)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000d3c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	2005      	movs	r0, #5
 8000d46:	f000 f8a3 	bl	8000e90 <write_register>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <Radio_set_rf_tx_output_power>:

void Radio_set_rf_tx_output_power(output_power dBm)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000d5c:	2006      	movs	r0, #6
 8000d5e:	f000 f86f 	bl	8000e40 <read_register>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f023 0306 	bic.w	r3, r3, #6
 8000d68:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2006      	movs	r0, #6
 8000d82:	f000 f885 	bl	8000e90 <write_register>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <Radio_set_rf_air_data_rate>:

void Radio_set_rf_air_data_rate(air_data_rate bps)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000d98:	2006      	movs	r0, #6
 8000d9a:	f000 f851 	bl	8000e40 <read_register>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000da4:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d00a      	beq.n	8000dc2 <Radio_set_rf_air_data_rate+0x34>
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	dc0e      	bgt.n	8000dce <Radio_set_rf_air_data_rate+0x40>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00b      	beq.n	8000dcc <Radio_set_rf_air_data_rate+0x3e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d10a      	bne.n	8000dce <Radio_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	73fb      	strb	r3, [r7, #15]
            break;
 8000dc0:	e005      	b.n	8000dce <Radio_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	73fb      	strb	r3, [r7, #15]
            break;
 8000dca:	e000      	b.n	8000dce <Radio_set_rf_air_data_rate+0x40>
            break;
 8000dcc:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 f85c 	bl	8000e90 <write_register>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <cs_high>:
    HAL_SPI_Transmit(spi_handle, &cmd, 1, 2000);
    cs_high();
}

static void cs_high()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dea:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <cs_high+0x14>)
 8000dec:	f000 fea4 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	48000400 	.word	0x48000400

08000df8 <cs_low>:

static void cs_low()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e02:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <cs_low+0x14>)
 8000e04:	f000 fe98 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	48000400 	.word	0x48000400

08000e10 <ce_high>:

static void ce_high()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2180      	movs	r1, #128	@ 0x80
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <ce_high+0x14>)
 8000e1a:	f000 fe8d 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	48000800 	.word	0x48000800

08000e28 <ce_low>:

static void ce_low()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <ce_low+0x14>)
 8000e32:	f000 fe81 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	48000800 	.word	0x48000800

08000e40 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000e4e:	f7ff ffd3 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <read_register+0x4c>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f107 020e 	add.w	r2, r7, #14
 8000e5a:	f107 010f 	add.w	r1, r7, #15
 8000e5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	f002 fd08 	bl	800387a <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(spi_handle, &read_val, 1, 2000);
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <read_register+0x4c>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	f107 010d 	add.w	r1, r7, #13
 8000e72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e76:	2201      	movs	r2, #1
 8000e78:	f002 fbc7 	bl	800360a <HAL_SPI_Receive>
    cs_high();
 8000e7c:	f7ff ffb0 	bl	8000de0 <cs_high>

    return read_val;
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001ac 	.word	0x200001ac

08000e90 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000eae:	f7ff ffa3 	bl	8000df8 <cs_low>
    HAL_SPI_TransmitReceive(spi_handle, &command, &status, 1, 2000);
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <write_register+0x5c>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f107 020e 	add.w	r2, r7, #14
 8000eba:	f107 010f 	add.w	r1, r7, #15
 8000ebe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f002 fcd8 	bl	800387a <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(spi_handle, &write_val, 1, 2000);
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <write_register+0x5c>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	f107 010d 	add.w	r1, r7, #13
 8000ed2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f002 fa21 	bl	800331e <HAL_SPI_Transmit>
    cs_high();
 8000edc:	f7ff ff80 	bl	8000de0 <cs_high>

    return write_val;
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001ac 	.word	0x200001ac

08000ef0 <Receiver_setup>:
#include "timer.h"

static volatile int recved;
static uint8_t recved_data[32];

void Receiver_setup(SPI_HandleTypeDef *hspi) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	Radio_rx_init(2500, _1Mbps, hspi);
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	2100      	movs	r1, #0
 8000efc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000f00:	f7ff fd40 	bl	8000984 <Radio_rx_init>
	recved = 0;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <Receiver_setup+0x24>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001b0 	.word	0x200001b0

08000f18 <Receiver_irq>:

void Receiver_irq(uint16_t GPIO_Pin) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	2b40      	cmp	r3, #64	@ 0x40
 8000f26:	d10e      	bne.n	8000f46 <Receiver_irq+0x2e>
		if (recved == 0) {
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <Receiver_irq+0x38>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d106      	bne.n	8000f3e <Receiver_irq+0x26>
			Radio_rx_receive(recved_data);
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <Receiver_irq+0x3c>)
 8000f32:	f7ff fd5d 	bl	80009f0 <Radio_rx_receive>
			recved = 1;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <Receiver_irq+0x38>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
			// discard the packet, we aren't ready for it
			Radio_flush_rx_fifo();
			Radio_clear_rx_dr();
		}
	}
}
 8000f3c:	e003      	b.n	8000f46 <Receiver_irq+0x2e>
			Radio_flush_rx_fifo();
 8000f3e:	f7ff fdf3 	bl	8000b28 <Radio_flush_rx_fifo>
			Radio_clear_rx_dr();
 8000f42:	f7ff fe4d 	bl	8000be0 <Radio_clear_rx_dr>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001b0 	.word	0x200001b0
 8000f54:	200001b4 	.word	0x200001b4

08000f58 <Receiver_process>:

void Receiver_process(void (*commandCallback)(uint8_t *command)) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (recved) {
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <Receiver_process+0x24>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <Receiver_process+0x1c>
		commandCallback(recved_data);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <Receiver_process+0x28>)
 8000f6c:	4798      	blx	r3
		recved = 0;
 8000f6e:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <Receiver_process+0x24>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	}
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001b0 	.word	0x200001b0
 8000f80:	200001b4 	.word	0x200001b4

08000f84 <Shotclock_UART_recv_callback>:
/* Entry points */

// None of these are running in an IRQ context, so you can do blocking code here

// called when a UART character is received
void Shotclock_UART_recv_callback(char c) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]

}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <Shotclock_Radio_recv_callback>:

// called when radio received and has processed a command
// command is 32 bytes
void Shotclock_Radio_recv_callback(uint8_t* command) {
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]

}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <Shotclock_process>:

// called in main while loop
void Shotclock_process() {
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_MspInit+0x44>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_MspInit+0x44>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_SPI_MspInit+0x7c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d128      	bne.n	8001078 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_SPI_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23e0      	movs	r3, #224	@ 0xe0
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001066:	2305      	movs	r3, #5
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f000 fbb6 	bl	80017e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013000 	.word	0x40013000
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001098:	d114      	bne.n	80010c4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201c      	movs	r0, #28
 80010b8:	f000 fadf 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010bc:	201c      	movs	r0, #28
 80010be:	f000 faf8 	bl	80016b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010c2:	e010      	b.n	80010e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_TIM_Base_MspInit+0x6c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_TIM_Base_MspInit+0x68>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000c00 	.word	0x40000c00

080010f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ac      	sub	sp, #176	@ 0xb0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2288      	movs	r2, #136	@ 0x88
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fff7 	bl	800610c <memset>
  if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d143      	bne.n	80011b0 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800112c:	2300      	movs	r3, #0
 800112e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fb93 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001140:	f7ff fc1a 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800114a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001174:	230c      	movs	r3, #12
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f000 fb22 	bl	80017e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2026      	movs	r0, #38	@ 0x26
 80011a6:	f000 fa68 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011aa:	2026      	movs	r0, #38	@ 0x26
 80011ac:	f000 fa81 	bl	80016b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80011b0:	bf00      	nop
 80011b2:	37b0      	adds	r7, #176	@ 0xb0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f911 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}

0800121e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001222:	2040      	movs	r0, #64	@ 0x40
 8001224:	f000 fca0 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM2_IRQHandler+0x10>)
 8001232:	f003 f82d 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000008c 	.word	0x2000008c

08001240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <USART2_IRQHandler+0x10>)
 8001246:	f003 fc9b 	bl	8004b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000124 	.word	0x20000124

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Timer_handle>:

#include "timer.h"

// timer
void Timer_handle(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	//__disable_irq();

	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
 8001282:	bf00      	nop
	{
		if (sTimer[sIndex] != 0)
			sTimer[sIndex]--;
	}
	//__enable_irq();
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <Timer_set_ns_upcounter>:

// delay
static TIM_HandleTypeDef* htim_ns_upcounter = NULL;

void Timer_set_ns_upcounter(TIM_HandleTypeDef* htim) {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	htim_ns_upcounter = htim;
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <Timer_set_ns_upcounter+0x1c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200001d4 	.word	0x200001d4

080012b0 <UART_setup>:
static UART_HandleTypeDef *huart = NULL;
static char recvChar;
static volatile int recved;

/* setup function */
void UART_setup(UART_HandleTypeDef *huartRef) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	huart = huartRef;
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <UART_setup+0x28>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
	recved = 0;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <UART_setup+0x2c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
	recvChar = '\0';
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <UART_setup+0x30>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200001d8 	.word	0x200001d8
 80012dc:	200001e0 	.word	0x200001e0
 80012e0:	200001dc 	.word	0x200001dc

080012e4 <UART_irq>:

/* recv functions */
void UART_irq() {
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	recved = 1;
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <UART_irq+0x14>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	200001e0 	.word	0x200001e0

080012fc <UART_process>:

void UART_process(void (*uartCallback)(char c)) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (recved) {
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <UART_process+0x38>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00e      	beq.n	800132a <UART_process+0x2e>
		uartCallback(recvChar);
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <UART_process+0x3c>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4610      	mov	r0, r2
 8001314:	4798      	blx	r3
		recved = 0;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <UART_process+0x38>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

		// restart callback
		HAL_UART_Receive_IT(huart, (uint8_t *) &recvChar, 1);
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <UART_process+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2201      	movs	r2, #1
 8001322:	4905      	ldr	r1, [pc, #20]	@ (8001338 <UART_process+0x3c>)
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fbdf 	bl	8004ae8 <HAL_UART_Receive_IT>
	}
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001e0 	.word	0x200001e0
 8001338:	200001dc 	.word	0x200001dc
 800133c:	200001d8 	.word	0x200001d8

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff ff86 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f004 fed5 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f8e1 	bl	8000538 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800138c:	200001e8 	.word	0x200001e8

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f961 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f80e 	bl	80013c4 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fe02 	bl	8000fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_InitTick+0x70>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f96d 	bl	80016ce <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d809      	bhi.n	8001414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001408:	f000 f937 	bl	800167a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_InitTick+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e007      	b.n	8001424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e004      	b.n	8001424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e001      	b.n	8001424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	200001e4 	.word	0x200001e4

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200001e4 	.word	0x200001e4

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	@ (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff3e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff8e 	bl	80015b8 <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff31 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d008      	beq.n	8001710 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2204      	movs	r2, #4
 8001702:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e022      	b.n	8001756 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020e 	bic.w	r2, r2, #14
 800171e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001734:	f003 021c 	and.w	r2, r3, #28
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d005      	beq.n	8001786 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2204      	movs	r2, #4
 800177e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e029      	b.n	80017da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020e 	bic.w	r2, r2, #14
 8001794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 021c 	and.w	r2, r3, #28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    }
  }
  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e17f      	b.n	8001af4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8171 	beq.w	8001aee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d005      	beq.n	8001824 <HAL_GPIO_Init+0x40>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d130      	bne.n	8001886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185a:	2201      	movs	r2, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 0201 	and.w	r2, r3, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d118      	bne.n	80018c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d017      	beq.n	8001900 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d123      	bne.n	8001954 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	6939      	ldr	r1, [r7, #16]
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80ac 	beq.w	8001aee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <HAL_GPIO_Init+0x330>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b14 <HAL_GPIO_Init+0x330>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <HAL_GPIO_Init+0x330>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001b18 <HAL_GPIO_Init+0x334>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019d8:	d025      	beq.n	8001a26 <HAL_GPIO_Init+0x242>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b1c <HAL_GPIO_Init+0x338>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01f      	beq.n	8001a22 <HAL_GPIO_Init+0x23e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b20 <HAL_GPIO_Init+0x33c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d019      	beq.n	8001a1e <HAL_GPIO_Init+0x23a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001b24 <HAL_GPIO_Init+0x340>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0x236>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <HAL_GPIO_Init+0x344>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00d      	beq.n	8001a16 <HAL_GPIO_Init+0x232>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b2c <HAL_GPIO_Init+0x348>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x22e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4a      	ldr	r2, [pc, #296]	@ (8001b30 <HAL_GPIO_Init+0x34c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_GPIO_Init+0x22a>
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a26:	2300      	movs	r3, #0
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a38:	4937      	ldr	r1, [pc, #220]	@ (8001b18 <HAL_GPIO_Init+0x334>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a46:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a6a:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a70:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a94:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001abe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae8:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <HAL_GPIO_Init+0x350>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f47f ae78 	bne.w	80017f4 <HAL_GPIO_Init+0x10>
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	48000400 	.word	0x48000400
 8001b20:	48000800 	.word	0x48000800
 8001b24:	48000c00 	.word	0x48000c00
 8001b28:	48001000 	.word	0x48001000
 8001b2c:	48001400 	.word	0x48001400
 8001b30:	48001800 	.word	0x48001800
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcb4 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc2:	d130      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd0:	d038      	beq.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bda:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2232      	movs	r2, #50	@ 0x32
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9b      	lsrs	r3, r3, #18
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf8:	e002      	b.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0c:	d102      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f2      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c20:	d110      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e00f      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d007      	beq.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c3c:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40007000 	.word	0x40007000
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e3ca      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c72:	4b97      	ldr	r3, [pc, #604]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7c:	4b94      	ldr	r3, [pc, #592]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80e4 	beq.w	8001e5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_RCC_OscConfig+0x4a>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	f040 808b 	bne.w	8001db8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f040 8087 	bne.w	8001db8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001caa:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x62>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e3a2      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_RCC_OscConfig+0x7c>
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_OscConfig+0x88>
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d223      	bcs.n	8001d34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd55 	bl	80027a0 <RCC_SetFlashLatencyFromMSIRange>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e383      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d00:	4b73      	ldr	r3, [pc, #460]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a72      	ldr	r2, [pc, #456]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b70      	ldr	r3, [pc, #448]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	496d      	ldr	r1, [pc, #436]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	4968      	ldr	r1, [pc, #416]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
 8001d32:	e025      	b.n	8001d80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d34:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a65      	ldr	r2, [pc, #404]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4960      	ldr	r1, [pc, #384]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	495b      	ldr	r1, [pc, #364]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fd15 	bl	80027a0 <RCC_SetFlashLatencyFromMSIRange>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e343      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d80:	f000 fc4a 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b52      	ldr	r3, [pc, #328]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	4950      	ldr	r1, [pc, #320]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da0:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fb0d 	bl	80013c4 <HAL_InitTick>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d052      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	e327      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d032      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc0:	4b43      	ldr	r3, [pc, #268]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a42      	ldr	r2, [pc, #264]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fb4a 	bl	8001464 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fb46 	bl	8001464 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e310      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df2:	4b37      	ldr	r3, [pc, #220]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a36      	ldr	r2, [pc, #216]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4931      	ldr	r1, [pc, #196]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	492c      	ldr	r1, [pc, #176]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e01a      	b.n	8001e5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a29      	ldr	r2, [pc, #164]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fb17 	bl	8001464 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fb13 	bl	8001464 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e2dd      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x1da>
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d074      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x21a>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d10e      	bne.n	8001e92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d10b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d064      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d160      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e2ba      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x24a>
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e026      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb2:	d115      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x280>
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a02      	ldr	r2, [pc, #8]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	0800617c 	.word	0x0800617c
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	4ba0      	ldr	r3, [pc, #640]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a9f      	ldr	r2, [pc, #636]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b9d      	ldr	r3, [pc, #628]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a9c      	ldr	r2, [pc, #624]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fab0 	bl	8001464 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff faac 	bl	8001464 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e276      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b92      	ldr	r3, [pc, #584]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2a8>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa9c 	bl	8001464 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fa98 	bl	8001464 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e262      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2d0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d060      	beq.n	8002020 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x310>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d116      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x328>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e23f      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b76      	ldr	r3, [pc, #472]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4973      	ldr	r1, [pc, #460]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	e040      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fa57 	bl	8001464 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fa53 	bl	8001464 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e21d      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b62      	ldr	r3, [pc, #392]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	495f      	ldr	r1, [pc, #380]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e018      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fa33 	bl	8001464 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fa2f 	bl	8001464 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1f9      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002014:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203a:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fa0e 	bl	8001464 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fa0a 	bl	8001464 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1d4      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x3ec>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff f9f1 	bl	8001464 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff f9ed 	bl	8001464 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1b7      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a6 	beq.w	8002200 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d0:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f9b4 	bl	8001464 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7ff f9b0 	bl	8001464 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e17a      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d8>
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002136:	e029      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x50c>
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a03      	ldr	r2, [pc, #12]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	4b9c      	ldr	r3, [pc, #624]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	4a9b      	ldr	r2, [pc, #620]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800217c:	4b98      	ldr	r3, [pc, #608]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	4a97      	ldr	r2, [pc, #604]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f966 	bl	8001464 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f962 	bl	8001464 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e12a      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b8b      	ldr	r3, [pc, #556]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ed      	beq.n	800219c <HAL_RCC_OscConfig+0x53c>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f94f 	bl	8001464 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f94b 	bl	8001464 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e113      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e0:	4b7f      	ldr	r3, [pc, #508]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ed      	bne.n	80021ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b7a      	ldr	r3, [pc, #488]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	4a79      	ldr	r2, [pc, #484]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80021fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80fe 	beq.w	8002406 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	2b02      	cmp	r3, #2
 8002210:	f040 80d0 	bne.w	80023b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002214:	4b72      	ldr	r3, [pc, #456]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	429a      	cmp	r2, r3
 8002226:	d130      	bne.n	800228a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	3b01      	subs	r3, #1
 8002234:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d127      	bne.n	800228a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11f      	bne.n	800228a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002254:	2a07      	cmp	r2, #7
 8002256:	bf14      	ite	ne
 8002258:	2201      	movne	r2, #1
 800225a:	2200      	moveq	r2, #0
 800225c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	4293      	cmp	r3, r2
 8002260:	d113      	bne.n	800228a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d109      	bne.n	800228a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d06e      	beq.n	8002368 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d069      	beq.n	8002364 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002290:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800229c:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0ad      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ac:	4b4c      	ldr	r3, [pc, #304]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80022b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7ff f8d4 	bl	8001464 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f8d0 	bl	8001464 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e09a      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d2:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022de:	4b40      	ldr	r3, [pc, #256]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022ee:	3a01      	subs	r2, #1
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022f8:	0212      	lsls	r2, r2, #8
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002300:	0852      	lsrs	r2, r2, #1
 8002302:	3a01      	subs	r2, #1
 8002304:	0552      	lsls	r2, r2, #21
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	0652      	lsls	r2, r2, #25
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002318:	0912      	lsrs	r2, r2, #4
 800231a:	0452      	lsls	r2, r2, #17
 800231c:	430a      	orrs	r2, r1
 800231e:	4930      	ldr	r1, [pc, #192]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002324:	4b2e      	ldr	r3, [pc, #184]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a2a      	ldr	r2, [pc, #168]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233c:	f7ff f892 	bl	8001464 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff f88e 	bl	8001464 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e058      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002362:	e050      	b.n	8002406 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04f      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	4b1d      	ldr	r3, [pc, #116]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d148      	bne.n	8002406 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002374:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800238c:	f7ff f86a 	bl	8001464 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f866 	bl	8001464 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e030      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x734>
 80023b2:	e028      	b.n	8002406 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d023      	beq.n	8002402 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <HAL_RCC_OscConfig+0x780>)
 80023c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff f84d 	bl	8001464 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e00c      	b.n	80023e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff f849 	bl	8001464 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d905      	bls.n	80023e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e013      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_RCC_OscConfig+0x7b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_OscConfig+0x7b0>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4905      	ldr	r1, [pc, #20]	@ (8002410 <HAL_RCC_OscConfig+0x7b0>)
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_RCC_OscConfig+0x7b4>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
 8002400:	e001      	b.n	8002406 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	feeefffc 	.word	0xfeeefffc

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0e7      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b75      	ldr	r3, [pc, #468]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b72      	ldr	r3, [pc, #456]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4970      	ldr	r1, [pc, #448]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b6e      	ldr	r3, [pc, #440]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0cf      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002474:	429a      	cmp	r2, r3
 8002476:	d908      	bls.n	800248a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4960      	ldr	r1, [pc, #384]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d04c      	beq.n	8002530 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d121      	bne.n	80024ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0a6      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e09a      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e08e      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e086      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4943      	ldr	r1, [pc, #268]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002500:	f7fe ffb0 	bl	8001464 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe ffac 	bl	8001464 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e06e      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002548:	429a      	cmp	r2, r3
 800254a:	d208      	bcs.n	800255e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	492b      	ldr	r1, [pc, #172]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255e:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d210      	bcs.n	800258e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 0207 	bic.w	r2, r3, #7
 8002574:	4923      	ldr	r1, [pc, #140]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257c:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <HAL_RCC_ClockConfig+0x1ec>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e036      	b.n	80025fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4918      	ldr	r1, [pc, #96]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4910      	ldr	r1, [pc, #64]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025cc:	f000 f824 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	490b      	ldr	r1, [pc, #44]	@ (800260c <HAL_RCC_ClockConfig+0x1f4>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1f8>)
 80025ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x1fc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fee7 	bl	80013c4 <HAL_InitTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80025fa:	7afb      	ldrb	r3, [r7, #11]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40022000 	.word	0x40022000
 8002608:	40021000 	.word	0x40021000
 800260c:	0800617c 	.word	0x0800617c
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002626:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002630:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x34>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d121      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d11e      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e005      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002668:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002674:	4a2b      	ldr	r2, [pc, #172]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d102      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002690:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x110>)
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e004      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_RCC_GetSysClockFreq+0x114>)
 800269e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d134      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0xa6>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d003      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0xac>
 80026bc:	e005      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c0:	617b      	str	r3, [r7, #20]
      break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_RCC_GetSysClockFreq+0x114>)
 80026c6:	617b      	str	r3, [r7, #20]
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	617b      	str	r3, [r7, #20]
      break;
 80026ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d0:	4b13      	ldr	r3, [pc, #76]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	3301      	adds	r3, #1
 80026dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	0e5b      	lsrs	r3, r3, #25
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	3301      	adds	r3, #1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002710:	69bb      	ldr	r3, [r7, #24]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	08006194 	.word	0x08006194
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	@ (8002770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	0800618c 	.word	0x0800618c

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002778:	f7ff ffda 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0adb      	lsrs	r3, r3, #11
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_RCC_GetPCLK2Freq+0x28>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	0800618c 	.word	0x0800618c

080027a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b8:	f7ff f9ee 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 80027bc:	6178      	str	r0, [r7, #20]
 80027be:	e014      	b.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	4a24      	ldr	r2, [pc, #144]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80027cc:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d8:	f7ff f9de 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 80027dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f0:	d10b      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	@ 0x80
 80027f6:	d919      	bls.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80027fc:	d902      	bls.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027fe:	2302      	movs	r3, #2
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e013      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002804:	2301      	movs	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e010      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b80      	cmp	r3, #128	@ 0x80
 800280e:	d902      	bls.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002810:	2303      	movs	r3, #3
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e00a      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	@ 0x80
 800281a:	d102      	bne.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800281c:	2302      	movs	r3, #2
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e004      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b70      	cmp	r3, #112	@ 0x70
 8002826:	d101      	bne.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 0207 	bic.w	r2, r3, #7
 8002834:	4909      	ldr	r1, [pc, #36]	@ (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002868:	2300      	movs	r3, #0
 800286a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800286c:	2300      	movs	r3, #0
 800286e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002878:	2b00      	cmp	r3, #0
 800287a:	d041      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002880:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002884:	d02a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002886:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800288a:	d824      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800288c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002890:	d008      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002892:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002896:	d81e      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a0:	d010      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a4:	4b86      	ldr	r3, [pc, #536]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a85      	ldr	r2, [pc, #532]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b0:	e015      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fabb 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3320      	adds	r3, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fba6 	bl	800301c <RCCEx_PLLSAI2_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	74fb      	strb	r3, [r7, #19]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e4:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f2:	4973      	ldr	r1, [pc, #460]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d041      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002910:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002914:	d02a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002916:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800291a:	d824      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800291c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002926:	d81e      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002930:	d010      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002932:	e018      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002934:	4b62      	ldr	r3, [pc, #392]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a61      	ldr	r2, [pc, #388]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002940:	e015      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa73 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002952:	e00c      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3320      	adds	r3, #32
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fb5e 	bl	800301c <RCCEx_PLLSAI2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002964:	e003      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	74fb      	strb	r3, [r7, #19]
      break;
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002974:	4b52      	ldr	r3, [pc, #328]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002982:	494f      	ldr	r1, [pc, #316]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a0 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	4a40      	ldr	r2, [pc, #256]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fd40 	bl	8001464 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e6:	e009      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fd3c 	bl	8001464 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	74fb      	strb	r3, [r7, #19]
        break;
 80029fa:	e005      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029fc:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d15c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01f      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d019      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a38:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a58:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fcfb 	bl	8001464 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a70:	e00b      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fcf7 	bl	8001464 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d902      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	74fb      	strb	r3, [r7, #19]
            break;
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ec      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aae:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ab6:	e009      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
 8002abc:	e006      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	4a9d      	ldr	r2, [pc, #628]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aea:	4b98      	ldr	r3, [pc, #608]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af8:	4994      	ldr	r1, [pc, #592]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	f023 020c 	bic.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	498c      	ldr	r1, [pc, #560]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b2e:	4b87      	ldr	r3, [pc, #540]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	4983      	ldr	r1, [pc, #524]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	4b7e      	ldr	r3, [pc, #504]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	497b      	ldr	r1, [pc, #492]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b72:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	4972      	ldr	r1, [pc, #456]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b94:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	496a      	ldr	r1, [pc, #424]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	4961      	ldr	r1, [pc, #388]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	4959      	ldr	r1, [pc, #356]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfa:	4b54      	ldr	r3, [pc, #336]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c08:	4950      	ldr	r1, [pc, #320]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	4948      	ldr	r1, [pc, #288]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	493f      	ldr	r1, [pc, #252]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d028      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c60:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c6e:	4937      	ldr	r1, [pc, #220]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a31      	ldr	r2, [pc, #196]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
 8002c8c:	e011      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f8c8 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbe:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	491f      	ldr	r1, [pc, #124]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cdc:	d106      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce8:	60d3      	str	r3, [r2, #12]
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f899 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02b      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2a:	4908      	ldr	r1, [pc, #32]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a02      	ldr	r2, [pc, #8]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d46:	60d3      	str	r3, [r2, #12]
 8002d48:	e014      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f867 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d8e:	4928      	ldr	r1, [pc, #160]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d9e:	d10d      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f844 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	74bb      	strb	r3, [r7, #18]
 8002dba:	e011      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3320      	adds	r3, #32
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f925 	bl	800301c <RCCEx_PLLSAI2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfa:	490d      	ldr	r1, [pc, #52]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e1e:	4904      	ldr	r1, [pc, #16]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e42:	4b75      	ldr	r3, [pc, #468]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e4e:	4b72      	ldr	r3, [pc, #456]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
       ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e66:	4b6c      	ldr	r3, [pc, #432]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
       ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d047      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x86>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa4>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0x62>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x74>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b60      	ldr	r3, [pc, #384]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4944      	ldr	r1, [pc, #272]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d17d      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f10:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a40      	ldr	r2, [pc, #256]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe faa2 	bl	8001464 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fe fa9e 	bl	8001464 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f38:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ef      	bne.n	8002f24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d160      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f50:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0912      	lsrs	r2, r2, #4
 8002f68:	0452      	lsls	r2, r2, #17
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	492a      	ldr	r1, [pc, #168]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	610b      	str	r3, [r1, #16]
 8002f72:	e027      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d112      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7a:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	0211      	lsls	r1, r2, #8
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6912      	ldr	r2, [r2, #16]
 8002f90:	0852      	lsrs	r2, r2, #1
 8002f92:	3a01      	subs	r2, #1
 8002f94:	0552      	lsls	r2, r2, #21
 8002f96:	430a      	orrs	r2, r1
 8002f98:	491f      	ldr	r1, [pc, #124]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]
 8002f9e:	e011      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fa8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6952      	ldr	r2, [r2, #20]
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0652      	lsls	r2, r2, #25
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4916      	ldr	r1, [pc, #88]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fa48 	bl	8001464 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd6:	e009      	b.n	8002fec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd8:	f7fe fa44 	bl	8001464 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d902      	bls.n	8002fec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8002fea:	e005      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fec:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	4904      	ldr	r1, [pc, #16]	@ (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800302a:	4b6a      	ldr	r3, [pc, #424]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003036:	4b67      	ldr	r3, [pc, #412]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d10d      	bne.n	8003062 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
       ||
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800304e:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
       ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d047      	beq.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	e044      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d018      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x86>
 8003070:	2b03      	cmp	r3, #3
 8003072:	d825      	bhi.n	80030c0 <RCCEx_PLLSAI2_Config+0xa4>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d002      	beq.n	800307e <RCCEx_PLLSAI2_Config+0x62>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d009      	beq.n	8003090 <RCCEx_PLLSAI2_Config+0x74>
 800307c:	e020      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307e:	4b55      	ldr	r3, [pc, #340]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11d      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308e:	e01a      	b.n	80030c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003090:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e013      	b.n	80030ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030a2:	4b4c      	ldr	r3, [pc, #304]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ae:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030be:	e006      	b.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e004      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030d6:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	430b      	orrs	r3, r1
 80030ec:	4939      	ldr	r1, [pc, #228]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d167      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a35      	ldr	r2, [pc, #212]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe f9ae 	bl	8001464 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800310a:	e009      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800310c:	f7fe f9aa 	bl	8001464 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	73fb      	strb	r3, [r7, #15]
        break;
 800311e:	e005      	b.n	800312c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003120:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ef      	bne.n	800310c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14a      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003138:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	0211      	lsls	r1, r2, #8
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	0912      	lsrs	r2, r2, #4
 8003150:	0452      	lsls	r2, r2, #17
 8003152:	430a      	orrs	r2, r1
 8003154:	491f      	ldr	r1, [pc, #124]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	614b      	str	r3, [r1, #20]
 800315a:	e011      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315c:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003164:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6912      	ldr	r2, [r2, #16]
 8003172:	0852      	lsrs	r2, r2, #1
 8003174:	3a01      	subs	r2, #1
 8003176:	0652      	lsls	r2, r2, #25
 8003178:	430a      	orrs	r2, r1
 800317a:	4916      	ldr	r1, [pc, #88]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003180:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe f96a 	bl	8001464 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003194:	f7fe f966 	bl	8001464 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
          break;
 80031a6:	e005      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a8:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4904      	ldr	r1, [pc, #16]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e095      	b.n	8003316 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fa:	d009      	beq.n	8003210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
 8003202:	e005      	b.n	8003210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd feea 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003250:	d902      	bls.n	8003258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e002      	b.n	800325e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003266:	d007      	beq.n	8003278 <HAL_SPI_Init+0xa0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0204 	and.w	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b088      	sub	sp, #32
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332e:	f7fe f899 	bl	8001464 <HAL_GetTick>
 8003332:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d001      	beq.n	8003348 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
 8003346:	e15c      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0x36>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e154      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_SPI_Transmit+0x48>
 8003362:	2302      	movs	r3, #2
 8003364:	e14d      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d10f      	bne.n	80033da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d007      	beq.n	80033f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003400:	d952      	bls.n	80034a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_SPI_Transmit+0xf2>
 800340a:	8b7b      	ldrh	r3, [r7, #26]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d145      	bne.n	800349c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003434:	e032      	b.n	800349c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d112      	bne.n	800346a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	881a      	ldrh	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003468:	e018      	b.n	800349c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346a:	f7fd fffb 	bl	8001464 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d803      	bhi.n	8003482 <HAL_SPI_Transmit+0x164>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003480:	d102      	bne.n	8003488 <HAL_SPI_Transmit+0x16a>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0b2      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1c7      	bne.n	8003436 <HAL_SPI_Transmit+0x118>
 80034a6:	e083      	b.n	80035b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit+0x198>
 80034b0:	8b7b      	ldrh	r3, [r7, #26]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d177      	bne.n	80035a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d912      	bls.n	80034e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b02      	subs	r3, #2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e4:	e05f      	b.n	80035a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800350c:	e04b      	b.n	80035a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d12b      	bne.n	8003574 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d912      	bls.n	800354c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	881a      	ldrh	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003536:	1c9a      	adds	r2, r3, #2
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b02      	subs	r3, #2
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800354a:	e02c      	b.n	80035a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003572:	e018      	b.n	80035a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003574:	f7fd ff76 	bl	8001464 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d803      	bhi.n	800358c <HAL_SPI_Transmit+0x26e>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800358a:	d102      	bne.n	8003592 <HAL_SPI_Transmit+0x274>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e02d      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ae      	bne.n	800350e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fcf5 	bl	8003fa4 <SPI_EndRxTxTransaction>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	e123      	b.n	8003872 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003632:	d112      	bne.n	800365a <HAL_SPI_Receive+0x50>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10e      	bne.n	800365a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2204      	movs	r2, #4
 8003640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f912 	bl	800387a <HAL_SPI_TransmitReceive>
 8003656:	4603      	mov	r3, r0
 8003658:	e10b      	b.n	8003872 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800365a:	f7fd ff03 	bl	8001464 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Receive+0x62>
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e100      	b.n	8003872 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_SPI_Receive+0x74>
 800367a:	2302      	movs	r3, #2
 800367c:	e0f9      	b.n	8003872 <HAL_SPI_Receive+0x268>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2204      	movs	r2, #4
 800368a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d0:	d908      	bls.n	80036e4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	e007      	b.n	80036f4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036fc:	d10f      	bne.n	800371e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800370c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d007      	beq.n	800373c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800373a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003744:	d875      	bhi.n	8003832 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003746:	e037      	b.n	80037b8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d117      	bne.n	8003786 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f103 020c 	add.w	r2, r3, #12
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003784:	e018      	b.n	80037b8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fd fe6d 	bl	8001464 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Receive+0x194>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Receive+0x19a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e05c      	b.n	8003872 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1c1      	bne.n	8003748 <HAL_SPI_Receive+0x13e>
 80037c4:	e03b      	b.n	800383e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d115      	bne.n	8003800 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	b292      	uxth	r2, r2
 80037e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80037fe:	e018      	b.n	8003832 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fd fe30 	bl	8001464 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_Receive+0x20e>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x214>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e01f      	b.n	8003872 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1c3      	bne.n	80037c6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fb56 	bl	8003ef4 <SPI_EndRxTransaction>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003870:	2300      	movs	r3, #0
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b08a      	sub	sp, #40	@ 0x28
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800388c:	f7fd fdea 	bl	8001464 <HAL_GetTick>
 8003890:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003898:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d00c      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x4e>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b4:	d106      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x4a>
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d001      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	e1f3      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_SPI_TransmitReceive+0x60>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_TransmitReceive+0x60>
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1e8      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x72>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e1e1      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d003      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2205      	movs	r2, #5
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	887a      	ldrh	r2, [r7, #2]
 800392e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800394a:	d802      	bhi.n	8003952 <HAL_SPI_TransmitReceive+0xd8>
 800394c:	8abb      	ldrh	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d908      	bls.n	8003964 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e007      	b.n	8003974 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d007      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800399a:	f240 8083 	bls.w	8003aa4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x132>
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d16f      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d0:	e05c      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d11b      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x19e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x19e>
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d113      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d11c      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x1e6>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a60:	f7fd fd00 	bl	8001464 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d80d      	bhi.n	8003a8c <HAL_SPI_TransmitReceive+0x212>
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a76:	d009      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e111      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d19d      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x158>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d197      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x158>
 8003aa2:	e0e5      	b.n	8003c70 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x23a>
 8003aac:	8afb      	ldrh	r3, [r7, #22]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	f040 80d1 	bne.w	8003c56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d912      	bls.n	8003ae4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b02      	subs	r3, #2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ae2:	e0b8      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0a:	e0a4      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d134      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x30a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02f      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x30a>
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12c      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d912      	bls.n	8003b5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b02      	subs	r3, #2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b58:	e012      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d148      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x3aa>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d042      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d923      	bls.n	8003bf2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b02      	subs	r3, #2
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d81f      	bhi.n	8003c20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e016      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f103 020c 	add.w	r2, r3, #12
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c20:	2301      	movs	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c24:	f7fd fc1e 	bl	8001464 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d803      	bhi.n	8003c3c <HAL_SPI_TransmitReceive+0x3c2>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_TransmitReceive+0x3c8>
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e02c      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af55 	bne.w	8003b0c <HAL_SPI_TransmitReceive+0x292>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f47f af4e 	bne.w	8003b0c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f995 	bl	8003fa4 <SPI_EndRxTxTransaction>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00e      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3728      	adds	r7, #40	@ 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc8:	f7fd fbcc 	bl	8001464 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd8:	f7fd fbc4 	bl	8001464 <HAL_GetTick>
 8003cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cde:	4b39      	ldr	r3, [pc, #228]	@ (8003dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	015b      	lsls	r3, r3, #5
 8003ce4:	0d1b      	lsrs	r3, r3, #20
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cee:	e054      	b.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cf6:	d050      	beq.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf8:	f7fd fbb4 	bl	8001464 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d902      	bls.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d13d      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d26:	d111      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d30:	d004      	beq.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3a:	d107      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d54:	d10f      	bne.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e017      	b.n	8003dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d19b      	bne.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000000 	.word	0x20000000

08003dc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dda:	f7fd fb43 	bl	8001464 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dea:	f7fd fb3b 	bl	8001464 <HAL_GetTick>
 8003dee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003df8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00da      	lsls	r2, r3, #3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	0d1b      	lsrs	r3, r3, #20
 8003e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e10:	e060      	b.n	8003ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e18:	d107      	bne.n	8003e2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e30:	d050      	beq.n	8003ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e32:	f7fd fb17 	bl	8001464 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d902      	bls.n	8003e48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d13d      	bne.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e60:	d111      	bne.n	8003e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6a:	d004      	beq.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e74:	d107      	bne.n	8003e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8e:	d10f      	bne.n	8003eb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e010      	b.n	8003ee6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d196      	bne.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3728      	adds	r7, #40	@ 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f08:	d111      	bne.n	8003f2e <SPI_EndRxTransaction+0x3a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f12:	d004      	beq.n	8003f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1c:	d107      	bne.n	8003f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	@ 0x80
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff febd 	bl	8003cb8 <SPI_WaitFlagStateUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e023      	b.n	8003f9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5c:	d11d      	bne.n	8003f9a <SPI_EndRxTransaction+0xa6>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f66:	d004      	beq.n	8003f72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f70:	d113      	bne.n	8003f9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff ff22 	bl	8003dc8 <SPI_WaitFifoStateUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e000      	b.n	8003f9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff ff03 	bl	8003dc8 <SPI_WaitFifoStateUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e027      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	@ 0x80
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff fe68 	bl	8003cb8 <SPI_WaitFlagStateUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e014      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fedc 	bl	8003dc8 <SPI_WaitFifoStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e000      	b.n	8004028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e049      	b.n	80040d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd f816 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fb06 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d001      	beq.n	80040f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e047      	b.n	8004188 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_TIM_Base_Start+0xb4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d018      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1f      	ldr	r2, [pc, #124]	@ (8004198 <HAL_TIM_Base_Start+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1e      	ldr	r2, [pc, #120]	@ (800419c <HAL_TIM_Base_Start+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <HAL_TIM_Base_Start+0xc0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1b      	ldr	r2, [pc, #108]	@ (80041a4 <HAL_TIM_Base_Start+0xc4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIM_Base_Start+0x66>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a19      	ldr	r2, [pc, #100]	@ (80041a8 <HAL_TIM_Base_Start+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d115      	bne.n	8004172 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	4b17      	ldr	r3, [pc, #92]	@ (80041ac <HAL_TIM_Base_Start+0xcc>)
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b06      	cmp	r3, #6
 8004156:	d015      	beq.n	8004184 <HAL_TIM_Base_Start+0xa4>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415e:	d011      	beq.n	8004184 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	e008      	b.n	8004184 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e000      	b.n	8004186 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40013400 	.word	0x40013400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	00010007 	.word	0x00010007

080041b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e04f      	b.n	8004268 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a23      	ldr	r2, [pc, #140]	@ (8004274 <HAL_TIM_Base_Start_IT+0xc4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f2:	d018      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004278 <HAL_TIM_Base_Start_IT+0xc8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1e      	ldr	r2, [pc, #120]	@ (800427c <HAL_TIM_Base_Start_IT+0xcc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1c      	ldr	r2, [pc, #112]	@ (8004280 <HAL_TIM_Base_Start_IT+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1b      	ldr	r2, [pc, #108]	@ (8004284 <HAL_TIM_Base_Start_IT+0xd4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x76>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <HAL_TIM_Base_Start_IT+0xd8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d115      	bne.n	8004252 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b17      	ldr	r3, [pc, #92]	@ (800428c <HAL_TIM_Base_Start_IT+0xdc>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d015      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0xb4>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423e:	d011      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	e008      	b.n	8004264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e000      	b.n	8004266 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	00010007 	.word	0x00010007

08004290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0202 	mvn.w	r2, #2
 80042c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9b2 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9a4 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9b5 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0204 	mvn.w	r2, #4
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f98c 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f97e 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f98f 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01b      	beq.n	800438c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0208 	mvn.w	r2, #8
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2204      	movs	r2, #4
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f966 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f958 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f969 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d020      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0210 	mvn.w	r2, #16
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2208      	movs	r2, #8
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f940 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f932 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f943 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0201 	mvn.w	r2, #1
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc f893 	bl	8000522 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fafd 	bl	8004a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00c      	beq.n	800444e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 faf5 	bl	8004a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8fd 	bl	800466c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0220 	mvn.w	r2, #32
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fabd 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_ConfigClockSource+0x1c>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0b6      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x18a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f6:	d03e      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0xd8>
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044fc:	f200 8087 	bhi.w	800460e <HAL_TIM_ConfigClockSource+0x170>
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004504:	f000 8086 	beq.w	8004614 <HAL_TIM_ConfigClockSource+0x176>
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450c:	d87f      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 800450e:	2b70      	cmp	r3, #112	@ 0x70
 8004510:	d01a      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0xaa>
 8004512:	2b70      	cmp	r3, #112	@ 0x70
 8004514:	d87b      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 8004516:	2b60      	cmp	r3, #96	@ 0x60
 8004518:	d050      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0x11e>
 800451a:	2b60      	cmp	r3, #96	@ 0x60
 800451c:	d877      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 800451e:	2b50      	cmp	r3, #80	@ 0x50
 8004520:	d03c      	beq.n	800459c <HAL_TIM_ConfigClockSource+0xfe>
 8004522:	2b50      	cmp	r3, #80	@ 0x50
 8004524:	d873      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	d058      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x13e>
 800452a:	2b40      	cmp	r3, #64	@ 0x40
 800452c:	d86f      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 800452e:	2b30      	cmp	r3, #48	@ 0x30
 8004530:	d064      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0x15e>
 8004532:	2b30      	cmp	r3, #48	@ 0x30
 8004534:	d86b      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d060      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0x15e>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d867      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x170>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d05c      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0x15e>
 8004542:	2b10      	cmp	r3, #16
 8004544:	d05a      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0x15e>
 8004546:	e062      	b.n	800460e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004558:	f000 f9b2 	bl	80048c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800456a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	609a      	str	r2, [r3, #8]
      break;
 8004574:	e04f      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	f000 f99b 	bl	80048c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004598:	609a      	str	r2, [r3, #8]
      break;
 800459a:	e03c      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a8:	461a      	mov	r2, r3
 80045aa:	f000 f90f 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2150      	movs	r1, #80	@ 0x50
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f968 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80045ba:	e02c      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c8:	461a      	mov	r2, r3
 80045ca:	f000 f92e 	bl	800482a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2160      	movs	r1, #96	@ 0x60
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f958 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80045da:	e01c      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e8:	461a      	mov	r2, r3
 80045ea:	f000 f8ef 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2140      	movs	r1, #64	@ 0x40
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f948 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80045fa:	e00c      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 f93f 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 800460c:	e003      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      break;
 8004612:	e000      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004614:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a46      	ldr	r2, [pc, #280]	@ (80047ac <TIM_Base_SetConfig+0x12c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469e:	d00f      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a43      	ldr	r2, [pc, #268]	@ (80047b0 <TIM_Base_SetConfig+0x130>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a42      	ldr	r2, [pc, #264]	@ (80047b4 <TIM_Base_SetConfig+0x134>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a41      	ldr	r2, [pc, #260]	@ (80047b8 <TIM_Base_SetConfig+0x138>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a40      	ldr	r2, [pc, #256]	@ (80047bc <TIM_Base_SetConfig+0x13c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a35      	ldr	r2, [pc, #212]	@ (80047ac <TIM_Base_SetConfig+0x12c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a32      	ldr	r2, [pc, #200]	@ (80047b0 <TIM_Base_SetConfig+0x130>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a31      	ldr	r2, [pc, #196]	@ (80047b4 <TIM_Base_SetConfig+0x134>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a30      	ldr	r2, [pc, #192]	@ (80047b8 <TIM_Base_SetConfig+0x138>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2f      	ldr	r2, [pc, #188]	@ (80047bc <TIM_Base_SetConfig+0x13c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2e      	ldr	r2, [pc, #184]	@ (80047c0 <TIM_Base_SetConfig+0x140>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <TIM_Base_SetConfig+0x144>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0x9a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <TIM_Base_SetConfig+0x148>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <TIM_Base_SetConfig+0x12c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <TIM_Base_SetConfig+0x13c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <TIM_Base_SetConfig+0x140>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <TIM_Base_SetConfig+0x144>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <TIM_Base_SetConfig+0x148>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
  }
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 030a 	bic.w	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f023 0210 	bic.w	r2, r3, #16
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	031b      	lsls	r3, r3, #12
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 0307 	orr.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004914:	2302      	movs	r3, #2
 8004916:	e068      	b.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2e      	ldr	r2, [pc, #184]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498a:	d018      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a14      	ldr	r2, [pc, #80]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10c      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40014000 	.word	0x40014000

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e040      	b.n	8004ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fb42 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fe52 	bl	800573c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb97 	bl	80051cc <UART_SetConfig>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e01b      	b.n	8004ae0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fed1 	bl	8005880 <UART_CheckIdleState>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d137      	bne.n	8004b70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Receive_IT+0x24>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e030      	b.n	8004b72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_UART_Receive_IT+0x94>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01f      	beq.n	8004b60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d018      	beq.n	8004b60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	461a      	mov	r2, r3
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 ffa0 	bl	8005aac <UART_Start_Receive_IT>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	e000      	b.n	8004b72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3728      	adds	r7, #40	@ 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40008000 	.word	0x40008000

08004b80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b0ba      	sub	sp, #232	@ 0xe8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004baa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004bae:	4013      	ands	r3, r2
 8004bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d115      	bne.n	8004be8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 82ca 	beq.w	8005172 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
      }
      return;
 8004be6:	e2c4      	b.n	8005172 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8117 	beq.w	8004e20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c02:	4b85      	ldr	r3, [pc, #532]	@ (8004e18 <HAL_UART_IRQHandler+0x298>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 810a 	beq.w	8004e20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <HAL_UART_IRQHandler+0xbc>
 8004c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d011      	beq.n	8004c6c <HAL_UART_IRQHandler+0xec>
 8004c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d011      	beq.n	8004c9c <HAL_UART_IRQHandler+0x11c>
 8004c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cce:	f043 0208 	orr.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_UART_IRQHandler+0x18a>
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8230 	beq.w	8005176 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d005      	beq.n	8004d62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04f      	beq.n	8004e02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 ff68 	bl	8005c38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b40      	cmp	r3, #64	@ 0x40
 8004d74:	d141      	bne.n	8004dfa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1d9      	bne.n	8004d76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d013      	beq.n	8004df2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dce:	4a13      	ldr	r2, [pc, #76]	@ (8004e1c <HAL_UART_IRQHandler+0x29c>)
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc fcc3 	bl	8001762 <HAL_DMA_Abort_IT>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d017      	beq.n	8004e12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004dec:	4610      	mov	r0, r2
 8004dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e00f      	b.n	8004e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9d4 	bl	80051a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e00b      	b.n	8004e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9d0 	bl	80051a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e007      	b.n	8004e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9cc 	bl	80051a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004e10:	e1b1      	b.n	8005176 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e12:	bf00      	nop
    return;
 8004e14:	e1af      	b.n	8005176 <HAL_UART_IRQHandler+0x5f6>
 8004e16:	bf00      	nop
 8004e18:	04000120 	.word	0x04000120
 8004e1c:	08005d01 	.word	0x08005d01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 816a 	bne.w	80050fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8163 	beq.w	80050fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 815c 	beq.w	80050fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
 8004e5a:	f040 80d4 	bne.w	8005006 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80ad 	beq.w	8004fce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	f080 80a5 	bcs.w	8004fce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 8086 	bne.w	8004fac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ece:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1da      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004efa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e1      	bne.n	8004eea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e3      	bne.n	8004f26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e4      	bne.n	8004f6c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fc fb9d 	bl	80016e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8f4 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004fcc:	e0d5      	b.n	800517a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	f040 80ce 	bne.w	800517a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	f040 80c5 	bne.w	800517a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8d8 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005004:	e0b9      	b.n	800517a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005012:	b29b      	uxth	r3, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80ab 	beq.w	800517e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a6 	beq.w	800517e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005054:	647b      	str	r3, [r7, #68]	@ 0x44
 8005056:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800505a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e4      	bne.n	8005032 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	623b      	str	r3, [r7, #32]
   return(result);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800508c:	633a      	str	r2, [r7, #48]	@ 0x30
 800508e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e3      	bne.n	8005068 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	617b      	str	r3, [r7, #20]
   return(result);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e4      	bne.n	80050b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f85c 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050fc:	e03f      	b.n	800517e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <HAL_UART_IRQHandler+0x5a8>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800511e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 ffe9 	bl	80060f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005126:	e02d      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01c      	beq.n	8005182 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
    }
    return;
 8005150:	e017      	b.n	8005182 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <HAL_UART_IRQHandler+0x604>
 800515e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fdde 	bl	8005d2c <UART_EndTransmit_IT>
    return;
 8005170:	e008      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
      return;
 8005172:	bf00      	nop
 8005174:	e006      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
    return;
 8005176:	bf00      	nop
 8005178:	e004      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
      return;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
      return;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_UART_IRQHandler+0x604>
    return;
 8005182:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005184:	37e8      	adds	r7, #232	@ 0xe8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop

0800518c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d0:	b08a      	sub	sp, #40	@ 0x28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4ba4      	ldr	r3, [pc, #656]	@ (800548c <UART_SetConfig+0x2c0>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005204:	430b      	orrs	r3, r1
 8005206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a99      	ldr	r2, [pc, #612]	@ (8005490 <UART_SetConfig+0x2c4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005234:	4313      	orrs	r3, r2
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a90      	ldr	r2, [pc, #576]	@ (8005494 <UART_SetConfig+0x2c8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d126      	bne.n	80052a4 <UART_SetConfig+0xd8>
 8005256:	4b90      	ldr	r3, [pc, #576]	@ (8005498 <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b03      	cmp	r3, #3
 8005262:	d81b      	bhi.n	800529c <UART_SetConfig+0xd0>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0xa0>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528d 	.word	0x0800528d
 8005274:	08005285 	.word	0x08005285
 8005278:	08005295 	.word	0x08005295
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e116      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e112      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e10e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e10a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a2:	e106      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7c      	ldr	r2, [pc, #496]	@ (800549c <UART_SetConfig+0x2d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d138      	bne.n	8005320 <UART_SetConfig+0x154>
 80052ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005498 <UART_SetConfig+0x2cc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d82d      	bhi.n	8005318 <UART_SetConfig+0x14c>
 80052bc:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <UART_SetConfig+0xf8>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005319 	.word	0x08005319
 80052cc:	08005319 	.word	0x08005319
 80052d0:	08005319 	.word	0x08005319
 80052d4:	08005309 	.word	0x08005309
 80052d8:	08005319 	.word	0x08005319
 80052dc:	08005319 	.word	0x08005319
 80052e0:	08005319 	.word	0x08005319
 80052e4:	08005301 	.word	0x08005301
 80052e8:	08005319 	.word	0x08005319
 80052ec:	08005319 	.word	0x08005319
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005311 	.word	0x08005311
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fe:	e0d8      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005300:	2302      	movs	r3, #2
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005306:	e0d4      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530e:	e0d0      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005316:	e0cc      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531e:	e0c8      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5e      	ldr	r2, [pc, #376]	@ (80054a0 <UART_SetConfig+0x2d4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d125      	bne.n	8005376 <UART_SetConfig+0x1aa>
 800532a:	4b5b      	ldr	r3, [pc, #364]	@ (8005498 <UART_SetConfig+0x2cc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005334:	2b30      	cmp	r3, #48	@ 0x30
 8005336:	d016      	beq.n	8005366 <UART_SetConfig+0x19a>
 8005338:	2b30      	cmp	r3, #48	@ 0x30
 800533a:	d818      	bhi.n	800536e <UART_SetConfig+0x1a2>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d00a      	beq.n	8005356 <UART_SetConfig+0x18a>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d814      	bhi.n	800536e <UART_SetConfig+0x1a2>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <UART_SetConfig+0x182>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d008      	beq.n	800535e <UART_SetConfig+0x192>
 800534c:	e00f      	b.n	800536e <UART_SetConfig+0x1a2>
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005354:	e0ad      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005356:	2302      	movs	r3, #2
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535c:	e0a9      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800535e:	2304      	movs	r3, #4
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005364:	e0a5      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005366:	2308      	movs	r3, #8
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536c:	e0a1      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800536e:	2310      	movs	r3, #16
 8005370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005374:	e09d      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a4a      	ldr	r2, [pc, #296]	@ (80054a4 <UART_SetConfig+0x2d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d125      	bne.n	80053cc <UART_SetConfig+0x200>
 8005380:	4b45      	ldr	r3, [pc, #276]	@ (8005498 <UART_SetConfig+0x2cc>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005386:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800538a:	2bc0      	cmp	r3, #192	@ 0xc0
 800538c:	d016      	beq.n	80053bc <UART_SetConfig+0x1f0>
 800538e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005390:	d818      	bhi.n	80053c4 <UART_SetConfig+0x1f8>
 8005392:	2b80      	cmp	r3, #128	@ 0x80
 8005394:	d00a      	beq.n	80053ac <UART_SetConfig+0x1e0>
 8005396:	2b80      	cmp	r3, #128	@ 0x80
 8005398:	d814      	bhi.n	80053c4 <UART_SetConfig+0x1f8>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <UART_SetConfig+0x1d8>
 800539e:	2b40      	cmp	r3, #64	@ 0x40
 80053a0:	d008      	beq.n	80053b4 <UART_SetConfig+0x1e8>
 80053a2:	e00f      	b.n	80053c4 <UART_SetConfig+0x1f8>
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053aa:	e082      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053ac:	2302      	movs	r3, #2
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b2:	e07e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ba:	e07a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c2:	e076      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ca:	e072      	b.n	80054b2 <UART_SetConfig+0x2e6>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a35      	ldr	r2, [pc, #212]	@ (80054a8 <UART_SetConfig+0x2dc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d12a      	bne.n	800542c <UART_SetConfig+0x260>
 80053d6:	4b30      	ldr	r3, [pc, #192]	@ (8005498 <UART_SetConfig+0x2cc>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e4:	d01a      	beq.n	800541c <UART_SetConfig+0x250>
 80053e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ea:	d81b      	bhi.n	8005424 <UART_SetConfig+0x258>
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f0:	d00c      	beq.n	800540c <UART_SetConfig+0x240>
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	d815      	bhi.n	8005424 <UART_SetConfig+0x258>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <UART_SetConfig+0x238>
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005400:	d008      	beq.n	8005414 <UART_SetConfig+0x248>
 8005402:	e00f      	b.n	8005424 <UART_SetConfig+0x258>
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540a:	e052      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800540c:	2302      	movs	r3, #2
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005412:	e04e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005414:	2304      	movs	r3, #4
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e04a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800541c:	2308      	movs	r3, #8
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005422:	e046      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005424:	2310      	movs	r3, #16
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542a:	e042      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <UART_SetConfig+0x2c4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d13a      	bne.n	80054ac <UART_SetConfig+0x2e0>
 8005436:	4b18      	ldr	r3, [pc, #96]	@ (8005498 <UART_SetConfig+0x2cc>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005440:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005444:	d01a      	beq.n	800547c <UART_SetConfig+0x2b0>
 8005446:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800544a:	d81b      	bhi.n	8005484 <UART_SetConfig+0x2b8>
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005450:	d00c      	beq.n	800546c <UART_SetConfig+0x2a0>
 8005452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005456:	d815      	bhi.n	8005484 <UART_SetConfig+0x2b8>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <UART_SetConfig+0x298>
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005460:	d008      	beq.n	8005474 <UART_SetConfig+0x2a8>
 8005462:	e00f      	b.n	8005484 <UART_SetConfig+0x2b8>
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546a:	e022      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005472:	e01e      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e01a      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005482:	e016      	b.n	80054b2 <UART_SetConfig+0x2e6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x2e6>
 800548c:	efff69f3 	.word	0xefff69f3
 8005490:	40008000 	.word	0x40008000
 8005494:	40013800 	.word	0x40013800
 8005498:	40021000 	.word	0x40021000
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40004c00 	.word	0x40004c00
 80054a8:	40005000 	.word	0x40005000
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a9f      	ldr	r2, [pc, #636]	@ (8005734 <UART_SetConfig+0x568>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d17a      	bne.n	80055b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d824      	bhi.n	800550e <UART_SetConfig+0x342>
 80054c4:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <UART_SetConfig+0x300>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	080054ff 	.word	0x080054ff
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800550f 	.word	0x0800550f
 80054ec:	08005507 	.word	0x08005507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fd f92a 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80054f4:	61f8      	str	r0, [r7, #28]
        break;
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <UART_SetConfig+0x56c>)
 80054fa:	61fb      	str	r3, [r7, #28]
        break;
 80054fc:	e00d      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fd f88b 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 8005502:	61f8      	str	r0, [r7, #28]
        break;
 8005504:	e009      	b.n	800551a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550a:	61fb      	str	r3, [r7, #28]
        break;
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80fb 	beq.w	8005718 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d305      	bcc.n	800553e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	429a      	cmp	r2, r3
 800553c:	d903      	bls.n	8005546 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005544:	e0e8      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2200      	movs	r2, #0
 800554a:	461c      	mov	r4, r3
 800554c:	4615      	mov	r5, r2
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	022b      	lsls	r3, r5, #8
 8005558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800555c:	0222      	lsls	r2, r4, #8
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0849      	lsrs	r1, r1, #1
 8005564:	2000      	movs	r0, #0
 8005566:	4688      	mov	r8, r1
 8005568:	4681      	mov	r9, r0
 800556a:	eb12 0a08 	adds.w	sl, r2, r8
 800556e:	eb43 0b09 	adc.w	fp, r3, r9
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	4650      	mov	r0, sl
 8005582:	4659      	mov	r1, fp
 8005584:	f7fa fe20 	bl	80001c8 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005596:	d308      	bcc.n	80055aa <UART_SetConfig+0x3de>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559e:	d204      	bcs.n	80055aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e0b6      	b.n	8005718 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055b0:	e0b2      	b.n	8005718 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ba:	d15e      	bne.n	800567a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d828      	bhi.n	8005616 <UART_SetConfig+0x44a>
 80055c4:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <UART_SetConfig+0x400>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005617 	.word	0x08005617
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005617 	.word	0x08005617
 80055e4:	08005617 	.word	0x08005617
 80055e8:	08005617 	.word	0x08005617
 80055ec:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fd f8aa 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e014      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fd f8bc 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 80055fc:	61f8      	str	r0, [r7, #28]
        break;
 80055fe:	e010      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005600:	4b4d      	ldr	r3, [pc, #308]	@ (8005738 <UART_SetConfig+0x56c>)
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e00d      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005606:	f7fd f807 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 800560a:	61f8      	str	r0, [r7, #28]
        break;
 800560c:	e009      	b.n	8005622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005612:	61fb      	str	r3, [r7, #28]
        break;
 8005614:	e005      	b.n	8005622 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d077      	beq.n	8005718 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005a      	lsls	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d916      	bls.n	8005672 <UART_SetConfig+0x4a6>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800564a:	d212      	bcs.n	8005672 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f023 030f 	bic.w	r3, r3, #15
 8005654:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	b29a      	uxth	r2, r3
 8005662:	8afb      	ldrh	r3, [r7, #22]
 8005664:	4313      	orrs	r3, r2
 8005666:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	8afa      	ldrh	r2, [r7, #22]
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e052      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005678:	e04e      	b.n	8005718 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800567e:	2b08      	cmp	r3, #8
 8005680:	d827      	bhi.n	80056d2 <UART_SetConfig+0x506>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <UART_SetConfig+0x4bc>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fd f84c 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80056b0:	61f8      	str	r0, [r7, #28]
        break;
 80056b2:	e014      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd f85e 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 80056b8:	61f8      	str	r0, [r7, #28]
        break;
 80056ba:	e010      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005738 <UART_SetConfig+0x56c>)
 80056be:	61fb      	str	r3, [r7, #28]
        break;
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fc ffa9 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80056c6:	61f8      	str	r0, [r7, #28]
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ce:	61fb      	str	r3, [r7, #28]
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056dc:	bf00      	nop
    }

    if (pclk != 0U)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d019      	beq.n	8005718 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	085a      	lsrs	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d909      	bls.n	8005712 <UART_SetConfig+0x546>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005704:	d205      	bcs.n	8005712 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e002      	b.n	8005718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005724:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	@ 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005732:	bf00      	nop
 8005734:	40008000 	.word	0x40008000
 8005738:	00f42400 	.word	0x00f42400

0800573c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01a      	beq.n	8005852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583a:	d10a      	bne.n	8005852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b098      	sub	sp, #96	@ 0x60
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005890:	f7fb fde8 	bl	8001464 <HAL_GetTick>
 8005894:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d12e      	bne.n	8005902 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f88c 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d021      	beq.n	8005902 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e062      	b.n	80059c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d149      	bne.n	80059a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f856 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d03c      	beq.n	80059a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	623b      	str	r3, [r7, #32]
   return(result);
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005948:	633b      	str	r3, [r7, #48]	@ 0x30
 800594a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800594e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	60fb      	str	r3, [r7, #12]
   return(result);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800597c:	61fa      	str	r2, [r7, #28]
 800597e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	617b      	str	r3, [r7, #20]
   return(result);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e011      	b.n	80059c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3758      	adds	r7, #88	@ 0x58
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e0:	e04f      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e8:	d04b      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fb fd3b 	bl	8001464 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e04e      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d037      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b80      	cmp	r3, #128	@ 0x80
 8005a16:	d034      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b40      	cmp	r3, #64	@ 0x40
 8005a1c:	d031      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d110      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f8ff 	bl	8005c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e029      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a5c:	d111      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f8e5 	bl	8005c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d0a0      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b097      	sub	sp, #92	@ 0x5c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ade:	d10e      	bne.n	8005afe <UART_Start_Receive_IT+0x52>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <UART_Start_Receive_IT+0x48>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005aee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005af2:	e02d      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	22ff      	movs	r2, #255	@ 0xff
 8005af8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005afc:	e028      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <UART_Start_Receive_IT+0x76>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <UART_Start_Receive_IT+0x6c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	22ff      	movs	r2, #255	@ 0xff
 8005b12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b16:	e01b      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	227f      	movs	r2, #127	@ 0x7f
 8005b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b20:	e016      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2a:	d10d      	bne.n	8005b48 <UART_Start_Receive_IT+0x9c>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <UART_Start_Receive_IT+0x92>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	227f      	movs	r2, #127	@ 0x7f
 8005b38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b3c:	e008      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	223f      	movs	r2, #63	@ 0x3f
 8005b42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b46:	e003      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2222      	movs	r2, #34	@ 0x22
 8005b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b80:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9c:	d107      	bne.n	8005bae <UART_Start_Receive_IT+0x102>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a21      	ldr	r2, [pc, #132]	@ (8005c30 <UART_Start_Receive_IT+0x184>)
 8005baa:	669a      	str	r2, [r3, #104]	@ 0x68
 8005bac:	e002      	b.n	8005bb4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	@ (8005c34 <UART_Start_Receive_IT+0x188>)
 8005bb2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d019      	beq.n	8005bf0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bdc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005be0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_Start_Receive_IT+0x110>
 8005bee:	e018      	b.n	8005c22 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f043 0320 	orr.w	r3, r3, #32
 8005c04:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	69f9      	ldr	r1, [r7, #28]
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e6      	bne.n	8005bf0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	375c      	adds	r7, #92	@ 0x5c
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	08005f3d 	.word	0x08005f3d
 8005c34:	08005d81 	.word	0x08005d81

08005c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b095      	sub	sp, #84	@ 0x54
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e6      	bne.n	8005c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d118      	bne.n	8005ce0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cf4:	bf00      	nop
 8005cf6:	3754      	adds	r7, #84	@ 0x54
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fa3e 	bl	80051a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e6      	bne.n	8005d34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fa0a 	bl	800518c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d78:	bf00      	nop
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b09c      	sub	sp, #112	@ 0x70
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d98:	2b22      	cmp	r3, #34	@ 0x22
 8005d9a:	f040 80be 	bne.w	8005f1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005da4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005da8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005dac:	b2d9      	uxtb	r1, r3
 8005dae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	400a      	ands	r2, r1
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 80a3 	bne.w	8005f2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e6      	bne.n	8005de8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3308      	adds	r3, #8
 8005e38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e5      	bne.n	8005e1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a34      	ldr	r2, [pc, #208]	@ (8005f38 <UART_RxISR_8BIT+0x1b8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01f      	beq.n	8005eac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	623b      	str	r3, [r7, #32]
   return(result);
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d12e      	bne.n	8005f12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0310 	bic.w	r3, r3, #16
 8005ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d103      	bne.n	8005f02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff f952 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f10:	e00d      	b.n	8005f2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fa fafb 	bl	800050e <HAL_UART_RxCpltCallback>
}
 8005f18:	e009      	b.n	8005f2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	8b1b      	ldrh	r3, [r3, #24]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0208 	orr.w	r2, r2, #8
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	831a      	strh	r2, [r3, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	3770      	adds	r7, #112	@ 0x70
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40008000 	.word	0x40008000

08005f3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b09c      	sub	sp, #112	@ 0x70
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f54:	2b22      	cmp	r3, #34	@ 0x22
 8005f56:	f040 80be 	bne.w	80060d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005f6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f72:	4013      	ands	r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 80a3 	bne.w	80060ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a34      	ldr	r2, [pc, #208]	@ (80060f4 <UART_RxISR_16BIT+0x1b8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01f      	beq.n	8006068 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	61fb      	str	r3, [r7, #28]
   return(result);
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800604a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006056:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800605a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800606c:	2b01      	cmp	r3, #1
 800606e:	d12e      	bne.n	80060ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	60bb      	str	r3, [r7, #8]
   return(result);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0310 	bic.w	r3, r3, #16
 800608a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e6      	bne.n	8006076 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d103      	bne.n	80060be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2210      	movs	r2, #16
 80060bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff f874 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060cc:	e00d      	b.n	80060ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fa fa1d 	bl	800050e <HAL_UART_RxCpltCallback>
}
 80060d4:	e009      	b.n	80060ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	8b1b      	ldrh	r3, [r3, #24]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0208 	orr.w	r2, r2, #8
 80060e6:	b292      	uxth	r2, r2
 80060e8:	831a      	strh	r2, [r3, #24]
}
 80060ea:	bf00      	nop
 80060ec:	3770      	adds	r7, #112	@ 0x70
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40008000 	.word	0x40008000

080060f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <memset>:
 800610c:	4402      	add	r2, r0
 800610e:	4603      	mov	r3, r0
 8006110:	4293      	cmp	r3, r2
 8006112:	d100      	bne.n	8006116 <memset+0xa>
 8006114:	4770      	bx	lr
 8006116:	f803 1b01 	strb.w	r1, [r3], #1
 800611a:	e7f9      	b.n	8006110 <memset+0x4>

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4d0d      	ldr	r5, [pc, #52]	@ (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	@ (8006158 <__libc_init_array+0x3c>)
 8006122:	1b64      	subs	r4, r4, r5
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2600      	movs	r6, #0
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4d0b      	ldr	r5, [pc, #44]	@ (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	@ (8006160 <__libc_init_array+0x44>)
 8006130:	f000 f818 	bl	8006164 <_init>
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2600      	movs	r6, #0
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	080061cc 	.word	0x080061cc
 8006158:	080061cc 	.word	0x080061cc
 800615c:	080061cc 	.word	0x080061cc
 8006160:	080061d0 	.word	0x080061d0

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
