
ShiftRegisters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006470  08006470  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00007470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006478  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000064  080064dc  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080064dc  0000832c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135b1  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e29  00000000  00000000  0001b645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  0001f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282f0  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001533d  00000000  00000000  00048578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3cf0  00000000  00000000  0005d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001515a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae8  00000000  00000000  001515e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001560d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800600c 	.word	0x0800600c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800600c 	.word	0x0800600c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <App_KeyDisplay_construct>:
#include <string.h>
#include <stdio.h>


App_KeyDisplay App_KeyDisplay_construct()
{
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	// This is the constructor for the application. It initializes the state, the timer
	//  associates with the state and the variables used in the application.
	App_KeyDisplay app;

	app.app_timer = &sTimer[APP_SCREEN_Timer];
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <App_KeyDisplay_construct+0x3c>)
 80005b6:	613b      	str	r3, [r7, #16]
	app.state = INTRO_SCREEN;
 80005b8:	2300      	movs	r3, #0
 80005ba:	733b      	strb	r3, [r7, #12]
	*app.app_timer = INTRO_SCREEN_WAIT;
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005c2:	801a      	strh	r2, [r3, #0]

	app.Numbers_Keys_Pushed = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	82bb      	strh	r3, [r7, #20]
	app.Sum_of_Numbers_Pushed = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	82fb      	strh	r3, [r7, #22]

	return app;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	461c      	mov	r4, r3
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc90      	pop	{r4, r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200001d8 	.word	0x200001d8

080005ec <App_KeyDisplay_loop>:

void App_KeyDisplay_loop(App_KeyDisplay *app_p, HAL *hal_p, UART_HandleTypeDef *huart2_p)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	switch (app_p->state)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d81e      	bhi.n	800063e <App_KeyDisplay_loop+0x52>
 8000600:	a201      	add	r2, pc, #4	@ (adr r2, 8000608 <App_KeyDisplay_loop+0x1c>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	08000619 	.word	0x08000619
 800060c:	08000623 	.word	0x08000623
 8000610:	0800062f 	.word	0x0800062f
 8000614:	0800063d 	.word	0x0800063d
	{
		case INTRO_SCREEN:
			App_KeyDisplay_handleIntroScreen(app_p, huart2_p);
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f000 f842 	bl	80006a4 <App_KeyDisplay_handleIntroScreen>
			break;
 8000620:	e00d      	b.n	800063e <App_KeyDisplay_loop+0x52>

		case PROCESS_SCREEN:
			App_KeyDisplay_HandleProcessScreen(app_p, hal_p, huart2_p);
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f000 f88a 	bl	8000740 <App_KeyDisplay_HandleProcessScreen>
			break;
 800062c:	e007      	b.n	800063e <App_KeyDisplay_loop+0x52>

		case RESULT_SCREEN:
			App_KeyDisplay_HandleResultScreen(app_p, hal_p, huart2_p);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f000 fa2a 	bl	8000a8c <App_KeyDisplay_HandleResultScreen>
			break;
 8000638:	e001      	b.n	800063e <App_KeyDisplay_loop+0x52>
 800063a:	e7ff      	b.n	800063c <App_KeyDisplay_loop+0x50>

		case EXIT_SCREEN:
			while(1)
 800063c:	e7fd      	b.n	800063a <App_KeyDisplay_loop+0x4e>
			;;

	}
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop

08000648 <App_KeyDisplay_ShowIntroScreen>:
/* Callback function for when the app is in the Intro Screen state.
 * It's used to break down the app function into smaller sub functions.
 */

void App_KeyDisplay_ShowIntroScreen(UART_HandleTypeDef *huart2_p)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	char *string1 = "This is a demo system.\n\r";
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <App_KeyDisplay_ShowIntroScreen+0x4c>)
 8000652:	617b      	str	r3, [r7, #20]
	char *string2 = "----------------------\n\r";
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <App_KeyDisplay_ShowIntroScreen+0x50>)
 8000656:	613b      	str	r3, [r7, #16]
	char *string3 = "It will count how many keys are pushed, and calculate their sum.\n\n\r";
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <App_KeyDisplay_ShowIntroScreen+0x54>)
 800065a:	60fb      	str	r3, [r7, #12]
	char *string4 = "Starting in 5 seconds. ";
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <App_KeyDisplay_ShowIntroScreen+0x58>)
 800065e:	60bb      	str	r3, [r7, #8]

	DisplayClear(huart2_p);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 fa51 	bl	8000b08 <DisplayClear>
	DisplayHome(huart2_p);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa60 	bl	8000b2c <DisplayHome>
	DisplayString(huart2_p, string1);
 800066c:	6979      	ldr	r1, [r7, #20]
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 fa6e 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string2);
 8000674:	6939      	ldr	r1, [r7, #16]
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fa6a 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string3);
 800067c:	68f9      	ldr	r1, [r7, #12]
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 fa66 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string4);
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 fa62 	bl	8000b50 <DisplayString>
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	08006024 	.word	0x08006024
 8000698:	08006040 	.word	0x08006040
 800069c:	0800605c 	.word	0x0800605c
 80006a0:	080060a0 	.word	0x080060a0

080006a4 <App_KeyDisplay_handleIntroScreen>:



void App_KeyDisplay_handleIntroScreen(App_KeyDisplay *app_p, UART_HandleTypeDef *huart2_p)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	if (*app_p->app_timer == 0)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d106      	bne.n	80006c6 <App_KeyDisplay_handleIntroScreen+0x22>
	{
		app_p->state = PROCESS_SCREEN;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
		App_KeyDisplay_ShowProcessScreen(app_p, huart2_p);
 80006be:	6839      	ldr	r1, [r7, #0]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f805 	bl	80006d0 <App_KeyDisplay_ShowProcessScreen>
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <App_KeyDisplay_ShowProcessScreen>:


void App_KeyDisplay_ShowProcessScreen(App_KeyDisplay *app_p, UART_HandleTypeDef *huart2_p)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	char *string1 = "This demo calculates two numbers.\n\r";
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <App_KeyDisplay_ShowProcessScreen+0x5c>)
 80006dc:	61fb      	str	r3, [r7, #28]
	char *string2 = "---------------------------------\n\r";
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <App_KeyDisplay_ShowProcessScreen+0x60>)
 80006e0:	61bb      	str	r3, [r7, #24]
	char *string3 = "(1). Count how many keys are pushed.\n\r";
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <App_KeyDisplay_ShowProcessScreen+0x64>)
 80006e4:	617b      	str	r3, [r7, #20]
	char *string4 = "(2). Calculate the sum from all pushed keys.\n\n\r";
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <App_KeyDisplay_ShowProcessScreen+0x68>)
 80006e8:	613b      	str	r3, [r7, #16]
	char *string5 = "Please '*' key to continue or '#' to exit at the end.\n\r";
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <App_KeyDisplay_ShowProcessScreen+0x6c>)
 80006ec:	60fb      	str	r3, [r7, #12]

	DisplayClear(huart2_p);
 80006ee:	6838      	ldr	r0, [r7, #0]
 80006f0:	f000 fa0a 	bl	8000b08 <DisplayClear>
	DisplayHome(huart2_p);
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f000 fa19 	bl	8000b2c <DisplayHome>
	DisplayString(huart2_p, string1);
 80006fa:	69f9      	ldr	r1, [r7, #28]
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f000 fa27 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string2);
 8000702:	69b9      	ldr	r1, [r7, #24]
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 fa23 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string3);
 800070a:	6979      	ldr	r1, [r7, #20]
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fa1f 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string4);
 8000712:	6939      	ldr	r1, [r7, #16]
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f000 fa1b 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string5);
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	6838      	ldr	r0, [r7, #0]
 800071e:	f000 fa17 	bl	8000b50 <DisplayString>

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	080060b8 	.word	0x080060b8
 8000730:	080060dc 	.word	0x080060dc
 8000734:	08006100 	.word	0x08006100
 8000738:	08006128 	.word	0x08006128
 800073c:	08006158 	.word	0x08006158

08000740 <App_KeyDisplay_HandleProcessScreen>:
		AllKeyRestart();
	}
}

void App_KeyDisplay_HandleProcessScreen(App_KeyDisplay *app_p, HAL *hal_p, UART_HandleTypeDef *huart2_p)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a0      	sub	sp, #128	@ 0x80
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]

	char NumberCount1[50], NumberCount2[50];
	char *string1 = "Exiting in 6 seconds... ";
 800074c:	4b91      	ldr	r3, [pc, #580]	@ (8000994 <App_KeyDisplay_HandleProcessScreen+0x254>)
 800074e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	if (Star_first_press == 1)
 8000750:	4b91      	ldr	r3, [pc, #580]	@ (8000998 <App_KeyDisplay_HandleProcessScreen+0x258>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	f040 8179 	bne.w	8000a4c <App_KeyDisplay_HandleProcessScreen+0x30c>
	{
	  if (Key_isPushed(&hal_p->key1))
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fb0d 	bl	8000d7c <Key_isPushed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <App_KeyDisplay_HandleProcessScreen+0x4e>
	  {
		  DisplayString(huart2_p, "1 is pushed.\n\r");
 8000768:	498c      	ldr	r1, [pc, #560]	@ (800099c <App_KeyDisplay_HandleProcessScreen+0x25c>)
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f9f0 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	891b      	ldrh	r3, [r3, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 1;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	895b      	ldrh	r3, [r3, #10]
 8000780:	3301      	adds	r3, #1
 8000782:	b29a      	uxth	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 8000788:	f000 fd9e 	bl	80012c8 <AllKeyRestart>
	     Star_first_press = 1;
		 HAL_UART_Transmit(huart2_p, (uint8_t *)"Start...\n\n\r", 11, HAL_MAX_DELAY);
		 AllKeyRestart();
	  }
	}
}
 800078c:	e172      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key2))
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	330c      	adds	r3, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f000 faf2 	bl	8000d7c <Key_isPushed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d012      	beq.n	80007c4 <App_KeyDisplay_HandleProcessScreen+0x84>
		  DisplayString(huart2_p, "2 is pushed.\n\r");
 800079e:	4980      	ldr	r1, [pc, #512]	@ (80009a0 <App_KeyDisplay_HandleProcessScreen+0x260>)
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f9d5 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	891b      	ldrh	r3, [r3, #8]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 2;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	895b      	ldrh	r3, [r3, #10]
 80007b6:	3302      	adds	r3, #2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 80007be:	f000 fd83 	bl	80012c8 <AllKeyRestart>
}
 80007c2:	e157      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key3))
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3318      	adds	r3, #24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fad7 	bl	8000d7c <Key_isPushed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d012      	beq.n	80007fa <App_KeyDisplay_HandleProcessScreen+0xba>
		  DisplayString(huart2_p, "3 is pushed.\n\r");
 80007d4:	4973      	ldr	r1, [pc, #460]	@ (80009a4 <App_KeyDisplay_HandleProcessScreen+0x264>)
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f9ba 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	891b      	ldrh	r3, [r3, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 3;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	895b      	ldrh	r3, [r3, #10]
 80007ec:	3303      	adds	r3, #3
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 80007f4:	f000 fd68 	bl	80012c8 <AllKeyRestart>
}
 80007f8:	e13c      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key4))
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3324      	adds	r3, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fabc 	bl	8000d7c <Key_isPushed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d012      	beq.n	8000830 <App_KeyDisplay_HandleProcessScreen+0xf0>
		  DisplayString(huart2_p, "4 is pushed.\n\r");
 800080a:	4967      	ldr	r1, [pc, #412]	@ (80009a8 <App_KeyDisplay_HandleProcessScreen+0x268>)
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f99f 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 4;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	895b      	ldrh	r3, [r3, #10]
 8000822:	3304      	adds	r3, #4
 8000824:	b29a      	uxth	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 800082a:	f000 fd4d 	bl	80012c8 <AllKeyRestart>
}
 800082e:	e121      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key5))
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3330      	adds	r3, #48	@ 0x30
 8000834:	4618      	mov	r0, r3
 8000836:	f000 faa1 	bl	8000d7c <Key_isPushed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d012      	beq.n	8000866 <App_KeyDisplay_HandleProcessScreen+0x126>
		  DisplayString(huart2_p, "5 is pushed.\n\r");
 8000840:	495a      	ldr	r1, [pc, #360]	@ (80009ac <App_KeyDisplay_HandleProcessScreen+0x26c>)
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f984 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	891b      	ldrh	r3, [r3, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 5;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	895b      	ldrh	r3, [r3, #10]
 8000858:	3305      	adds	r3, #5
 800085a:	b29a      	uxth	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 8000860:	f000 fd32 	bl	80012c8 <AllKeyRestart>
}
 8000864:	e106      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key6))
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	333c      	adds	r3, #60	@ 0x3c
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa86 	bl	8000d7c <Key_isPushed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d012      	beq.n	800089c <App_KeyDisplay_HandleProcessScreen+0x15c>
		  DisplayString(huart2_p, "6 is pushed.\n\r");
 8000876:	494e      	ldr	r1, [pc, #312]	@ (80009b0 <App_KeyDisplay_HandleProcessScreen+0x270>)
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f969 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	891b      	ldrh	r3, [r3, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	b29a      	uxth	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 6;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	895b      	ldrh	r3, [r3, #10]
 800088e:	3306      	adds	r3, #6
 8000890:	b29a      	uxth	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 8000896:	f000 fd17 	bl	80012c8 <AllKeyRestart>
}
 800089a:	e0eb      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key7))
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3348      	adds	r3, #72	@ 0x48
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fa6b 	bl	8000d7c <Key_isPushed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d012      	beq.n	80008d2 <App_KeyDisplay_HandleProcessScreen+0x192>
		  DisplayString(huart2_p, "7 is pushed.\n\r");
 80008ac:	4941      	ldr	r1, [pc, #260]	@ (80009b4 <App_KeyDisplay_HandleProcessScreen+0x274>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f94e 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	891b      	ldrh	r3, [r3, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 7;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	895b      	ldrh	r3, [r3, #10]
 80008c4:	3307      	adds	r3, #7
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 80008cc:	f000 fcfc 	bl	80012c8 <AllKeyRestart>
}
 80008d0:	e0d0      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key8))
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3354      	adds	r3, #84	@ 0x54
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fa50 	bl	8000d7c <Key_isPushed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d012      	beq.n	8000908 <App_KeyDisplay_HandleProcessScreen+0x1c8>
		  DisplayString(huart2_p, "8 is pushed.\n\r");
 80008e2:	4935      	ldr	r1, [pc, #212]	@ (80009b8 <App_KeyDisplay_HandleProcessScreen+0x278>)
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 f933 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	891b      	ldrh	r3, [r3, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 8;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	895b      	ldrh	r3, [r3, #10]
 80008fa:	3308      	adds	r3, #8
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 8000902:	f000 fce1 	bl	80012c8 <AllKeyRestart>
}
 8000906:	e0b5      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key9))
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3360      	adds	r3, #96	@ 0x60
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fa35 	bl	8000d7c <Key_isPushed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d012      	beq.n	800093e <App_KeyDisplay_HandleProcessScreen+0x1fe>
		  DisplayString(huart2_p, "9 is pushed.\n\r");
 8000918:	4928      	ldr	r1, [pc, #160]	@ (80009bc <App_KeyDisplay_HandleProcessScreen+0x27c>)
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f918 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	891b      	ldrh	r3, [r3, #8]
 8000924:	3301      	adds	r3, #1
 8000926:	b29a      	uxth	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	811a      	strh	r2, [r3, #8]
		  app_p->Sum_of_Numbers_Pushed += 9;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	895b      	ldrh	r3, [r3, #10]
 8000930:	3309      	adds	r3, #9
 8000932:	b29a      	uxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	815a      	strh	r2, [r3, #10]
		  AllKeyRestart();
 8000938:	f000 fcc6 	bl	80012c8 <AllKeyRestart>
}
 800093c:	e09a      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->key0))
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	336c      	adds	r3, #108	@ 0x6c
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fa1a 	bl	8000d7c <Key_isPushed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00c      	beq.n	8000968 <App_KeyDisplay_HandleProcessScreen+0x228>
		  DisplayString(huart2_p, "0 is pushed.\n\r");
 800094e:	491c      	ldr	r1, [pc, #112]	@ (80009c0 <App_KeyDisplay_HandleProcessScreen+0x280>)
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f8fd 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	891b      	ldrh	r3, [r3, #8]
 800095a:	3301      	adds	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	811a      	strh	r2, [r3, #8]
		  AllKeyRestart();
 8000962:	f000 fcb1 	bl	80012c8 <AllKeyRestart>
}
 8000966:	e085      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  else if (Key_isPushed(&hal_p->keyS))
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3378      	adds	r3, #120	@ 0x78
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fa05 	bl	8000d7c <Key_isPushed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d027      	beq.n	80009c8 <App_KeyDisplay_HandleProcessScreen+0x288>
		  DisplayString(huart2_p, "* is pushed.\n\r");
 8000978:	4912      	ldr	r1, [pc, #72]	@ (80009c4 <App_KeyDisplay_HandleProcessScreen+0x284>)
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f8e8 	bl	8000b50 <DisplayString>
		  app_p->Numbers_Keys_Pushed++;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	891b      	ldrh	r3, [r3, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	811a      	strh	r2, [r3, #8]
		  AllKeyRestart();
 800098c:	f000 fc9c 	bl	80012c8 <AllKeyRestart>
}
 8000990:	e070      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
 8000992:	bf00      	nop
 8000994:	080061e8 	.word	0x080061e8
 8000998:	20000080 	.word	0x20000080
 800099c:	08006204 	.word	0x08006204
 80009a0:	08006214 	.word	0x08006214
 80009a4:	08006224 	.word	0x08006224
 80009a8:	08006234 	.word	0x08006234
 80009ac:	08006244 	.word	0x08006244
 80009b0:	08006254 	.word	0x08006254
 80009b4:	08006264 	.word	0x08006264
 80009b8:	08006274 	.word	0x08006274
 80009bc:	08006284 	.word	0x08006284
 80009c0:	08006294 	.word	0x08006294
 80009c4:	080062a4 	.word	0x080062a4
	  else if (Key_isPushed(&hal_p->keyP))
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	3384      	adds	r3, #132	@ 0x84
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f9d5 	bl	8000d7c <Key_isPushed>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d04d      	beq.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  		DisplayClear(huart2_p);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f895 	bl	8000b08 <DisplayClear>
	  		DisplayHome(huart2_p);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f8a4 	bl	8000b2c <DisplayHome>
	  		sprintf(NumberCount1, "Keys entered: %d.\n\r",app_p->Numbers_Keys_Pushed);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	891b      	ldrh	r3, [r3, #8]
 80009e8:	461a      	mov	r2, r3
 80009ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ee:	4923      	ldr	r1, [pc, #140]	@ (8000a7c <App_KeyDisplay_HandleProcessScreen+0x33c>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fe6b 	bl	80056cc <siprintf>
	  		DisplayString(huart2_p, NumberCount1);
 80009f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009fa:	4619      	mov	r1, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8a7 	bl	8000b50 <DisplayString>
	  		sprintf(NumberCount2, "Sum of entered keys: %d.\n\n\n\r",app_p->Sum_of_Numbers_Pushed);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	895b      	ldrh	r3, [r3, #10]
 8000a06:	461a      	mov	r2, r3
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	491c      	ldr	r1, [pc, #112]	@ (8000a80 <App_KeyDisplay_HandleProcessScreen+0x340>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 fe5c 	bl	80056cc <siprintf>
	  		DisplayString(huart2_p, NumberCount2);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f898 	bl	8000b50 <DisplayString>
	  		HAL_UART_Transmit(huart2_p, (uint8_t *)string1, strlen(string1), HAL_MAX_DELAY);
 8000a20:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000a22:	f7ff fbd5 	bl	80001d0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a2e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f003 fd7d 	bl	8004530 <HAL_UART_Transmit>
	  		app_p->state = RESULT_SCREEN;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2202      	movs	r2, #2
 8000a3a:	701a      	strb	r2, [r3, #0]
	  		*app_p->app_timer = RESULT_SCREEN_WAIT;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000a44:	801a      	strh	r2, [r3, #0]
	  	    AllKeyRestart();
 8000a46:	f000 fc3f 	bl	80012c8 <AllKeyRestart>
}
 8000a4a:	e013      	b.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	  if (Key_isPushed(&hal_p->keyS))
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3378      	adds	r3, #120	@ 0x78
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f993 	bl	8000d7c <Key_isPushed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00b      	beq.n	8000a74 <App_KeyDisplay_HandleProcessScreen+0x334>
	     Star_first_press = 1;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <App_KeyDisplay_HandleProcessScreen+0x344>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	801a      	strh	r2, [r3, #0]
		 HAL_UART_Transmit(huart2_p, (uint8_t *)"Start...\n\n\r", 11, HAL_MAX_DELAY);
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a66:	220b      	movs	r2, #11
 8000a68:	4907      	ldr	r1, [pc, #28]	@ (8000a88 <App_KeyDisplay_HandleProcessScreen+0x348>)
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f003 fd60 	bl	8004530 <HAL_UART_Transmit>
		 AllKeyRestart();
 8000a70:	f000 fc2a 	bl	80012c8 <AllKeyRestart>
}
 8000a74:	bf00      	nop
 8000a76:	3780      	adds	r7, #128	@ 0x80
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	080062b4 	.word	0x080062b4
 8000a80:	080062c8 	.word	0x080062c8
 8000a84:	20000080 	.word	0x20000080
 8000a88:	080062e8 	.word	0x080062e8

08000a8c <App_KeyDisplay_HandleResultScreen>:


void App_KeyDisplay_HandleResultScreen(App_KeyDisplay *app_p, HAL *hal_p, UART_HandleTypeDef *huart2_p)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
	if (*app_p->app_timer == 0)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d106      	bne.n	8000ab0 <App_KeyDisplay_HandleResultScreen+0x24>
	{
		app_p->state = EXIT_SCREEN;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
		App_KeyDisplay_ShowExitScreen(app_p, huart2_p);
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f000 f804 	bl	8000ab8 <App_KeyDisplay_ShowExitScreen>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <App_KeyDisplay_ShowExitScreen>:

void App_KeyDisplay_ShowExitScreen(App_KeyDisplay *app_p, UART_HandleTypeDef *huart2_p)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	char *string1 = "Thank you!\n\r";
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <App_KeyDisplay_ShowExitScreen+0x44>)
 8000ac4:	617b      	str	r3, [r7, #20]
	char *string2 = "Have a nice day!\n\n\r";
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <App_KeyDisplay_ShowExitScreen+0x48>)
 8000ac8:	613b      	str	r3, [r7, #16]
	char *string3 = "Please reset (black) button to restart.\n\r";
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <App_KeyDisplay_ShowExitScreen+0x4c>)
 8000acc:	60fb      	str	r3, [r7, #12]

	DisplayClear(huart2_p);
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f000 f81a 	bl	8000b08 <DisplayClear>
	DisplayHome(huart2_p);
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f000 f829 	bl	8000b2c <DisplayHome>
	DisplayString(huart2_p, string1);
 8000ada:	6979      	ldr	r1, [r7, #20]
 8000adc:	6838      	ldr	r0, [r7, #0]
 8000ade:	f000 f837 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string2);
 8000ae2:	6939      	ldr	r1, [r7, #16]
 8000ae4:	6838      	ldr	r0, [r7, #0]
 8000ae6:	f000 f833 	bl	8000b50 <DisplayString>
	DisplayString(huart2_p, string3);
 8000aea:	68f9      	ldr	r1, [r7, #12]
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	f000 f82f 	bl	8000b50 <DisplayString>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	080062f4 	.word	0x080062f4
 8000b00:	08006304 	.word	0x08006304
 8000b04:	08006318 	.word	0x08006318

08000b08 <DisplayClear>:
#include "Timer.h"
#include <string.h>
#include <stdio.h>

void DisplayClear(UART_HandleTypeDef *huart2_p)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(huart2_p, (uint8_t *)clrscr, strlen(clrscr), HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b14:	2204      	movs	r2, #4
 8000b16:	4904      	ldr	r1, [pc, #16]	@ (8000b28 <DisplayClear+0x20>)
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f003 fd09 	bl	8004530 <HAL_UART_Transmit>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08006344 	.word	0x08006344

08000b2c <DisplayHome>:


void DisplayHome(UART_HandleTypeDef *huart2_p)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(huart2_p, (uint8_t *)cursorHome, strlen(cursorHome), HAL_MAX_DELAY);
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <DisplayHome+0x20>)
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f003 fcf7 	bl	8004530 <HAL_UART_Transmit>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	0800634c 	.word	0x0800634c

08000b50 <DisplayString>:

void DisplayString(UART_HandleTypeDef *huart2_p, char *string)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	 HAL_UART_Transmit(huart2_p, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f7ff fb38 	bl	80001d0 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b68:	6839      	ldr	r1, [r7, #0]
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f003 fce0 	bl	8004530 <HAL_UART_Transmit>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_refresh>:
#include <string.h>
#include <stdio.h>


void HAL_refresh(HAL *hal_p)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	Key_refresh(&hal_p->key1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f8e6 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key2);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f8e1 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key3);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3318      	adds	r3, #24
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8dc 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key4);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3324      	adds	r3, #36	@ 0x24
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f8d7 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key5);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3330      	adds	r3, #48	@ 0x30
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f8d2 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key6);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	333c      	adds	r3, #60	@ 0x3c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f8cd 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key7);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3348      	adds	r3, #72	@ 0x48
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f8c8 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key8);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3354      	adds	r3, #84	@ 0x54
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f8c3 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key9);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3360      	adds	r3, #96	@ 0x60
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8be 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->key0);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	336c      	adds	r3, #108	@ 0x6c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f8b9 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->keyS);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3378      	adds	r3, #120	@ 0x78
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f8b4 	bl	8000d54 <Key_refresh>
	Key_refresh(&hal_p->keyP);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3384      	adds	r3, #132	@ 0x84
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f8af 	bl	8000d54 <Key_refresh>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_construct>:


HAL HAL_construct()
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b0aa      	sub	sp, #168	@ 0xa8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6178      	str	r0, [r7, #20]
	// The HAL object will be returned at the end of construction
	HAL hal;

	hal.key1 = Key_Construct(ONE_command);
 8000c06:	463b      	mov	r3, r7
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f88b 	bl	8000d26 <Key_Construct>
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	463a      	mov	r2, r7
 8000c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key2 = Key_Construct(TWO_command);
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f880 	bl	8000d26 <Key_Construct>
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	463a      	mov	r2, r7
 8000c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key3 = Key_Construct(THREE_command);
 8000c32:	463b      	mov	r3, r7
 8000c34:	2108      	movs	r1, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f875 	bl	8000d26 <Key_Construct>
 8000c3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c40:	463a      	mov	r2, r7
 8000c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key4 = Key_Construct(FOUR_command);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f86a 	bl	8000d26 <Key_Construct>
 8000c52:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c56:	463a      	mov	r2, r7
 8000c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key5 = Key_Construct(FIVE_command);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2105      	movs	r1, #5
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f85f 	bl	8000d26 <Key_Construct>
 8000c68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key6 = Key_Construct(SIX_command);
 8000c74:	463b      	mov	r3, r7
 8000c76:	2109      	movs	r1, #9
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f854 	bl	8000d26 <Key_Construct>
 8000c7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c82:	463a      	mov	r2, r7
 8000c84:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key7 = Key_Construct(SEVEN_command);
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f849 	bl	8000d26 <Key_Construct>
 8000c94:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c98:	463a      	mov	r2, r7
 8000c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key8 = Key_Construct(EIGHT_command);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2106      	movs	r1, #6
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f83e 	bl	8000d26 <Key_Construct>
 8000caa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cae:	463a      	mov	r2, r7
 8000cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key9 = Key_Construct(NINE_command);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f833 	bl	8000d26 <Key_Construct>
 8000cc0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000cc4:	463a      	mov	r2, r7
 8000cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.key0 = Key_Construct(ZERO_command);
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2107      	movs	r1, #7
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f828 	bl	8000d26 <Key_Construct>
 8000cd6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cda:	463a      	mov	r2, r7
 8000cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.keyS = Key_Construct(STAR_command);
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f81d 	bl	8000d26 <Key_Construct>
 8000cec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hal.keyP = Key_Construct(POUND_command);
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	210b      	movs	r1, #11
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f812 	bl	8000d26 <Key_Construct>
 8000d02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d06:	463a      	mov	r2, r7
 8000d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	return hal;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	2290      	movs	r2, #144	@ 0x90
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f004 fd2d 	bl	8005778 <memcpy>
}
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	37a8      	adds	r7, #168	@ 0xa8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <Key_Construct>:
#include <stdio.h>



KEY Key_Construct(KEYNAME keyname)
{
 8000d26:	b490      	push	{r4, r7}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70fb      	strb	r3, [r7, #3]
	KEY key;

	key.Key_Name = keyname;  // This is the same name from the Key_Control_struct
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	733b      	strb	r3, [r7, #12]
	key.isPushed = false;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]

	return key;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	461c      	mov	r4, r3
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc90      	pop	{r4, r7}
 8000d52:	4770      	bx	lr

08000d54 <Key_refresh>:


void Key_refresh(KEY *key_p)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	key_p->isPushed = KeyTapPushMap[key_p->Key_Name];
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <Key_refresh+0x24>)
 8000d64:	5c9b      	ldrb	r3, [r3, r2]
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000084 	.word	0x20000084

08000d7c <Key_isPushed>:


bool Key_isPushed(KEY *key_p)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	return key_p->isPushed;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <Keypadscan>:
	}
}


void Keypadscan()
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    unsigned short Temp;

    // Clear all key records
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	80fb      	strh	r3, [r7, #6]
 8000daa:	e007      	b.n	8000dbc <Keypadscan+0x1c>
    {
      sKeyCurrentCol[sIndex] = 0x00;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	4aa5      	ldr	r2, [pc, #660]	@ (8001044 <Keypadscan+0x2a4>)
 8000db0:	2100      	movs	r1, #0
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	3301      	adds	r3, #1
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d9f4      	bls.n	8000dac <Keypadscan+0xc>
    }

    // Read all 3 column
    for (sIndex=0; sIndex<Number_of_Keys; sIndex++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	80fb      	strh	r3, [r7, #6]
 8000dc6:	e0bc      	b.n	8000f42 <Keypadscan+0x1a2>
    {
      GPIOA->ODR &=~(PA4 | PA1 | PA0);
 8000dc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dd2:	f023 0313 	bic.w	r3, r3, #19
 8000dd6:	6153      	str	r3, [r2, #20]
      GPIOA->ODR |= sKeyControl[sIndex].sKeySend;
 8000dd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ddc:	6959      	ldr	r1, [r3, #20]
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	4899      	ldr	r0, [pc, #612]	@ (8001048 <Keypadscan+0x2a8>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4403      	add	r3, r0
 8000dec:	3304      	adds	r3, #4
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6153      	str	r3, [r2, #20]
      //HAL_Delay(0.5);

      switch (sKeyControl[sIndex].sKeyCommand)
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	4993      	ldr	r1, [pc, #588]	@ (8001048 <Keypadscan+0x2a8>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	330a      	adds	r3, #10
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	2b0b      	cmp	r3, #11
 8000e0c:	bf8c      	ite	hi
 8000e0e:	2201      	movhi	r2, #1
 8000e10:	2200      	movls	r2, #0
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8091 	bne.w	8000f3c <Keypadscan+0x19c>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	f240 6266 	movw	r2, #1638	@ 0x666
 8000e24:	401a      	ands	r2, r3
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2201      	movne	r2, #1
 8000e2c:	2200      	moveq	r2, #0
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	d138      	bne.n	8000ea6 <Keypadscan+0x106>
 8000e34:	f640 0288 	movw	r2, #2184	@ 0x888
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2201      	movne	r2, #1
 8000e40:	2200      	moveq	r2, #0
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	d152      	bne.n	8000eee <Keypadscan+0x14e>
 8000e48:	f240 1211 	movw	r2, #273	@ 0x111
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	bf14      	ite	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	2300      	moveq	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d06f      	beq.n	8000f3c <Keypadscan+0x19c>
	  {
      	  case ONE_command:
      	  case TWO_command:
      	  case THREE_command:
      		if (GPIOA->IDR & sKeyControl[sIndex].sKeyRead)
 8000e5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e60:	6919      	ldr	r1, [r3, #16]
 8000e62:	88fa      	ldrh	r2, [r7, #6]
 8000e64:	4878      	ldr	r0, [pc, #480]	@ (8001048 <Keypadscan+0x2a8>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4403      	add	r3, r0
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	400b      	ands	r3, r1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d05e      	beq.n	8000f36 <Keypadscan+0x196>
      		  sKeyCurrentCol[sKeyControl[sIndex].sKeyCol]= sKeyControl[sIndex].sKeyReadTempPos;
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	88f9      	ldrh	r1, [r7, #6]
 8000e7c:	4872      	ldr	r0, [pc, #456]	@ (8001048 <Keypadscan+0x2a8>)
 8000e7e:	460b      	mov	r3, r1
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	440b      	add	r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4403      	add	r3, r0
 8000e88:	3306      	adds	r3, #6
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	496e      	ldr	r1, [pc, #440]	@ (8001048 <Keypadscan+0x2a8>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	4b69      	ldr	r3, [pc, #420]	@ (8001044 <Keypadscan+0x2a4>)
 8000ea0:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
      		break;
 8000ea4:	e047      	b.n	8000f36 <Keypadscan+0x196>
      	  case FIVE_command:
      	  case SIX_command:
      	  case SEVEN_command:
      	  case EIGHT_command:
      	  case NINE_command:
        	if (GPIOC->IDR & sKeyControl[sIndex].sKeyRead)
 8000ea6:	4b69      	ldr	r3, [pc, #420]	@ (800104c <Keypadscan+0x2ac>)
 8000ea8:	6919      	ldr	r1, [r3, #16]
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4866      	ldr	r0, [pc, #408]	@ (8001048 <Keypadscan+0x2a8>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4403      	add	r3, r0
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	400b      	ands	r3, r1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03c      	beq.n	8000f3a <Keypadscan+0x19a>
        	  sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	88f9      	ldrh	r1, [r7, #6]
 8000ec4:	4860      	ldr	r0, [pc, #384]	@ (8001048 <Keypadscan+0x2a8>)
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4403      	add	r3, r0
 8000ed0:	3306      	adds	r3, #6
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	495c      	ldr	r1, [pc, #368]	@ (8001048 <Keypadscan+0x2a8>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	881a      	ldrh	r2, [r3, #0]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <Keypadscan+0x2a4>)
 8000ee8:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
      	    break;
 8000eec:	e025      	b.n	8000f3a <Keypadscan+0x19a>

      	  case STAR_command:
      	  case ZERO_command:
      	  case POUND_command:
      		if (GPIOB->IDR & sKeyControl[sIndex].sKeyRead)
 8000eee:	4b58      	ldr	r3, [pc, #352]	@ (8001050 <Keypadscan+0x2b0>)
 8000ef0:	6919      	ldr	r1, [r3, #16]
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	4854      	ldr	r0, [pc, #336]	@ (8001048 <Keypadscan+0x2a8>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4403      	add	r3, r0
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	400b      	ands	r3, r1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <Keypadscan+0x19c>
      		  sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88f9      	ldrh	r1, [r7, #6]
 8000f0c:	484e      	ldr	r0, [pc, #312]	@ (8001048 <Keypadscan+0x2a8>)
 8000f0e:	460b      	mov	r3, r1
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	440b      	add	r3, r1
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4403      	add	r3, r0
 8000f18:	3306      	adds	r3, #6
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	494a      	ldr	r1, [pc, #296]	@ (8001048 <Keypadscan+0x2a8>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <Keypadscan+0x2a4>)
 8000f30:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000f34:	e002      	b.n	8000f3c <Keypadscan+0x19c>
      		break;
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <Keypadscan+0x19c>
      	    break;
 8000f3a:	bf00      	nop
    for (sIndex=0; sIndex<Number_of_Keys; sIndex++)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	f67f af3f 	bls.w	8000dc8 <Keypadscan+0x28>
	  }
    }

    // Check if a key is steadily read
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	e012      	b.n	8000f76 <Keypadscan+0x1d6>
    {
      if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) && (sKeyCurrentCol[sIndex] != 0x0000))
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4a3c      	ldr	r2, [pc, #240]	@ (8001044 <Keypadscan+0x2a4>)
 8000f54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	493e      	ldr	r1, [pc, #248]	@ (8001054 <Keypadscan+0x2b4>)
 8000f5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d105      	bne.n	8000f70 <Keypadscan+0x1d0>
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	4a37      	ldr	r2, [pc, #220]	@ (8001044 <Keypadscan+0x2a4>)
 8000f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <Keypadscan+0x1de>
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	3301      	adds	r3, #1
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d9e9      	bls.n	8000f50 <Keypadscan+0x1b0>
 8000f7c:	e000      	b.n	8000f80 <Keypadscan+0x1e0>
        break;
 8000f7e:	bf00      	nop
    }

    if (sIndex <Number_of_Cols)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d87b      	bhi.n	800107e <Keypadscan+0x2de>
    {
    	// Check for push on/ push off (Low To High)
    	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	80fb      	strh	r3, [r7, #6]
 8000f8a:	e017      	b.n	8000fbc <Keypadscan+0x21c>
    	{
    		Temp = sKeyCurrentCol[sIndex] ^ sKeyPreviousCol[sIndex];
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <Keypadscan+0x2a4>)
 8000f90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	4930      	ldr	r1, [pc, #192]	@ (8001058 <Keypadscan+0x2b8>)
 8000f98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	80bb      	strh	r3, [r7, #4]
    		sKeyLow2HighCol[sIndex] = (sKeyCurrentCol[sIndex] & Temp);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4a28      	ldr	r2, [pc, #160]	@ (8001044 <Keypadscan+0x2a4>)
 8000fa4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	400a      	ands	r2, r1
 8000fae:	b291      	uxth	r1, r2
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800105c <Keypadscan+0x2bc>)
 8000fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d9e4      	bls.n	8000f8c <Keypadscan+0x1ec>
    	}

    	// Update Previous records
    	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	e00a      	b.n	8000fde <Keypadscan+0x23e>
    	{
    	    sKeyPreviousCol[sIndex] = sKeyCurrentCol[sIndex];
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	491d      	ldr	r1, [pc, #116]	@ (8001044 <Keypadscan+0x2a4>)
 8000fce:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <Keypadscan+0x2b8>)
 8000fd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d9f1      	bls.n	8000fc8 <Keypadscan+0x228>
    	}

       // Find which key is JUST depressed (Low To High)
       for (sIndex=0 ; sIndex<Number_of_Keys; sIndex++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	80fb      	strh	r3, [r7, #6]
 8000fe8:	e045      	b.n	8001076 <Keypadscan+0x2d6>
       {
         if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] & sKeyControl[sIndex].sKeyReadTempPos)
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	4916      	ldr	r1, [pc, #88]	@ (8001048 <Keypadscan+0x2a8>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3306      	adds	r3, #6
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <Keypadscan+0x2bc>)
 8001000:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	4810      	ldr	r0, [pc, #64]	@ (8001048 <Keypadscan+0x2a8>)
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4403      	add	r3, r0
 8001012:	3302      	adds	r3, #2
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	400b      	ands	r3, r1
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d024      	beq.n	8001068 <Keypadscan+0x2c8>
         {
           sKeyIssued = sKeyControl[sIndex].sKeyCommand;
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	4909      	ldr	r1, [pc, #36]	@ (8001048 <Keypadscan+0x2a8>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	330a      	adds	r3, #10
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <Keypadscan+0x2c0>)
 8001032:	801a      	strh	r2, [r3, #0]
           {
              sKeyStatus |= (KeyDetect | KeyLow2High);
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <Keypadscan+0x2c4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	f043 0303 	orr.w	r3, r3, #3
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <Keypadscan+0x2c4>)
 8001040:	801a      	strh	r2, [r3, #0]
              break;
 8001042:	e031      	b.n	80010a8 <Keypadscan+0x308>
 8001044:	20000094 	.word	0x20000094
 8001048:	08006350 	.word	0x08006350
 800104c:	48000800 	.word	0x48000800
 8001050:	48000400 	.word	0x48000400
 8001054:	2000009c 	.word	0x2000009c
 8001058:	200000a4 	.word	0x200000a4
 800105c:	200000ac 	.word	0x200000ac
 8001060:	200000a2 	.word	0x200000a2
 8001064:	20000090 	.word	0x20000090
           }
         }
         else
           sKeyIssued = 0xFFFF;
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <Keypadscan+0x344>)
 800106a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800106e:	801a      	strh	r2, [r3, #0]
       for (sIndex=0 ; sIndex<Number_of_Keys; sIndex++)
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	3301      	adds	r3, #1
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	2b0b      	cmp	r3, #11
 800107a:	d9b6      	bls.n	8000fea <Keypadscan+0x24a>
 800107c:	e014      	b.n	80010a8 <Keypadscan+0x308>
       }
    }
    else
    {
      sKeyStatus &= ~(KeyDetect | KeyLow2High);
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <Keypadscan+0x348>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <Keypadscan+0x348>)
 800108a:	801a      	strh	r2, [r3, #0]

      for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	e007      	b.n	80010a2 <Keypadscan+0x302>
       	  sKeyPreviousCol[sIndex] = 0;
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4a15      	ldr	r2, [pc, #84]	@ (80010ec <Keypadscan+0x34c>)
 8001096:	2100      	movs	r1, #0
 8001098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	3301      	adds	r3, #1
 80010a0:	80fb      	strh	r3, [r7, #6]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d9f4      	bls.n	8001092 <Keypadscan+0x2f2>
    }


    // Transfer Current reading to debounced reading
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	80fb      	strh	r3, [r7, #6]
 80010ac:	e00f      	b.n	80010ce <Keypadscan+0x32e>
    {
      sKeyDebouncedCol[sIndex] = sKeyCurrentCol[sIndex];
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	490f      	ldr	r1, [pc, #60]	@ (80010f0 <Keypadscan+0x350>)
 80010b4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <Keypadscan+0x354>)
 80010ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      sKeyLow2HighCol[sIndex] = 0;
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <Keypadscan+0x358>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	3301      	adds	r3, #1
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d9ec      	bls.n	80010ae <Keypadscan+0x30e>
    }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200000a2 	.word	0x200000a2
 80010e8:	20000090 	.word	0x20000090
 80010ec:	200000a4 	.word	0x200000a4
 80010f0:	20000094 	.word	0x20000094
 80010f4:	2000009c 	.word	0x2000009c
 80010f8:	200000ac 	.word	0x200000ac

080010fc <KeypadProcess>:


void KeypadProcess()
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
	unsigned short sIndex;

	if ((sKeyStatus & KeyDetect) && (sKeyIssued != 0xFFFF))
 8001102:	4b6d      	ldr	r3, [pc, #436]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80ce 	beq.w	80012ac <KeypadProcess+0x1b0>
 8001110:	4b6a      	ldr	r3, [pc, #424]	@ (80012bc <KeypadProcess+0x1c0>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001118:	4293      	cmp	r3, r2
 800111a:	f000 80c7 	beq.w	80012ac <KeypadProcess+0x1b0>
	{
		switch (sKeyIssued)
 800111e:	4b67      	ldr	r3, [pc, #412]	@ (80012bc <KeypadProcess+0x1c0>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	2b0b      	cmp	r3, #11
 8001124:	f200 8094 	bhi.w	8001250 <KeypadProcess+0x154>
 8001128:	a201      	add	r2, pc, #4	@ (adr r2, 8001130 <KeypadProcess+0x34>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001161 	.word	0x08001161
 8001134:	08001175 	.word	0x08001175
 8001138:	08001189 	.word	0x08001189
 800113c:	0800119d 	.word	0x0800119d
 8001140:	080011b1 	.word	0x080011b1
 8001144:	080011c5 	.word	0x080011c5
 8001148:	080011d9 	.word	0x080011d9
 800114c:	080011ed 	.word	0x080011ed
 8001150:	08001201 	.word	0x08001201
 8001154:	08001215 	.word	0x08001215
 8001158:	08001229 	.word	0x08001229
 800115c:	0800123d 	.word	0x0800123d
	    {
	    	case ONE_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001160:	4b55      	ldr	r3, [pc, #340]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d073      	beq.n	8001254 <KeypadProcess+0x158>
	    			KeyTapPushMap[ONE_command] = 1;
 800116c:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <KeypadProcess+0x1c4>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
	    		break;
 8001172:	e06f      	b.n	8001254 <KeypadProcess+0x158>
	    	}
	        case FOUR_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001174:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d06b      	beq.n	8001258 <KeypadProcess+0x15c>
	    			KeyTapPushMap[FOUR_command] = 1;
 8001180:	4b4f      	ldr	r3, [pc, #316]	@ (80012c0 <KeypadProcess+0x1c4>)
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
	    		break;
 8001186:	e067      	b.n	8001258 <KeypadProcess+0x15c>
	    	}

	        case SEVEN_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001188:	4b4b      	ldr	r3, [pc, #300]	@ (80012b8 <KeypadProcess+0x1bc>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d063      	beq.n	800125c <KeypadProcess+0x160>
	    			KeyTapPushMap[SEVEN_command] = 1;
 8001194:	4b4a      	ldr	r3, [pc, #296]	@ (80012c0 <KeypadProcess+0x1c4>)
 8001196:	2201      	movs	r2, #1
 8001198:	709a      	strb	r2, [r3, #2]

	    		break;
 800119a:	e05f      	b.n	800125c <KeypadProcess+0x160>
	    	}

	        case STAR_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 800119c:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <KeypadProcess+0x1bc>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <KeypadProcess+0x164>
	    			KeyTapPushMap[STAR_command] = 1;
 80011a8:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <KeypadProcess+0x1c4>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	70da      	strb	r2, [r3, #3]
	    		break;
 80011ae:	e057      	b.n	8001260 <KeypadProcess+0x164>
	    	}

	        case TWO_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 80011b0:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <KeypadProcess+0x1bc>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d053      	beq.n	8001264 <KeypadProcess+0x168>
	    			KeyTapPushMap[TWO_command] = 1;
 80011bc:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <KeypadProcess+0x1c4>)
 80011be:	2201      	movs	r2, #1
 80011c0:	711a      	strb	r2, [r3, #4]
	    		break;
 80011c2:	e04f      	b.n	8001264 <KeypadProcess+0x168>
	    	}

	        case FIVE_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 80011c4:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <KeypadProcess+0x1bc>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d04b      	beq.n	8001268 <KeypadProcess+0x16c>
	    			KeyTapPushMap[FIVE_command] = 1;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <KeypadProcess+0x1c4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	715a      	strb	r2, [r3, #5]

	    		break;
 80011d6:	e047      	b.n	8001268 <KeypadProcess+0x16c>
	    	}

	        case EIGHT_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 80011d8:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <KeypadProcess+0x1bc>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d043      	beq.n	800126c <KeypadProcess+0x170>
	    			KeyTapPushMap[EIGHT_command] = 1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <KeypadProcess+0x1c4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	719a      	strb	r2, [r3, #6]
	    		break;
 80011ea:	e03f      	b.n	800126c <KeypadProcess+0x170>
	    	}

	        case ZERO_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 80011ec:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <KeypadProcess+0x1bc>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d03b      	beq.n	8001270 <KeypadProcess+0x174>
	    			KeyTapPushMap[ZERO_command] = 1;
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <KeypadProcess+0x1c4>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	71da      	strb	r2, [r3, #7]
	    		break;
 80011fe:	e037      	b.n	8001270 <KeypadProcess+0x174>
	    	}

	        case THREE_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d033      	beq.n	8001274 <KeypadProcess+0x178>
	    			KeyTapPushMap[THREE_command] = 1;
 800120c:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <KeypadProcess+0x1c4>)
 800120e:	2201      	movs	r2, #1
 8001210:	721a      	strb	r2, [r3, #8]
	    		break;
 8001212:	e02f      	b.n	8001274 <KeypadProcess+0x178>
	    	}

	        case SIX_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d02b      	beq.n	8001278 <KeypadProcess+0x17c>
	    			KeyTapPushMap[SIX_command] = 1;
 8001220:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <KeypadProcess+0x1c4>)
 8001222:	2201      	movs	r2, #1
 8001224:	725a      	strb	r2, [r3, #9]
	    		break;
 8001226:	e027      	b.n	8001278 <KeypadProcess+0x17c>
	    	}

	        case NINE_command:
	    	{
	    		if (sKeyStatus & KeyLow2High)
 8001228:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <KeypadProcess+0x1bc>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <KeypadProcess+0x180>
	    			KeyTapPushMap[NINE_command] = 1;
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <KeypadProcess+0x1c4>)
 8001236:	2201      	movs	r2, #1
 8001238:	729a      	strb	r2, [r3, #10]
	    		break;
 800123a:	e01f      	b.n	800127c <KeypadProcess+0x180>
	    	}

	        case POUND_command:
	        {
	        	if (sKeyStatus & KeyLow2High)
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <KeypadProcess+0x1bc>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01b      	beq.n	8001280 <KeypadProcess+0x184>
	    			KeyTapPushMap[POUND_command] = 1;
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <KeypadProcess+0x1c4>)
 800124a:	2201      	movs	r2, #1
 800124c:	72da      	strb	r2, [r3, #11]
	        	break;
 800124e:	e017      	b.n	8001280 <KeypadProcess+0x184>
	        }

            default:
            	break;
 8001250:	bf00      	nop
 8001252:	e016      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001254:	bf00      	nop
 8001256:	e014      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001258:	bf00      	nop
 800125a:	e012      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 800125c:	bf00      	nop
 800125e:	e010      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001260:	bf00      	nop
 8001262:	e00e      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001264:	bf00      	nop
 8001266:	e00c      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001268:	bf00      	nop
 800126a:	e00a      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 800126c:	bf00      	nop
 800126e:	e008      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001270:	bf00      	nop
 8001272:	e006      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001274:	bf00      	nop
 8001276:	e004      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <KeypadProcess+0x186>
	    		break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <KeypadProcess+0x186>
	        	break;
 8001280:	bf00      	nop
        }

		sKeyStatus &= ~(KeyDetect | KeyLow2High );
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <KeypadProcess+0x1bc>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <KeypadProcess+0x1bc>)
 800128e:	801a      	strh	r2, [r3, #0]

		// Clear all Low-2-High and High-2-Low records
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e007      	b.n	80012a6 <KeypadProcess+0x1aa>
		  sKeyLow2HighCol[sIndex] = 0x0000;
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <KeypadProcess+0x1c8>)
 800129a:	2100      	movs	r1, #0
 800129c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (sIndex=0; sIndex<Number_of_Cols; sIndex++)
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	3301      	adds	r3, #1
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d9f4      	bls.n	8001296 <KeypadProcess+0x19a>
	}
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000090 	.word	0x20000090
 80012bc:	200000a2 	.word	0x200000a2
 80012c0:	20000084 	.word	0x20000084
 80012c4:	200000ac 	.word	0x200000ac

080012c8 <AllKeyRestart>:

void AllKeyRestart()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i=0; i<12; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	e006      	b.n	80012e2 <AllKeyRestart+0x1a>
		KeyTapPushMap[i] = false;
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <AllKeyRestart+0x30>)
 80012d8:	2100      	movs	r1, #0
 80012da:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<12; i++)
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	3301      	adds	r3, #1
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	2b0b      	cmp	r3, #11
 80012e6:	d9f5      	bls.n	80012d4 <AllKeyRestart+0xc>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000084 	.word	0x20000084

080012fc <HAL_TIM_PeriodElapsedCallback>:
		0x00, // 6
		0x00, // 7
};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	Timer_handle();
 8001304:	f000 fc58 	bl	8001bb8 <Timer_handle>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0ac      	sub	sp, #176	@ 0xb0
 8001314:	af00      	add	r7, sp, #0

	HAL_Init();
 8001316:	f000 fcc8 	bl	8001caa <HAL_Init>

	SystemClock_Config();
 800131a:	f000 f865 	bl	80013e8 <SystemClock_Config>

	MX_GPIO_Init();
 800131e:	f000 f983 	bl	8001628 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001322:	f000 f8b3 	bl	800148c <MX_TIM2_Init>
	MX_TIM5_Init();
 8001326:	f000 f8ff 	bl	8001528 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800132a:	f000 f94d 	bl	80015c8 <MX_USART2_UART_Init>

	// timer setup
	HAL_TIM_Base_Start_IT(&htim2);
 800132e:	4829      	ldr	r0, [pc, #164]	@ (80013d4 <main+0xc4>)
 8001330:	f002 fc62 	bl	8003bf8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 8001334:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <main+0xc8>)
 8001336:	f002 fbf7 	bl	8003b28 <HAL_TIM_Base_Start>

  HAL hal = HAL_construct();
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc5d 	bl	8000bfe <HAL_construct>
  App_KeyDisplay app = App_KeyDisplay_construct();
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f92f 	bl	80005ac <App_KeyDisplay_construct>
  App_KeyDisplay_ShowIntroScreen(&huart2);
 800134e:	4823      	ldr	r0, [pc, #140]	@ (80013dc <main+0xcc>)
 8001350:	f7ff f97a 	bl	8000648 <App_KeyDisplay_ShowIntroScreen>

	Timer_set_ns_upcounter(&htim5);
 8001354:	4820      	ldr	r0, [pc, #128]	@ (80013d8 <main+0xc8>)
 8001356:	f000 fc53 	bl	8001c00 <Timer_set_ns_upcounter>

	ShiftReg_shift_in_data(Init_Data, SHIFT_REG_COUNT);
 800135a:	2107      	movs	r1, #7
 800135c:	4820      	ldr	r0, [pc, #128]	@ (80013e0 <main+0xd0>)
 800135e:	f000 fa2a 	bl	80017b6 <ShiftReg_shift_in_data>
	ShiftReg_output_enable();
 8001362:	f000 fa1d 	bl	80017a0 <ShiftReg_output_enable>

  uint8_t SSEG_Data[SHIFT_REG_COUNT];
  int i;
  int cur = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  for (i = 0; i < SHIFT_REG_COUNT; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001372:	e00a      	b.n	800138a <main+0x7a>
    ShiftReg_display_digit(i, i);
 8001374:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001378:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800137c:	f000 f9e4 	bl	8001748 <ShiftReg_display_digit>
  for (i = 0; i < SHIFT_REG_COUNT; i++) {
 8001380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001384:	3301      	adds	r3, #1
 8001386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800138a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800138e:	2b06      	cmp	r3, #6
 8001390:	ddf0      	ble.n	8001374 <main+0x64>
	{
//		HAL_Delay(1000);

		// ShiftReg_shift_in_data(test_data, SHIFT_REG_COUNT);

		HAL_refresh(&hal);
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fbee 	bl	8000b78 <HAL_refresh>
	  //Timer_refresh();
		App_KeyDisplay_loop(&app, &hal, &huart2);
 800139c:	f107 0118 	add.w	r1, r7, #24
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <main+0xcc>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f920 	bl	80005ec <App_KeyDisplay_loop>

		if (sTimer[KEY_SCAN_TIMER] == 0)
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <main+0xd4>)
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <main+0xb2>
		{
			Keypadscan();
 80013b4:	f7ff fcf4 	bl	8000da0 <Keypadscan>
			KeypadProcess();
 80013b8:	f7ff fea0 	bl	80010fc <KeypadProcess>
			sTimer[KEY_SCAN_TIMER] = KEY_SCAN_TIME;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <main+0xd4>)
 80013be:	2214      	movs	r2, #20
 80013c0:	805a      	strh	r2, [r3, #2]
		}
		if (sTimer[ONE_SECOND_TIMER] == 0)
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <main+0xd4>)
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e3      	bne.n	8001392 <main+0x82>
		// if (cur++ >= 10)
		// {
		// 	cur = 0;
		// }
		// 	ShiftReg_shift_in_data(SSEG_Data, SHIFT_REG_COUNT - 1);
			sTimer[ONE_SECOND_TIMER] = ONE_SECOND_TIME;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <main+0xd4>)
 80013cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d0:	809a      	strh	r2, [r3, #4]
		HAL_refresh(&hal);
 80013d2:	e7de      	b.n	8001392 <main+0x82>
 80013d4:	200000b4 	.word	0x200000b4
 80013d8:	20000100 	.word	0x20000100
 80013dc:	2000014c 	.word	0x2000014c
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200001d8 	.word	0x200001d8

080013e8 <SystemClock_Config>:
		}
	}
}
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b096      	sub	sp, #88	@ 0x58
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2244      	movs	r2, #68	@ 0x44
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f98a 	bl	8005710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800140a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800140e:	f001 f821 	bl	8002454 <HAL_PWREx_ControlVoltageScaling>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001418:	f000 f990 	bl	800173c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001424:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001426:	2310      	movs	r3, #16
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142e:	2302      	movs	r3, #2
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001432:	2301      	movs	r3, #1
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001436:	230a      	movs	r3, #10
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800143a:	2307      	movs	r3, #7
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f858 	bl	8002500 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001456:	f000 f971 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2303      	movs	r3, #3
 8001460:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	2104      	movs	r1, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fc20 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800147e:	f000 f95d 	bl	800173c <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3758      	adds	r7, #88	@ 0x58
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014b4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80014b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014bc:	2210      	movs	r2, #16
 80014be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014c2:	2213      	movs	r2, #19
 80014c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d4:	4813      	ldr	r0, [pc, #76]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014d6:	f002 facf 	bl	8003a78 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 f92c 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <MX_TIM2_Init+0x98>)
 80014f2:	f002 fcf8 	bl	8003ee6 <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80014fc:	f000 f91e 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_TIM2_Init+0x98>)
 800150e:	f002 ff1b 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001518:	f000 f910 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200000b4 	.word	0x200000b4

08001528 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM5_Init+0x98>)
 8001548:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <MX_TIM5_Init+0x9c>)
 800154a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM5_Init+0x98>)
 800154e:	224f      	movs	r2, #79	@ 0x4f
 8001550:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_TIM5_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM5_Init+0x98>)
 800155a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800155e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_TIM5_Init+0x98>)
 8001562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001566:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_TIM5_Init+0x98>)
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800156e:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_TIM5_Init+0x98>)
 8001570:	f002 fa82 	bl	8003a78 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800157a:	f000 f8df 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM5_Init+0x98>)
 800158c:	f002 fcab 	bl	8003ee6 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 f8d1 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM5_Init+0x98>)
 80015a8:	f002 fece 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80015b2:	f000 f8c3 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000100 	.word	0x20000100
 80015c4:	40000c00 	.word	0x40000c00

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_USART2_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 800160c:	f002 ff42 	bl	8004494 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 f891 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000014c 	.word	0x2000014c
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b39      	ldr	r3, [pc, #228]	@ (8001730 <MX_GPIO_Init+0x108>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <MX_GPIO_Init+0x108>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a2f      	ldr	r2, [pc, #188]	@ (8001730 <MX_GPIO_Init+0x108>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <MX_GPIO_Init+0x108>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2113      	movs	r1, #19
 800168a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168e:	f000 febb 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8001698:	4826      	ldr	r0, [pc, #152]	@ (8001734 <MX_GPIO_Init+0x10c>)
 800169a:	f000 feb5 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800169e:	2303      	movs	r3, #3
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a6:	2302      	movs	r3, #2
 80016a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	4821      	ldr	r0, [pc, #132]	@ (8001738 <MX_GPIO_Init+0x110>)
 80016b2:	f000 fcff 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80016b6:	2313      	movs	r3, #19
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d0:	f000 fcf0 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x10c>)
 80016e8:	f000 fce4 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f6:	2302      	movs	r3, #2
 80016f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001704:	f000 fcd6 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_Pin nG_Pin SRCK_Pin SIN_Pin */
  GPIO_InitStruct.Pin = RCK_Pin|nG_Pin|SRCK_Pin|SIN_Pin;
 8001708:	f44f 734c 	mov.w	r3, #816	@ 0x330
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800170e:	2311      	movs	r3, #17
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4619      	mov	r1, r3
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_GPIO_Init+0x10c>)
 8001722:	f000 fcc7 	bl	80020b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <ShiftReg_display_digit>:
		set_nG(HIGH);
		HAL_Delay(1000);
	}
}

void ShiftReg_display_digit(int digit, int reg_index) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	if (digit < 0 || digit > 9 || reg_index >= MAX_SHIFTREGS) return;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db1c      	blt.n	8001792 <ShiftReg_display_digit+0x4a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b09      	cmp	r3, #9
 800175c:	dc19      	bgt.n	8001792 <ShiftReg_display_digit+0x4a>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b06      	cmp	r3, #6
 8001762:	dc16      	bgt.n	8001792 <ShiftReg_display_digit+0x4a>
	uint8_t data[MAX_SHIFTREGS] = {0};
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f8c3 2003 	str.w	r2, [r3, #3]
	data[reg_index] = SSEG_TT[digit];
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <ShiftReg_display_digit+0x54>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	ShiftReg_shift_in_data(data, MAX_SHIFTREGS);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2107      	movs	r1, #7
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f813 	bl	80017b6 <ShiftReg_shift_in_data>
 8001790:	e000      	b.n	8001794 <ShiftReg_display_digit+0x4c>
	if (digit < 0 || digit > 9 || reg_index >= MAX_SHIFTREGS) return;
 8001792:	bf00      	nop
}
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	080063e0 	.word	0x080063e0

080017a0 <ShiftReg_output_enable>:

void ShiftReg_output_enable() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	set_nG(LOW);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f89f 	bl	80018e8 <set_nG>
	delay_ns(TYP_NG_HIGH_TO_LOW_PROPAGATION_DELAY);
 80017aa:	f240 208a 	movw	r0, #650	@ 0x28a
 80017ae:	f000 fa37 	bl	8001c20 <delay_ns>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <ShiftReg_shift_in_data>:
void ShiftReg_output_disable() {
	set_nG(HIGH);
	delay_ns(TYP_NG_LOW_TO_HIGH_PROPAGATION_DELAY);
}

void ShiftReg_shift_in_data(uint8_t *data, int shiftreg_count) {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	int regnum, bitnum;
	int bit;

	// from TPIC6596 datasheet section 6 (Parameter Measurement Information)
	// "Write data and read data are valid only when RCK is low"
	set_RCK(LOW);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 f83d 	bl	8001840 <set_RCK>

	// reset SRCLK to low
	set_SRCK(LOW);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f856 	bl	8001878 <set_SRCK>

	for (regnum = shiftreg_count - 1; regnum >= 0; regnum--) {
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e027      	b.n	8001824 <ShiftReg_shift_in_data+0x6e>
		for (bitnum = 7; bitnum >= 0; bitnum--) {
 80017d4:	2307      	movs	r3, #7
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e01e      	b.n	8001818 <ShiftReg_shift_in_data+0x62>
			// get bitnum of regnum's data
			bit = (data[regnum] >> bitnum) & 0x01;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	fa42 f303 	asr.w	r3, r2, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]

			// clock the bit in
			// shifts previously shifted bits forward

			set_SIN(bit);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f85b 	bl	80018b0 <set_SIN>
			delay_ns(MIN_SIN_SETUP_TIME);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f000 fa10 	bl	8001c20 <delay_ns>

			set_SRCK(HIGH);
 8001800:	2001      	movs	r0, #1
 8001802:	f000 f839 	bl	8001878 <set_SRCK>

			delay_ns(MIN_SIN_PULSE_DURATION);
 8001806:	2014      	movs	r0, #20
 8001808:	f000 fa0a 	bl	8001c20 <delay_ns>
			set_SRCK(LOW);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f833 	bl	8001878 <set_SRCK>
		for (bitnum = 7; bitnum >= 0; bitnum--) {
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3b01      	subs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	dadd      	bge.n	80017da <ShiftReg_shift_in_data+0x24>
	for (regnum = shiftreg_count - 1; regnum >= 0; regnum--) {
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3b01      	subs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dad4      	bge.n	80017d4 <ShiftReg_shift_in_data+0x1e>
		}
	}

	// clock RCLK, saving the values that were shifted in
	set_RCK(HIGH);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 f808 	bl	8001840 <set_RCK>
	set_RCK(LOW);
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f805 	bl	8001840 <set_RCK>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <set_RCK>:

/* static functions */

static void set_RCK(GPIO_PinState val) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_RCK_GPIO_EXPANDER, SHIFTREG_RCK_GPIO_PIN, val);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2110      	movs	r1, #16
 8001850:	4808      	ldr	r0, [pc, #32]	@ (8001874 <set_RCK+0x34>)
 8001852:	f000 fdd9 	bl	8002408 <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d103      	bne.n	8001864 <set_RCK+0x24>
		delay_ns(RCK_RISE_FALL_TIME);
 800185c:	207b      	movs	r0, #123	@ 0x7b
 800185e:	f000 f9df 	bl	8001c20 <delay_ns>
	} else {
		delay_ns(RCK_RISE_FALL_TIME);
	}
}
 8001862:	e002      	b.n	800186a <set_RCK+0x2a>
		delay_ns(RCK_RISE_FALL_TIME);
 8001864:	207b      	movs	r0, #123	@ 0x7b
 8001866:	f000 f9db 	bl	8001c20 <delay_ns>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	48000400 	.word	0x48000400

08001878 <set_SRCK>:

static void set_SRCK(GPIO_PinState val) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SRCK_GPIO_EXPANDER, SHIFTREG_SRCK_GPIO_PIN, val);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	461a      	mov	r2, r3
 8001886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188a:	4808      	ldr	r0, [pc, #32]	@ (80018ac <set_SRCK+0x34>)
 800188c:	f000 fdbc 	bl	8002408 <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d103      	bne.n	800189e <set_SRCK+0x26>
		delay_ns(SRCK_RISE_FALL_TIME);
 8001896:	207b      	movs	r0, #123	@ 0x7b
 8001898:	f000 f9c2 	bl	8001c20 <delay_ns>
	} else {
		delay_ns(SRCK_RISE_FALL_TIME);
	}
}
 800189c:	e002      	b.n	80018a4 <set_SRCK+0x2c>
		delay_ns(SRCK_RISE_FALL_TIME);
 800189e:	207b      	movs	r0, #123	@ 0x7b
 80018a0:	f000 f9be 	bl	8001c20 <delay_ns>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48000400 	.word	0x48000400

080018b0 <set_SIN>:

static void set_SIN(GPIO_PinState val) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_SIN_GPIO_EXPANDER, SHIFTREG_SIN_GPIO_PIN, val);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	461a      	mov	r2, r3
 80018be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <set_SIN+0x34>)
 80018c4:	f000 fda0 	bl	8002408 <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d103      	bne.n	80018d6 <set_SIN+0x26>
		delay_ns(SIN_RISE_FALL_TIME);
 80018ce:	207b      	movs	r0, #123	@ 0x7b
 80018d0:	f000 f9a6 	bl	8001c20 <delay_ns>
	} else {
		delay_ns(SIN_RISE_FALL_TIME);
	}
}
 80018d4:	e002      	b.n	80018dc <set_SIN+0x2c>
		delay_ns(SIN_RISE_FALL_TIME);
 80018d6:	207b      	movs	r0, #123	@ 0x7b
 80018d8:	f000 f9a2 	bl	8001c20 <delay_ns>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	48000400 	.word	0x48000400

080018e8 <set_nG>:

static void set_nG(GPIO_PinState val) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SHIFTREG_NG_GPIO_EXPANDER, SHIFTREG_NG_GPIO_PIN, val);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	461a      	mov	r2, r3
 80018f6:	2120      	movs	r1, #32
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <set_nG+0x34>)
 80018fa:	f000 fd85 	bl	8002408 <HAL_GPIO_WritePin>
	if (val == GPIO_PIN_SET) {
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d103      	bne.n	800190c <set_nG+0x24>
		delay_ns(NG_RISE_FALL_TIME);
 8001904:	207b      	movs	r0, #123	@ 0x7b
 8001906:	f000 f98b 	bl	8001c20 <delay_ns>
	} else {
		delay_ns(NG_RISE_FALL_TIME);
	}
}
 800190a:	e002      	b.n	8001912 <set_nG+0x2a>
		delay_ns(NG_RISE_FALL_TIME);
 800190c:	207b      	movs	r0, #123	@ 0x7b
 800190e:	f000 f987 	bl	8001c20 <delay_ns>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	@ 0x60
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_MspInit+0x44>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_MspInit+0x44>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_MspInit+0x44>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001978:	d114      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6593      	str	r3, [r2, #88]	@ 0x58
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201c      	movs	r0, #28
 8001998:	f000 fad7 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800199c:	201c      	movs	r0, #28
 800199e:	f000 faf0 	bl	8001f82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019a2:	e010      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10b      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40000c00 	.word	0x40000c00

080019d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0ac      	sub	sp, #176	@ 0xb0
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2288      	movs	r2, #136	@ 0x88
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fe89 	bl	8005710 <memset>
  if(huart->Instance==USART2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <HAL_UART_MspInit+0xc0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d143      	bne.n	8001a90 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fb73 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a20:	f7ff fe8c 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a24:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a28:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a40:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a54:	230c      	movs	r3, #12
 8001a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7c:	f000 fb1a 	bl	80020b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2026      	movs	r0, #38	@ 0x26
 8001a86:	f000 fa60 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a8a:	2026      	movs	r0, #38	@ 0x26
 8001a8c:	f000 fa79 	bl	8001f82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a90:	bf00      	nop
 8001a92:	37b0      	adds	r7, #176	@ 0xb0
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 f92d 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <TIM2_IRQHandler+0x10>)
 8001b06:	f002 f8e7 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000b4 	.word	0x200000b4

08001b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <USART2_IRQHandler+0x10>)
 8001b1a:	f002 fd93 	bl	8004644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000014c 	.word	0x2000014c

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f003 fde2 	bl	8005720 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20018000 	.word	0x20018000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	200001d4 	.word	0x200001d4
 8001b90:	20000330 	.word	0x20000330

08001b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Timer_handle>:

#include "timer.h"

// timer
void Timer_handle(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	//__disable_irq();

	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	80fb      	strh	r3, [r7, #6]
 8001bc2:	e011      	b.n	8001be8 <Timer_handle+0x30>
	{
		if (sTimer[sIndex] != 0)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <Timer_handle+0x44>)
 8001bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <Timer_handle+0x2a>
			sTimer[sIndex]--;
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <Timer_handle+0x44>)
 8001bd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	b291      	uxth	r1, r2
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <Timer_handle+0x44>)
 8001bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	3301      	adds	r3, #1
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d9ea      	bls.n	8001bc4 <Timer_handle+0xc>
	}
	//__enable_irq();
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	200001d8 	.word	0x200001d8

08001c00 <Timer_set_ns_upcounter>:

// delay
static TIM_HandleTypeDef* htim_ns_upcounter = NULL;

void Timer_set_ns_upcounter(TIM_HandleTypeDef* htim) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	htim_ns_upcounter = htim;
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <Timer_set_ns_upcounter+0x1c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200001dc 	.word	0x200001dc

08001c20 <delay_ns>:

void delay_ns(uint32_t ns) {
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    uint32_t start = htim_ns_upcounter->Instance->CNT;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <delay_ns+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	60fb      	str	r3, [r7, #12]

    while ((uint32_t) (htim_ns_upcounter->Instance->CNT - start) < ns)
 8001c32:	bf00      	nop
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <delay_ns+0x34>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d8f6      	bhi.n	8001c34 <delay_ns+0x14>
        ;;
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200001dc 	.word	0x200001dc

08001c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff ff9a 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	@ (8001c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <LoopForever+0xe>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca4 <LoopForever+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f003 fd51 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8a:	f7ff fb41 	bl	8001310 <main>

08001c8e <LoopForever>:

LoopForever:
    b LoopForever
 8001c8e:	e7fe      	b.n	8001c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c9c:	08006478 	.word	0x08006478
  ldr r2, =_sbss
 8001ca0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001ca4:	2000032c 	.word	0x2000032c

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>

08001caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f93d 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f80e 	bl	8001cdc <HAL_InitTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	e001      	b.n	8001cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ccc:	f7ff fe28 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ce8:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_InitTick+0x6c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_InitTick+0x70>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_InitTick+0x6c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f949 	bl	8001f9e <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d809      	bhi.n	8001d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d20:	f000 f913 	bl	8001f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_InitTick+0x74>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e004      	b.n	8001d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e001      	b.n	8001d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	2000000c 	.word	0x2000000c

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000010 	.word	0x20000010
 8001d78:	200001e0 	.word	0x200001e0

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200001e0 	.word	0x200001e0

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d008      	beq.n	8001fe0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e022      	b.n	8002026 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 020e 	bic.w	r2, r2, #14
 8001fee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	f003 021c 	and.w	r2, r3, #28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d005      	beq.n	8002056 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2204      	movs	r2, #4
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e029      	b.n	80020aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 020e 	bic.w	r2, r2, #14
 8002064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f003 021c 	and.w	r2, r3, #28
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
    }
  }
  return status;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e17f      	b.n	80023c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8171 	beq.w	80023be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x40>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d130      	bne.n	8002156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 0201 	and.w	r2, r3, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b03      	cmp	r3, #3
 8002160:	d118      	bne.n	8002194 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80ac 	beq.w	80023be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_GPIO_Init+0x330>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226a:	4a5e      	ldr	r2, [pc, #376]	@ (80023e4 <HAL_GPIO_Init+0x330>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6613      	str	r3, [r2, #96]	@ 0x60
 8002272:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <HAL_GPIO_Init+0x330>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800227e:	4a5a      	ldr	r2, [pc, #360]	@ (80023e8 <HAL_GPIO_Init+0x334>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x242>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	@ (80023ec <HAL_GPIO_Init+0x338>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x23e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4e      	ldr	r2, [pc, #312]	@ (80023f0 <HAL_GPIO_Init+0x33c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x23a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4d      	ldr	r2, [pc, #308]	@ (80023f4 <HAL_GPIO_Init+0x340>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x236>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4c      	ldr	r2, [pc, #304]	@ (80023f8 <HAL_GPIO_Init+0x344>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x232>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	@ (80023fc <HAL_GPIO_Init+0x348>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002400 <HAL_GPIO_Init+0x34c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x22a>
 80022da:	2306      	movs	r3, #6
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022f6:	2300      	movs	r3, #0
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002308:	4937      	ldr	r1, [pc, #220]	@ (80023e8 <HAL_GPIO_Init+0x334>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_GPIO_Init+0x350>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800233a:	4a32      	ldr	r2, [pc, #200]	@ (8002404 <HAL_GPIO_Init+0x350>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002340:	4b30      	ldr	r3, [pc, #192]	@ (8002404 <HAL_GPIO_Init+0x350>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_GPIO_Init+0x350>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800236a:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <HAL_GPIO_Init+0x350>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800238e:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_GPIO_Init+0x350>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_GPIO_Init+0x350>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_GPIO_Init+0x350>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f47f ae78 	bne.w	80020c4 <HAL_GPIO_Init+0x10>
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	48000400 	.word	0x48000400
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000c00 	.word	0x48000c00
 80023f8:	48001000 	.word	0x48001000
 80023fc:	48001400 	.word	0x48001400
 8002400:	48001800 	.word	0x48001800
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_PWREx_GetVoltageRange+0x18>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002462:	d130      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d038      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800247a:	4a1e      	ldr	r2, [pc, #120]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2232      	movs	r2, #50	@ 0x32
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	4a1b      	ldr	r2, [pc, #108]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3301      	adds	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002498:	e002      	b.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3b01      	subs	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ac:	d102      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c0:	d110      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d007      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024dc:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000
 80024f8:	20000008 	.word	0x20000008
 80024fc:	431bde83 	.word	0x431bde83

08002500 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e3ca      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b97      	ldr	r3, [pc, #604]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800251c:	4b94      	ldr	r3, [pc, #592]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80e4 	beq.w	80026fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_RCC_OscConfig+0x4a>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	f040 808b 	bne.w	8002658 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 8087 	bne.w	8002658 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254a:	4b89      	ldr	r3, [pc, #548]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e3a2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	4b82      	ldr	r3, [pc, #520]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_RCC_OscConfig+0x7c>
 8002572:	4b7f      	ldr	r3, [pc, #508]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257a:	e005      	b.n	8002588 <HAL_RCC_OscConfig+0x88>
 800257c:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002588:	4293      	cmp	r3, r2
 800258a:	d223      	bcs.n	80025d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd55 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e383      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a0:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a72      	ldr	r2, [pc, #456]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b70      	ldr	r3, [pc, #448]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	496d      	ldr	r1, [pc, #436]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025be:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	4968      	ldr	r1, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
 80025d2:	e025      	b.n	8002620 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4960      	ldr	r1, [pc, #384]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	495b      	ldr	r1, [pc, #364]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fd15 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e343      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002620:	f000 fc4a 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	4950      	ldr	r1, [pc, #320]	@ (8002774 <HAL_RCC_OscConfig+0x274>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	4a4e      	ldr	r2, [pc, #312]	@ (8002778 <HAL_RCC_OscConfig+0x278>)
 800263e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002640:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <HAL_RCC_OscConfig+0x27c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb49 	bl	8001cdc <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d052      	beq.n	80026fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	e327      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d032      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266c:	f7ff fb86 	bl	8001d7c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002674:	f7ff fb82 	bl	8001d7c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e310      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002692:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a36      	ldr	r2, [pc, #216]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4931      	ldr	r1, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	492c      	ldr	r1, [pc, #176]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e01a      	b.n	80026fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb53 	bl	8001d7c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026da:	f7ff fb4f 	bl	8001d7c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e2dd      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ec:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x1da>
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d074      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x21a>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d10e      	bne.n	8002732 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d10b      	bne.n	8002732 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d064      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d160      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e2ba      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x24a>
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e026      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002752:	d115      	bne.n	8002780 <HAL_RCC_OscConfig+0x280>
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a02      	ldr	r2, [pc, #8]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	080063ec 	.word	0x080063ec
 8002778:	20000008 	.word	0x20000008
 800277c:	2000000c 	.word	0x2000000c
 8002780:	4ba0      	ldr	r3, [pc, #640]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9f      	ldr	r2, [pc, #636]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a9c      	ldr	r2, [pc, #624]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff faec 	bl	8001d7c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff fae8 	bl	8001d7c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e276      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2a8>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff fad8 	bl	8001d7c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff fad4 	bl	8001d7c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e262      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2d0>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d060      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x310>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d119      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d116      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x328>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e23f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	4973      	ldr	r1, [pc, #460]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e040      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002846:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7ff fa93 	bl	8001d7c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7ff fa8f 	bl	8001d7c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e21d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	495f      	ldr	r1, [pc, #380]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff fa6f 	bl	8001d7c <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff fa6b 	bl	8001d7c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1f9      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028da:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7ff fa4a 	bl	8001d7c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff fa46 	bl	8001d7c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1d4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x3ec>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7ff fa2d 	bl	8001d7c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7ff fa29 	bl	8001d7c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1b7      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a6 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002958:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1d      	ldr	r2, [pc, #116]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7ff f9f0 	bl	8001d7c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7ff f9ec 	bl	8001d7c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e17a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
 80029c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d6:	e029      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_OscConfig+0x50c>
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a03      	ldr	r2, [pc, #12]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a9b      	ldr	r2, [pc, #620]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1c:	4b98      	ldr	r3, [pc, #608]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a97      	ldr	r2, [pc, #604]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff f9a2 	bl	8001d7c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f99e 	bl	8001d7c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e12a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b8b      	ldr	r3, [pc, #556]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ed      	beq.n	8002a3c <HAL_RCC_OscConfig+0x53c>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7ff f98b 	bl	8001d7c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff f987 	bl	8001d7c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e113      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ed      	bne.n	8002a6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b7a      	ldr	r3, [pc, #488]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a79      	ldr	r2, [pc, #484]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80fe 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f040 80d0 	bne.w	8002c54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ab4:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d130      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d127      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d11f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af4:	2a07      	cmp	r2, #7
 8002af6:	bf14      	ite	ne
 8002af8:	2201      	movne	r2, #1
 8002afa:	2200      	moveq	r2, #0
 8002afc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d113      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d06e      	beq.n	8002c08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d069      	beq.n	8002c04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0ad      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b58:	f7ff f910 	bl	8001d7c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f90c 	bl	8001d7c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x784>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b98:	0212      	lsls	r2, r2, #8
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0552      	lsls	r2, r2, #21
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	0652      	lsls	r2, r2, #25
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb8:	0912      	lsrs	r2, r2, #4
 8002bba:	0452      	lsls	r2, r2, #17
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bdc:	f7ff f8ce 	bl	8001d7c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff f8ca 	bl	8001d7c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e058      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c02:	e050      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e04f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d148      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c2c:	f7ff f8a6 	bl	8001d7c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff f8a2 	bl	8001d7c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e030      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x734>
 8002c52:	e028      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d023      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f889 	bl	8001d7c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff f885 	bl	8001d7c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d905      	bls.n	8002c88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ec      	bne.n	8002c6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4905      	ldr	r1, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b4>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	feeefffc 	.word	0xfeeefffc

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0e7      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b75      	ldr	r3, [pc, #468]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b72      	ldr	r3, [pc, #456]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4970      	ldr	r1, [pc, #448]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cf      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4960      	ldr	r1, [pc, #384]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04c      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d121      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0a6      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e09a      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e08e      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e086      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4943      	ldr	r1, [pc, #268]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe ffec 	bl	8001d7c <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe ffe8 	bl	8001d7c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e06e      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d208      	bcs.n	8002dfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	492b      	ldr	r1, [pc, #172]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d210      	bcs.n	8002e2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0207 	bic.w	r2, r3, #7
 8002e14:	4923      	ldr	r1, [pc, #140]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e036      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4918      	ldr	r1, [pc, #96]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6c:	f000 f824 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	490b      	ldr	r1, [pc, #44]	@ (8002eac <HAL_RCC_ClockConfig+0x1f4>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a09      	ldr	r2, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe ff23 	bl	8001cdc <HAL_InitTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	080063ec 	.word	0x080063ec
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	@ 0x24
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d11e      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eec:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ef8:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f08:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f14:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e004      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f3c:	4b23      	ldr	r3, [pc, #140]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d134      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xac>
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f66:	617b      	str	r3, [r7, #20]
      break;
 8002f68:	e002      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0e5b      	lsrs	r3, r3, #25
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08006404 	.word	0x08006404
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000008 	.word	0x20000008

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fec:	f7ff fff0 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4904      	ldr	r1, [pc, #16]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	080063fc 	.word	0x080063fc

08003014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003018:	f7ff ffda 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0adb      	lsrs	r3, r3, #11
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4904      	ldr	r1, [pc, #16]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x28>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	080063fc 	.word	0x080063fc

08003040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800304c:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003058:	f7ff f9ee 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 800305c:	6178      	str	r0, [r7, #20]
 800305e:	e014      	b.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	@ 0x58
 800306c:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003078:	f7ff f9de 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 800307c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003090:	d10b      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b80      	cmp	r3, #128	@ 0x80
 8003096:	d919      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2ba0      	cmp	r3, #160	@ 0xa0
 800309c:	d902      	bls.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309e:	2302      	movs	r3, #2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e013      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e010      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	@ 0x80
 80030ae:	d902      	bls.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b0:	2303      	movs	r3, #3
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e00a      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	@ 0x80
 80030ba:	d102      	bne.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030bc:	2302      	movs	r3, #2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e004      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b70      	cmp	r3, #112	@ 0x70
 80030c6:	d101      	bne.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 0207 	bic.w	r2, r3, #7
 80030d4:	4909      	ldr	r1, [pc, #36]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030dc:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003108:	2300      	movs	r3, #0
 800310a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800310c:	2300      	movs	r3, #0
 800310e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d041      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003120:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003124:	d02a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003126:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800312a:	d824      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800312c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003132:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003136:	d81e      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800313c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003140:	d010      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003142:	e018      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003144:	4b86      	ldr	r3, [pc, #536]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a85      	ldr	r2, [pc, #532]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003150:	e015      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fabb 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003162:	e00c      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3320      	adds	r3, #32
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fba6 	bl	80038bc <RCCEx_PLLSAI2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	74fb      	strb	r3, [r7, #19]
      break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800317c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003184:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003192:	4973      	ldr	r1, [pc, #460]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800319a:	e001      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d041      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b4:	d02a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031ba:	d824      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c0:	d008      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c6:	d81e      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d0:	d010      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d2:	e018      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d4:	4b62      	ldr	r3, [pc, #392]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a61      	ldr	r2, [pc, #388]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e0:	e015      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa73 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f2:	e00c      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3320      	adds	r3, #32
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fb5e 	bl	80038bc <RCCEx_PLLSAI2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003204:	e003      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	74fb      	strb	r3, [r7, #19]
      break;
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800320c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003214:	4b52      	ldr	r3, [pc, #328]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003222:	494f      	ldr	r1, [pc, #316]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800322a:	e001      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a0 	beq.w	800337e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003242:	4b47      	ldr	r3, [pc, #284]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003258:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325c:	4a40      	ldr	r2, [pc, #256]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003262:	6593      	str	r3, [r2, #88]	@ 0x58
 8003264:	4b3e      	ldr	r3, [pc, #248]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003270:	2301      	movs	r3, #1
 8003272:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003274:	4b3b      	ldr	r3, [pc, #236]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3a      	ldr	r2, [pc, #232]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003280:	f7fe fd7c 	bl	8001d7c <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003286:	e009      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003288:	f7fe fd78 	bl	8001d7c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	74fb      	strb	r3, [r7, #19]
        break;
 800329a:	e005      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800329c:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d15c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d019      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032cc:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032d8:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	4a20      	ldr	r2, [pc, #128]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fd37 	bl	8001d7c <HAL_GetTick>
 800330e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003310:	e00b      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe fd33 	bl	8001d7c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d902      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	74fb      	strb	r3, [r7, #19]
            break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ec      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333e:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800334e:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003356:	e009      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
 800335c:	e006      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7c7b      	ldrb	r3, [r7, #17]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b9e      	ldr	r3, [pc, #632]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4a9d      	ldr	r2, [pc, #628]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338a:	4b98      	ldr	r3, [pc, #608]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	f023 0203 	bic.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	4994      	ldr	r1, [pc, #592]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ac:	4b8f      	ldr	r3, [pc, #572]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f023 020c 	bic.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	498c      	ldr	r1, [pc, #560]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ce:	4b87      	ldr	r3, [pc, #540]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	4983      	ldr	r1, [pc, #524]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	497b      	ldr	r1, [pc, #492]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003412:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003420:	4972      	ldr	r1, [pc, #456]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003434:	4b6d      	ldr	r3, [pc, #436]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	496a      	ldr	r1, [pc, #424]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003456:	4b65      	ldr	r3, [pc, #404]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	4961      	ldr	r1, [pc, #388]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003478:	4b5c      	ldr	r3, [pc, #368]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	4959      	ldr	r1, [pc, #356]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349a:	4b54      	ldr	r3, [pc, #336]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a8:	4950      	ldr	r1, [pc, #320]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034bc:	4b4b      	ldr	r3, [pc, #300]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	4948      	ldr	r1, [pc, #288]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034de:	4b43      	ldr	r3, [pc, #268]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	493f      	ldr	r1, [pc, #252]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d028      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003500:	4b3a      	ldr	r3, [pc, #232]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350e:	4937      	ldr	r1, [pc, #220]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800351e:	d106      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a31      	ldr	r2, [pc, #196]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
 800352c:	e011      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003536:	d10c      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8c8 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800355e:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	491f      	ldr	r1, [pc, #124]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800357c:	d106      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357e:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003588:	60d3      	str	r3, [r2, #12]
 800358a:	e011      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f899 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02b      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ca:	4908      	ldr	r1, [pc, #32]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035da:	d109      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a02      	ldr	r2, [pc, #8]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e014      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f867 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003620:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800362e:	4928      	ldr	r1, [pc, #160]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f844 	bl	80036d4 <RCCEx_PLLSAI1_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	74bb      	strb	r3, [r7, #18]
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3320      	adds	r3, #32
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f925 	bl	80038bc <RCCEx_PLLSAI2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800368c:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369a:	490d      	ldr	r1, [pc, #52]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ae:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036be:	4904      	ldr	r1, [pc, #16]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000

080036d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e2:	4b75      	ldr	r3, [pc, #468]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ee:	4b72      	ldr	r3, [pc, #456]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0203 	and.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
       ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003706:	4b6c      	ldr	r3, [pc, #432]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
       ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d047      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e044      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d018      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x86>
 8003728:	2b03      	cmp	r3, #3
 800372a:	d825      	bhi.n	8003778 <RCCEx_PLLSAI1_Config+0xa4>
 800372c:	2b01      	cmp	r3, #1
 800372e:	d002      	beq.n	8003736 <RCCEx_PLLSAI1_Config+0x62>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d009      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x74>
 8003734:	e020      	b.n	8003778 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003736:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11d      	bne.n	800377e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003746:	e01a      	b.n	800377e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003748:	4b5b      	ldr	r3, [pc, #364]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e013      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375a:	4b57      	ldr	r3, [pc, #348]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003766:	4b54      	ldr	r3, [pc, #336]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003776:	e006      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e004      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
    }

    if(status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800378e:	4b4a      	ldr	r3, [pc, #296]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	430b      	orrs	r3, r1
 80037a4:	4944      	ldr	r1, [pc, #272]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d17d      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b0:	4b41      	ldr	r3, [pc, #260]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fe fade 	bl	8001d7c <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c2:	e009      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c4:	f7fe fada 	bl	8001d7c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	73fb      	strb	r3, [r7, #15]
        break;
 80037d6:	e005      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d8:	4b37      	ldr	r3, [pc, #220]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ef      	bne.n	80037c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d160      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d111      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f0:	4b31      	ldr	r3, [pc, #196]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6892      	ldr	r2, [r2, #8]
 8003800:	0211      	lsls	r1, r2, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	0912      	lsrs	r2, r2, #4
 8003808:	0452      	lsls	r2, r2, #17
 800380a:	430a      	orrs	r2, r1
 800380c:	492a      	ldr	r1, [pc, #168]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	610b      	str	r3, [r1, #16]
 8003812:	e027      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d112      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381a:	4b27      	ldr	r3, [pc, #156]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003822:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6892      	ldr	r2, [r2, #8]
 800382a:	0211      	lsls	r1, r2, #8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6912      	ldr	r2, [r2, #16]
 8003830:	0852      	lsrs	r2, r2, #1
 8003832:	3a01      	subs	r2, #1
 8003834:	0552      	lsls	r2, r2, #21
 8003836:	430a      	orrs	r2, r1
 8003838:	491f      	ldr	r1, [pc, #124]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]
 800383e:	e011      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003840:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003848:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	0211      	lsls	r1, r2, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6952      	ldr	r2, [r2, #20]
 8003856:	0852      	lsrs	r2, r2, #1
 8003858:	3a01      	subs	r2, #1
 800385a:	0652      	lsls	r2, r2, #25
 800385c:	430a      	orrs	r2, r1
 800385e:	4916      	ldr	r1, [pc, #88]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003864:	4b14      	ldr	r3, [pc, #80]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800386e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe fa84 	bl	8001d7c <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003876:	e009      	b.n	800388c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003878:	f7fe fa80 	bl	8001d7c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d902      	bls.n	800388c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	73fb      	strb	r3, [r7, #15]
          break;
 800388a:	e005      	b.n	8003898 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ef      	beq.n	8003878 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4904      	ldr	r1, [pc, #16]	@ (80038b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000

080038bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d018      	beq.n	8003908 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038d6:	4b67      	ldr	r3, [pc, #412]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0203 	and.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d10d      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038ee:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
       ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d047      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e044      	b.n	8003992 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d018      	beq.n	8003942 <RCCEx_PLLSAI2_Config+0x86>
 8003910:	2b03      	cmp	r3, #3
 8003912:	d825      	bhi.n	8003960 <RCCEx_PLLSAI2_Config+0xa4>
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <RCCEx_PLLSAI2_Config+0x62>
 8003918:	2b02      	cmp	r3, #2
 800391a:	d009      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x74>
 800391c:	e020      	b.n	8003960 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800391e:	4b55      	ldr	r3, [pc, #340]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11d      	bne.n	8003966 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392e:	e01a      	b.n	8003966 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003930:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e013      	b.n	800396a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003942:	4b4c      	ldr	r3, [pc, #304]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800394e:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800395e:	e006      	b.n	800396e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e004      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003976:	4b3f      	ldr	r3, [pc, #252]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	430b      	orrs	r3, r1
 800398c:	4939      	ldr	r1, [pc, #228]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d167      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003998:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a35      	ldr	r2, [pc, #212]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fe f9ea 	bl	8001d7c <HAL_GetTick>
 80039a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039aa:	e009      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ac:	f7fe f9e6 	bl	8001d7c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d902      	bls.n	80039c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	73fb      	strb	r3, [r7, #15]
        break;
 80039be:	e005      	b.n	80039cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ef      	bne.n	80039ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d14a      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d111      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6892      	ldr	r2, [r2, #8]
 80039e8:	0211      	lsls	r1, r2, #8
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	0912      	lsrs	r2, r2, #4
 80039f0:	0452      	lsls	r2, r2, #17
 80039f2:	430a      	orrs	r2, r1
 80039f4:	491f      	ldr	r1, [pc, #124]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	614b      	str	r3, [r1, #20]
 80039fa:	e011      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6912      	ldr	r2, [r2, #16]
 8003a12:	0852      	lsrs	r2, r2, #1
 8003a14:	3a01      	subs	r2, #1
 8003a16:	0652      	lsls	r2, r2, #25
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4916      	ldr	r1, [pc, #88]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a20:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f9a6 	bl	8001d7c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a32:	e009      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a34:	f7fe f9a2 	bl	8001d7c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	73fb      	strb	r3, [r7, #15]
          break;
 8003a46:	e005      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a48:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4904      	ldr	r1, [pc, #16]	@ (8003a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e049      	b.n	8003b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd ff62 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fb06 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e047      	b.n	8003bd0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	@ (8003bdc <HAL_TIM_Base_Start+0xb4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d018      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	@ (8003be0 <HAL_TIM_Base_Start+0xb8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <HAL_TIM_Base_Start+0xbc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <HAL_TIM_Base_Start+0xc0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <HAL_TIM_Base_Start+0xc4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_TIM_Base_Start+0x66>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	@ (8003bf0 <HAL_TIM_Base_Start+0xc8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d115      	bne.n	8003bba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <HAL_TIM_Base_Start+0xcc>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d015      	beq.n	8003bcc <HAL_TIM_Base_Start+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba6:	d011      	beq.n	8003bcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	e008      	b.n	8003bcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e000      	b.n	8003bce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40013400 	.word	0x40013400
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	00010007 	.word	0x00010007

08003bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d001      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e04f      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a23      	ldr	r2, [pc, #140]	@ (8003cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3a:	d018      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a19      	ldr	r2, [pc, #100]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d115      	bne.n	8003c9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d015      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c86:	d011      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e008      	b.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	00010007 	.word	0x00010007

08003cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9b2 	bl	800408c <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9a4 	bl	8004078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9b5 	bl	80040a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0204 	mvn.w	r2, #4
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f98c 	bl	800408c <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f97e 	bl	8004078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f98f 	bl	80040a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0208 	mvn.w	r2, #8
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2204      	movs	r2, #4
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f966 	bl	800408c <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f958 	bl	8004078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f969 	bl	80040a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d020      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0210 	mvn.w	r2, #16
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2208      	movs	r2, #8
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f940 	bl	800408c <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f932 	bl	8004078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f943 	bl	80040a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0201 	mvn.w	r2, #1
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fa5c 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fafd 	bl	800446c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 faf5 	bl	8004480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8fd 	bl	80040b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0220 	mvn.w	r2, #32
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fabd 	bl	8004458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_ConfigClockSource+0x1c>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0b6      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x18a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3e:	d03e      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xd8>
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f44:	f200 8087 	bhi.w	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4c:	f000 8086 	beq.w	800405c <HAL_TIM_ConfigClockSource+0x176>
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f54:	d87f      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f56:	2b70      	cmp	r3, #112	@ 0x70
 8003f58:	d01a      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0xaa>
 8003f5a:	2b70      	cmp	r3, #112	@ 0x70
 8003f5c:	d87b      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f5e:	2b60      	cmp	r3, #96	@ 0x60
 8003f60:	d050      	beq.n	8004004 <HAL_TIM_ConfigClockSource+0x11e>
 8003f62:	2b60      	cmp	r3, #96	@ 0x60
 8003f64:	d877      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f66:	2b50      	cmp	r3, #80	@ 0x50
 8003f68:	d03c      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xfe>
 8003f6a:	2b50      	cmp	r3, #80	@ 0x50
 8003f6c:	d873      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d058      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x13e>
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d86f      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f76:	2b30      	cmp	r3, #48	@ 0x30
 8003f78:	d064      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x15e>
 8003f7a:	2b30      	cmp	r3, #48	@ 0x30
 8003f7c:	d86b      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d060      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x15e>
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d867      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d05c      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x15e>
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d05a      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x15e>
 8003f8e:	e062      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa0:	f000 f9b2 	bl	8004308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
      break;
 8003fbc:	e04f      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fce:	f000 f99b 	bl	8004308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe0:	609a      	str	r2, [r3, #8]
      break;
 8003fe2:	e03c      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f000 f90f 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2150      	movs	r1, #80	@ 0x50
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f968 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004002:	e02c      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004010:	461a      	mov	r2, r3
 8004012:	f000 f92e 	bl	8004272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2160      	movs	r1, #96	@ 0x60
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f958 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004022:	e01c      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f8ef 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2140      	movs	r1, #64	@ 0x40
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f948 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004042:	e00c      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 f93f 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004054:	e003      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
      break;
 800405a:	e000      	b.n	800405e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800405c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a46      	ldr	r2, [pc, #280]	@ (80041f4 <TIM_Base_SetConfig+0x12c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e6:	d00f      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a43      	ldr	r2, [pc, #268]	@ (80041f8 <TIM_Base_SetConfig+0x130>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a42      	ldr	r2, [pc, #264]	@ (80041fc <TIM_Base_SetConfig+0x134>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a41      	ldr	r2, [pc, #260]	@ (8004200 <TIM_Base_SetConfig+0x138>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a40      	ldr	r2, [pc, #256]	@ (8004204 <TIM_Base_SetConfig+0x13c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a35      	ldr	r2, [pc, #212]	@ (80041f4 <TIM_Base_SetConfig+0x12c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01f      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d01b      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a32      	ldr	r2, [pc, #200]	@ (80041f8 <TIM_Base_SetConfig+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d017      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a31      	ldr	r2, [pc, #196]	@ (80041fc <TIM_Base_SetConfig+0x134>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a30      	ldr	r2, [pc, #192]	@ (8004200 <TIM_Base_SetConfig+0x138>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2f      	ldr	r2, [pc, #188]	@ (8004204 <TIM_Base_SetConfig+0x13c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2e      	ldr	r2, [pc, #184]	@ (8004208 <TIM_Base_SetConfig+0x140>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2d      	ldr	r2, [pc, #180]	@ (800420c <TIM_Base_SetConfig+0x144>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2c      	ldr	r2, [pc, #176]	@ (8004210 <TIM_Base_SetConfig+0x148>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <TIM_Base_SetConfig+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a18      	ldr	r2, [pc, #96]	@ (8004204 <TIM_Base_SetConfig+0x13c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a17      	ldr	r2, [pc, #92]	@ (8004208 <TIM_Base_SetConfig+0x140>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a16      	ldr	r2, [pc, #88]	@ (800420c <TIM_Base_SetConfig+0x144>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <TIM_Base_SetConfig+0x148>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d103      	bne.n	80041c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]
  }
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800

08004214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 030a 	bic.w	r3, r3, #10
 8004250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004272:	b480      	push	{r7}
 8004274:	b087      	sub	sp, #28
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0210 	bic.w	r2, r3, #16
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800429c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f043 0307 	orr.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e068      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2d      	ldr	r2, [pc, #180]	@ (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800439a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d2:	d018      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	@ (800444c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a14      	ldr	r2, [pc, #80]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e040      	b.n	8004528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fa8e 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	@ 0x24
 80044c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fe90 	bl	8005200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fbd5 	bl	8004c90 <UART_SetConfig>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e01b      	b.n	8004528 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800450e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 ff0f 	bl	8005344 <UART_CheckIdleState>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	@ 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004544:	2b20      	cmp	r3, #32
 8004546:	d177      	bne.n	8004638 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Transmit+0x24>
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e070      	b.n	800463a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2221      	movs	r2, #33	@ 0x21
 8004564:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fd fc09 	bl	8001d7c <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	d108      	bne.n	8004598 <HAL_UART_Transmit+0x68>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e003      	b.n	80045a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a0:	e02f      	b.n	8004602 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	@ 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 ff71 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e03b      	b.n	800463a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	b292      	uxth	r2, r2
 80045d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	3302      	adds	r3, #2
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e007      	b.n	80045f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1c9      	bne.n	80045a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2140      	movs	r1, #64	@ 0x40
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 ff3b 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e005      	b.n	800463a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0ba      	sub	sp, #232	@ 0xe8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800466a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800466e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004672:	4013      	ands	r3, r2
 8004674:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d115      	bne.n	80046ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 82ca 	beq.w	8004c36 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
      }
      return;
 80046aa:	e2c4      	b.n	8004c36 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8117 	beq.w	80048e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_UART_IRQHandler+0x298>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 810a 	beq.w	80048e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d011      	beq.n	8004700 <HAL_UART_IRQHandler+0xbc>
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2201      	movs	r2, #1
 80046ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <HAL_UART_IRQHandler+0xec>
 800470c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2202      	movs	r2, #2
 800471e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d011      	beq.n	8004760 <HAL_UART_IRQHandler+0x11c>
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2204      	movs	r2, #4
 800474e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	f043 0202 	orr.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d017      	beq.n	800479c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800477c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2208      	movs	r2, #8
 800478a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004792:	f043 0208 	orr.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_UART_IRQHandler+0x18a>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8230 	beq.w	8004c3a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b40      	cmp	r3, #64	@ 0x40
 8004818:	d005      	beq.n	8004826 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800481a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04f      	beq.n	80048c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fea1 	bl	800556e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d141      	bne.n	80048be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800486a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800487e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1d9      	bne.n	800483a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488a:	2b00      	cmp	r3, #0
 800488c:	d013      	beq.n	80048b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004892:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <HAL_UART_IRQHandler+0x29c>)
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fbc9 	bl	8002032 <HAL_DMA_Abort_IT>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048b0:	4610      	mov	r0, r2
 80048b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e00f      	b.n	80048d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9d4 	bl	8004c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e00b      	b.n	80048d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9d0 	bl	8004c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e007      	b.n	80048d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9cc 	bl	8004c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048d4:	e1b1      	b.n	8004c3a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d6:	bf00      	nop
    return;
 80048d8:	e1af      	b.n	8004c3a <HAL_UART_IRQHandler+0x5f6>
 80048da:	bf00      	nop
 80048dc:	04000120 	.word	0x04000120
 80048e0:	08005637 	.word	0x08005637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f040 816a 	bne.w	8004bc2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8163 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 815c 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2210      	movs	r2, #16
 8004910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	f040 80d4 	bne.w	8004aca <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800492e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80ad 	beq.w	8004a92 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800493e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004942:	429a      	cmp	r2, r3
 8004944:	f080 80a5 	bcs.w	8004a92 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800494e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 8086 	bne.w	8004a70 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800497c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800498e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004992:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800499a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1da      	bne.n	8004964 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e1      	bne.n	80049ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e3      	bne.n	80049ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e4      	bne.n	8004a30 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd faa3 	bl	8001fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8f4 	bl	8004c78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a90:	e0d5      	b.n	8004c3e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f040 80ce 	bne.w	8004c3e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	f040 80c5 	bne.w	8004c3e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8d8 	bl	8004c78 <HAL_UARTEx_RxEventCallback>
      return;
 8004ac8:	e0b9      	b.n	8004c3e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80ab 	beq.w	8004c42 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a6 	beq.w	8004c42 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e4      	bne.n	8004af6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b50:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e3      	bne.n	8004b2c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e4      	bne.n	8004b78 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f85c 	bl	8004c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc0:	e03f      	b.n	8004c42 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <HAL_UART_IRQHandler+0x5a8>
 8004bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004be2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fd66 	bl	80056b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bea:	e02d      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
    }
    return;
 8004c14:	e017      	b.n	8004c46 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d012      	beq.n	8004c48 <HAL_UART_IRQHandler+0x604>
 8004c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fd17 	bl	8005662 <UART_EndTransmit_IT>
    return;
 8004c34:	e008      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
      return;
 8004c36:	bf00      	nop
 8004c38:	e006      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
    return;
 8004c3a:	bf00      	nop
 8004c3c:	e004      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
      return;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
      return;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <HAL_UART_IRQHandler+0x604>
    return;
 8004c46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c48:	37e8      	adds	r7, #232	@ 0xe8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop

08004c50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b08a      	sub	sp, #40	@ 0x28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4ba4      	ldr	r3, [pc, #656]	@ (8004f50 <UART_SetConfig+0x2c0>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a99      	ldr	r2, [pc, #612]	@ (8004f54 <UART_SetConfig+0x2c4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a90      	ldr	r2, [pc, #576]	@ (8004f58 <UART_SetConfig+0x2c8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d126      	bne.n	8004d68 <UART_SetConfig+0xd8>
 8004d1a:	4b90      	ldr	r3, [pc, #576]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d81b      	bhi.n	8004d60 <UART_SetConfig+0xd0>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0xa0>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d41 	.word	0x08004d41
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d59 	.word	0x08004d59
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d46:	e116      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e112      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e10e      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e10a      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e106      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f60 <UART_SetConfig+0x2d0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d138      	bne.n	8004de4 <UART_SetConfig+0x154>
 8004d72:	4b7a      	ldr	r3, [pc, #488]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d82d      	bhi.n	8004ddc <UART_SetConfig+0x14c>
 8004d80:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <UART_SetConfig+0xf8>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	08004ddd 	.word	0x08004ddd
 8004d94:	08004ddd 	.word	0x08004ddd
 8004d98:	08004dcd 	.word	0x08004dcd
 8004d9c:	08004ddd 	.word	0x08004ddd
 8004da0:	08004ddd 	.word	0x08004ddd
 8004da4:	08004ddd 	.word	0x08004ddd
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	08004ddd 	.word	0x08004ddd
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004dd5 	.word	0x08004dd5
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e0d8      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dca:	e0d4      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd2:	e0d0      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dda:	e0cc      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de2:	e0c8      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f64 <UART_SetConfig+0x2d4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d125      	bne.n	8004e3a <UART_SetConfig+0x1aa>
 8004dee:	4b5b      	ldr	r3, [pc, #364]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004df8:	2b30      	cmp	r3, #48	@ 0x30
 8004dfa:	d016      	beq.n	8004e2a <UART_SetConfig+0x19a>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d818      	bhi.n	8004e32 <UART_SetConfig+0x1a2>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d00a      	beq.n	8004e1a <UART_SetConfig+0x18a>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d814      	bhi.n	8004e32 <UART_SetConfig+0x1a2>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <UART_SetConfig+0x182>
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d008      	beq.n	8004e22 <UART_SetConfig+0x192>
 8004e10:	e00f      	b.n	8004e32 <UART_SetConfig+0x1a2>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e18:	e0ad      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e20:	e0a9      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e22:	2304      	movs	r3, #4
 8004e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e28:	e0a5      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e30:	e0a1      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e32:	2310      	movs	r3, #16
 8004e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e38:	e09d      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f68 <UART_SetConfig+0x2d8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d125      	bne.n	8004e90 <UART_SetConfig+0x200>
 8004e44:	4b45      	ldr	r3, [pc, #276]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e50:	d016      	beq.n	8004e80 <UART_SetConfig+0x1f0>
 8004e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e54:	d818      	bhi.n	8004e88 <UART_SetConfig+0x1f8>
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d00a      	beq.n	8004e70 <UART_SetConfig+0x1e0>
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d814      	bhi.n	8004e88 <UART_SetConfig+0x1f8>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <UART_SetConfig+0x1d8>
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x1e8>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x1f8>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e082      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e07e      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7e:	e07a      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e86:	e076      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8e:	e072      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a35      	ldr	r2, [pc, #212]	@ (8004f6c <UART_SetConfig+0x2dc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d12a      	bne.n	8004ef0 <UART_SetConfig+0x260>
 8004e9a:	4b30      	ldr	r3, [pc, #192]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea8:	d01a      	beq.n	8004ee0 <UART_SetConfig+0x250>
 8004eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eae:	d81b      	bhi.n	8004ee8 <UART_SetConfig+0x258>
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0x240>
 8004eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eba:	d815      	bhi.n	8004ee8 <UART_SetConfig+0x258>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <UART_SetConfig+0x238>
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x248>
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x258>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e052      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed6:	e04e      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ede:	e04a      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	e046      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eee:	e042      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <UART_SetConfig+0x2c4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d13a      	bne.n	8004f70 <UART_SetConfig+0x2e0>
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f08:	d01a      	beq.n	8004f40 <UART_SetConfig+0x2b0>
 8004f0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f0e:	d81b      	bhi.n	8004f48 <UART_SetConfig+0x2b8>
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x2a0>
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1a:	d815      	bhi.n	8004f48 <UART_SetConfig+0x2b8>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <UART_SetConfig+0x298>
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f24:	d008      	beq.n	8004f38 <UART_SetConfig+0x2a8>
 8004f26:	e00f      	b.n	8004f48 <UART_SetConfig+0x2b8>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e022      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e01e      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e01a      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e016      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e012      	b.n	8004f76 <UART_SetConfig+0x2e6>
 8004f50:	efff69f3 	.word	0xefff69f3
 8004f54:	40008000 	.word	0x40008000
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004800 	.word	0x40004800
 8004f68:	40004c00 	.word	0x40004c00
 8004f6c:	40005000 	.word	0x40005000
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a9f      	ldr	r2, [pc, #636]	@ (80051f8 <UART_SetConfig+0x568>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d17a      	bne.n	8005076 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d824      	bhi.n	8004fd2 <UART_SetConfig+0x342>
 8004f88:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <UART_SetConfig+0x300>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fc3 	.word	0x08004fc3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fd3 	.word	0x08004fd3
 8004fb0:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fe f818 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80051fc <UART_SetConfig+0x56c>)
 8004fbe:	61fb      	str	r3, [r7, #28]
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fd ff79 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004fc6:	61f8      	str	r0, [r7, #28]
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fce:	61fb      	str	r3, [r7, #28]
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80fb 	beq.w	80051dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d305      	bcc.n	8005002 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d903      	bls.n	800500a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005008:	e0e8      	b.n	80051dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2200      	movs	r2, #0
 800500e:	461c      	mov	r4, r3
 8005010:	4615      	mov	r5, r2
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	022b      	lsls	r3, r5, #8
 800501c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005020:	0222      	lsls	r2, r4, #8
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	6849      	ldr	r1, [r1, #4]
 8005026:	0849      	lsrs	r1, r1, #1
 8005028:	2000      	movs	r0, #0
 800502a:	4688      	mov	r8, r1
 800502c:	4681      	mov	r9, r0
 800502e:	eb12 0a08 	adds.w	sl, r2, r8
 8005032:	eb43 0b09 	adc.w	fp, r3, r9
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005044:	4650      	mov	r0, sl
 8005046:	4659      	mov	r1, fp
 8005048:	f7fb f91a 	bl	8000280 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505a:	d308      	bcc.n	800506e <UART_SetConfig+0x3de>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005062:	d204      	bcs.n	800506e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	60da      	str	r2, [r3, #12]
 800506c:	e0b6      	b.n	80051dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005074:	e0b2      	b.n	80051dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507e:	d15e      	bne.n	800513e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005084:	2b08      	cmp	r3, #8
 8005086:	d828      	bhi.n	80050da <UART_SetConfig+0x44a>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <UART_SetConfig+0x400>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050db 	.word	0x080050db
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050d3 	.word	0x080050d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fd ff98 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 80050b8:	61f8      	str	r0, [r7, #28]
        break;
 80050ba:	e014      	b.n	80050e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050bc:	f7fd ffaa 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 80050c0:	61f8      	str	r0, [r7, #28]
        break;
 80050c2:	e010      	b.n	80050e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c4:	4b4d      	ldr	r3, [pc, #308]	@ (80051fc <UART_SetConfig+0x56c>)
 80050c6:	61fb      	str	r3, [r7, #28]
        break;
 80050c8:	e00d      	b.n	80050e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fd fef5 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80050ce:	61f8      	str	r0, [r7, #28]
        break;
 80050d0:	e009      	b.n	80050e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d6:	61fb      	str	r3, [r7, #28]
        break;
 80050d8:	e005      	b.n	80050e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d077      	beq.n	80051dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005a      	lsls	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	441a      	add	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b0f      	cmp	r3, #15
 8005106:	d916      	bls.n	8005136 <UART_SetConfig+0x4a6>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800510e:	d212      	bcs.n	8005136 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f023 030f 	bic.w	r3, r3, #15
 8005118:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	b29b      	uxth	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	b29a      	uxth	r2, r3
 8005126:	8afb      	ldrh	r3, [r7, #22]
 8005128:	4313      	orrs	r3, r2
 800512a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	8afa      	ldrh	r2, [r7, #22]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e052      	b.n	80051dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800513c:	e04e      	b.n	80051dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800513e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005142:	2b08      	cmp	r3, #8
 8005144:	d827      	bhi.n	8005196 <UART_SetConfig+0x506>
 8005146:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0x4bc>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005171 	.word	0x08005171
 8005150:	08005179 	.word	0x08005179
 8005154:	08005181 	.word	0x08005181
 8005158:	08005197 	.word	0x08005197
 800515c:	08005187 	.word	0x08005187
 8005160:	08005197 	.word	0x08005197
 8005164:	08005197 	.word	0x08005197
 8005168:	08005197 	.word	0x08005197
 800516c:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fd ff3a 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8005174:	61f8      	str	r0, [r7, #28]
        break;
 8005176:	e014      	b.n	80051a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fd ff4c 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 800517c:	61f8      	str	r0, [r7, #28]
        break;
 800517e:	e010      	b.n	80051a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <UART_SetConfig+0x56c>)
 8005182:	61fb      	str	r3, [r7, #28]
        break;
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fd fe97 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800518a:	61f8      	str	r0, [r7, #28]
        break;
 800518c:	e009      	b.n	80051a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005192:	61fb      	str	r3, [r7, #28]
        break;
 8005194:	e005      	b.n	80051a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051a0:	bf00      	nop
    }

    if (pclk != 0U)
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d019      	beq.n	80051dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	085a      	lsrs	r2, r3, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	d909      	bls.n	80051d6 <UART_SetConfig+0x546>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c8:	d205      	bcs.n	80051d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e002      	b.n	80051dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	@ 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051f6:	bf00      	nop
 80051f8:	40008000 	.word	0x40008000
 80051fc:	00f42400 	.word	0x00f42400

08005200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01a      	beq.n	8005316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fe:	d10a      	bne.n	8005316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b098      	sub	sp, #96	@ 0x60
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005354:	f7fc fd12 	bl	8001d7c <HAL_GetTick>
 8005358:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d12e      	bne.n	80053c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f88c 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d021      	beq.n	80053c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005396:	653b      	str	r3, [r7, #80]	@ 0x50
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e062      	b.n	800548c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d149      	bne.n	8005468 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f856 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d03c      	beq.n	8005468 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	623b      	str	r3, [r7, #32]
   return(result);
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540c:	633b      	str	r3, [r7, #48]	@ 0x30
 800540e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005440:	61fa      	str	r2, [r7, #28]
 8005442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69b9      	ldr	r1, [r7, #24]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	617b      	str	r3, [r7, #20]
   return(result);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e011      	b.n	800548c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3758      	adds	r7, #88	@ 0x58
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a4:	e04f      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ac:	d04b      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fc fc65 	bl	8001d7c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e04e      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d037      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b80      	cmp	r3, #128	@ 0x80
 80054da:	d034      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b40      	cmp	r3, #64	@ 0x40
 80054e0:	d031      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d110      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f838 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2208      	movs	r2, #8
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e029      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005520:	d111      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800552a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f81e 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e00f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0a0      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556e:	b480      	push	{r7}
 8005570:	b095      	sub	sp, #84	@ 0x54
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800558a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
 8005596:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800559a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e6      	bne.n	8005576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3308      	adds	r3, #8
 80055c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d118      	bne.n	8005616 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 0310 	bic.w	r3, r3, #16
 80055f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	613b      	str	r3, [r7, #16]
   return(result);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800562a:	bf00      	nop
 800562c:	3754      	adds	r7, #84	@ 0x54
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff fb05 	bl	8004c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b088      	sub	sp, #32
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	60bb      	str	r3, [r7, #8]
   return(result);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	613b      	str	r3, [r7, #16]
   return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e6      	bne.n	800566a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fad1 	bl	8004c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <siprintf>:
 80056cc:	b40e      	push	{r1, r2, r3}
 80056ce:	b510      	push	{r4, lr}
 80056d0:	b09d      	sub	sp, #116	@ 0x74
 80056d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80056d4:	9002      	str	r0, [sp, #8]
 80056d6:	9006      	str	r0, [sp, #24]
 80056d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056dc:	480a      	ldr	r0, [pc, #40]	@ (8005708 <siprintf+0x3c>)
 80056de:	9107      	str	r1, [sp, #28]
 80056e0:	9104      	str	r1, [sp, #16]
 80056e2:	490a      	ldr	r1, [pc, #40]	@ (800570c <siprintf+0x40>)
 80056e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e8:	9105      	str	r1, [sp, #20]
 80056ea:	2400      	movs	r4, #0
 80056ec:	a902      	add	r1, sp, #8
 80056ee:	6800      	ldr	r0, [r0, #0]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80056f4:	f000 f8aa 	bl	800584c <_svfiprintf_r>
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	701c      	strb	r4, [r3, #0]
 80056fc:	b01d      	add	sp, #116	@ 0x74
 80056fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005702:	b003      	add	sp, #12
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000014 	.word	0x20000014
 800570c:	ffff0208 	.word	0xffff0208

08005710 <memset>:
 8005710:	4402      	add	r2, r0
 8005712:	4603      	mov	r3, r0
 8005714:	4293      	cmp	r3, r2
 8005716:	d100      	bne.n	800571a <memset+0xa>
 8005718:	4770      	bx	lr
 800571a:	f803 1b01 	strb.w	r1, [r3], #1
 800571e:	e7f9      	b.n	8005714 <memset+0x4>

08005720 <__errno>:
 8005720:	4b01      	ldr	r3, [pc, #4]	@ (8005728 <__errno+0x8>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000014 	.word	0x20000014

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	@ (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	@ (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	@ (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	@ (8005770 <__libc_init_array+0x44>)
 8005740:	f000 fc64 	bl	800600c <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08006470 	.word	0x08006470
 8005768:	08006470 	.word	0x08006470
 800576c:	08006470 	.word	0x08006470
 8005770:	08006474 	.word	0x08006474

08005774 <__retarget_lock_acquire_recursive>:
 8005774:	4770      	bx	lr

08005776 <__retarget_lock_release_recursive>:
 8005776:	4770      	bx	lr

08005778 <memcpy>:
 8005778:	440a      	add	r2, r1
 800577a:	4291      	cmp	r1, r2
 800577c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005780:	d100      	bne.n	8005784 <memcpy+0xc>
 8005782:	4770      	bx	lr
 8005784:	b510      	push	{r4, lr}
 8005786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800578a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578e:	4291      	cmp	r1, r2
 8005790:	d1f9      	bne.n	8005786 <memcpy+0xe>
 8005792:	bd10      	pop	{r4, pc}

08005794 <__ssputs_r>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	688e      	ldr	r6, [r1, #8]
 800579a:	461f      	mov	r7, r3
 800579c:	42be      	cmp	r6, r7
 800579e:	680b      	ldr	r3, [r1, #0]
 80057a0:	4682      	mov	sl, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4690      	mov	r8, r2
 80057a6:	d82d      	bhi.n	8005804 <__ssputs_r+0x70>
 80057a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057b0:	d026      	beq.n	8005800 <__ssputs_r+0x6c>
 80057b2:	6965      	ldr	r5, [r4, #20]
 80057b4:	6909      	ldr	r1, [r1, #16]
 80057b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ba:	eba3 0901 	sub.w	r9, r3, r1
 80057be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057c2:	1c7b      	adds	r3, r7, #1
 80057c4:	444b      	add	r3, r9
 80057c6:	106d      	asrs	r5, r5, #1
 80057c8:	429d      	cmp	r5, r3
 80057ca:	bf38      	it	cc
 80057cc:	461d      	movcc	r5, r3
 80057ce:	0553      	lsls	r3, r2, #21
 80057d0:	d527      	bpl.n	8005822 <__ssputs_r+0x8e>
 80057d2:	4629      	mov	r1, r5
 80057d4:	f000 f958 	bl	8005a88 <_malloc_r>
 80057d8:	4606      	mov	r6, r0
 80057da:	b360      	cbz	r0, 8005836 <__ssputs_r+0xa2>
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	464a      	mov	r2, r9
 80057e0:	f7ff ffca 	bl	8005778 <memcpy>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	6126      	str	r6, [r4, #16]
 80057f2:	6165      	str	r5, [r4, #20]
 80057f4:	444e      	add	r6, r9
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	6026      	str	r6, [r4, #0]
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	463e      	mov	r6, r7
 8005800:	42be      	cmp	r6, r7
 8005802:	d900      	bls.n	8005806 <__ssputs_r+0x72>
 8005804:	463e      	mov	r6, r7
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	4632      	mov	r2, r6
 800580a:	4641      	mov	r1, r8
 800580c:	f000 fb82 	bl	8005f14 <memmove>
 8005810:	68a3      	ldr	r3, [r4, #8]
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	60a3      	str	r3, [r4, #8]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	4433      	add	r3, r6
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	462a      	mov	r2, r5
 8005824:	f000 fb48 	bl	8005eb8 <_realloc_r>
 8005828:	4606      	mov	r6, r0
 800582a:	2800      	cmp	r0, #0
 800582c:	d1e0      	bne.n	80057f0 <__ssputs_r+0x5c>
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	4650      	mov	r0, sl
 8005832:	f000 fb99 	bl	8005f68 <_free_r>
 8005836:	230c      	movs	r3, #12
 8005838:	f8ca 3000 	str.w	r3, [sl]
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005848:	e7e9      	b.n	800581e <__ssputs_r+0x8a>
	...

0800584c <_svfiprintf_r>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	4698      	mov	r8, r3
 8005852:	898b      	ldrh	r3, [r1, #12]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	b09d      	sub	sp, #116	@ 0x74
 8005858:	4607      	mov	r7, r0
 800585a:	460d      	mov	r5, r1
 800585c:	4614      	mov	r4, r2
 800585e:	d510      	bpl.n	8005882 <_svfiprintf_r+0x36>
 8005860:	690b      	ldr	r3, [r1, #16]
 8005862:	b973      	cbnz	r3, 8005882 <_svfiprintf_r+0x36>
 8005864:	2140      	movs	r1, #64	@ 0x40
 8005866:	f000 f90f 	bl	8005a88 <_malloc_r>
 800586a:	6028      	str	r0, [r5, #0]
 800586c:	6128      	str	r0, [r5, #16]
 800586e:	b930      	cbnz	r0, 800587e <_svfiprintf_r+0x32>
 8005870:	230c      	movs	r3, #12
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005878:	b01d      	add	sp, #116	@ 0x74
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	2340      	movs	r3, #64	@ 0x40
 8005880:	616b      	str	r3, [r5, #20]
 8005882:	2300      	movs	r3, #0
 8005884:	9309      	str	r3, [sp, #36]	@ 0x24
 8005886:	2320      	movs	r3, #32
 8005888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800588c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005890:	2330      	movs	r3, #48	@ 0x30
 8005892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a30 <_svfiprintf_r+0x1e4>
 8005896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800589a:	f04f 0901 	mov.w	r9, #1
 800589e:	4623      	mov	r3, r4
 80058a0:	469a      	mov	sl, r3
 80058a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a6:	b10a      	cbz	r2, 80058ac <_svfiprintf_r+0x60>
 80058a8:	2a25      	cmp	r2, #37	@ 0x25
 80058aa:	d1f9      	bne.n	80058a0 <_svfiprintf_r+0x54>
 80058ac:	ebba 0b04 	subs.w	fp, sl, r4
 80058b0:	d00b      	beq.n	80058ca <_svfiprintf_r+0x7e>
 80058b2:	465b      	mov	r3, fp
 80058b4:	4622      	mov	r2, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	4638      	mov	r0, r7
 80058ba:	f7ff ff6b 	bl	8005794 <__ssputs_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	f000 80a7 	beq.w	8005a12 <_svfiprintf_r+0x1c6>
 80058c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c6:	445a      	add	r2, fp
 80058c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ca:	f89a 3000 	ldrb.w	r3, [sl]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 809f 	beq.w	8005a12 <_svfiprintf_r+0x1c6>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058de:	f10a 0a01 	add.w	sl, sl, #1
 80058e2:	9304      	str	r3, [sp, #16]
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80058ec:	4654      	mov	r4, sl
 80058ee:	2205      	movs	r2, #5
 80058f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f4:	484e      	ldr	r0, [pc, #312]	@ (8005a30 <_svfiprintf_r+0x1e4>)
 80058f6:	f7fa fc73 	bl	80001e0 <memchr>
 80058fa:	9a04      	ldr	r2, [sp, #16]
 80058fc:	b9d8      	cbnz	r0, 8005936 <_svfiprintf_r+0xea>
 80058fe:	06d0      	lsls	r0, r2, #27
 8005900:	bf44      	itt	mi
 8005902:	2320      	movmi	r3, #32
 8005904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005908:	0711      	lsls	r1, r2, #28
 800590a:	bf44      	itt	mi
 800590c:	232b      	movmi	r3, #43	@ 0x2b
 800590e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b2a      	cmp	r3, #42	@ 0x2a
 8005918:	d015      	beq.n	8005946 <_svfiprintf_r+0xfa>
 800591a:	9a07      	ldr	r2, [sp, #28]
 800591c:	4654      	mov	r4, sl
 800591e:	2000      	movs	r0, #0
 8005920:	f04f 0c0a 	mov.w	ip, #10
 8005924:	4621      	mov	r1, r4
 8005926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592a:	3b30      	subs	r3, #48	@ 0x30
 800592c:	2b09      	cmp	r3, #9
 800592e:	d94b      	bls.n	80059c8 <_svfiprintf_r+0x17c>
 8005930:	b1b0      	cbz	r0, 8005960 <_svfiprintf_r+0x114>
 8005932:	9207      	str	r2, [sp, #28]
 8005934:	e014      	b.n	8005960 <_svfiprintf_r+0x114>
 8005936:	eba0 0308 	sub.w	r3, r0, r8
 800593a:	fa09 f303 	lsl.w	r3, r9, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	46a2      	mov	sl, r4
 8005944:	e7d2      	b.n	80058ec <_svfiprintf_r+0xa0>
 8005946:	9b03      	ldr	r3, [sp, #12]
 8005948:	1d19      	adds	r1, r3, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	9103      	str	r1, [sp, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfbb      	ittet	lt
 8005952:	425b      	neglt	r3, r3
 8005954:	f042 0202 	orrlt.w	r2, r2, #2
 8005958:	9307      	strge	r3, [sp, #28]
 800595a:	9307      	strlt	r3, [sp, #28]
 800595c:	bfb8      	it	lt
 800595e:	9204      	strlt	r2, [sp, #16]
 8005960:	7823      	ldrb	r3, [r4, #0]
 8005962:	2b2e      	cmp	r3, #46	@ 0x2e
 8005964:	d10a      	bne.n	800597c <_svfiprintf_r+0x130>
 8005966:	7863      	ldrb	r3, [r4, #1]
 8005968:	2b2a      	cmp	r3, #42	@ 0x2a
 800596a:	d132      	bne.n	80059d2 <_svfiprintf_r+0x186>
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	9203      	str	r2, [sp, #12]
 8005974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005978:	3402      	adds	r4, #2
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a40 <_svfiprintf_r+0x1f4>
 8005980:	7821      	ldrb	r1, [r4, #0]
 8005982:	2203      	movs	r2, #3
 8005984:	4650      	mov	r0, sl
 8005986:	f7fa fc2b 	bl	80001e0 <memchr>
 800598a:	b138      	cbz	r0, 800599c <_svfiprintf_r+0x150>
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	eba0 000a 	sub.w	r0, r0, sl
 8005992:	2240      	movs	r2, #64	@ 0x40
 8005994:	4082      	lsls	r2, r0
 8005996:	4313      	orrs	r3, r2
 8005998:	3401      	adds	r4, #1
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a0:	4824      	ldr	r0, [pc, #144]	@ (8005a34 <_svfiprintf_r+0x1e8>)
 80059a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059a6:	2206      	movs	r2, #6
 80059a8:	f7fa fc1a 	bl	80001e0 <memchr>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d036      	beq.n	8005a1e <_svfiprintf_r+0x1d2>
 80059b0:	4b21      	ldr	r3, [pc, #132]	@ (8005a38 <_svfiprintf_r+0x1ec>)
 80059b2:	bb1b      	cbnz	r3, 80059fc <_svfiprintf_r+0x1b0>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	3307      	adds	r3, #7
 80059b8:	f023 0307 	bic.w	r3, r3, #7
 80059bc:	3308      	adds	r3, #8
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c2:	4433      	add	r3, r6
 80059c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c6:	e76a      	b.n	800589e <_svfiprintf_r+0x52>
 80059c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059cc:	460c      	mov	r4, r1
 80059ce:	2001      	movs	r0, #1
 80059d0:	e7a8      	b.n	8005924 <_svfiprintf_r+0xd8>
 80059d2:	2300      	movs	r3, #0
 80059d4:	3401      	adds	r4, #1
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 0c0a 	mov.w	ip, #10
 80059de:	4620      	mov	r0, r4
 80059e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e4:	3a30      	subs	r2, #48	@ 0x30
 80059e6:	2a09      	cmp	r2, #9
 80059e8:	d903      	bls.n	80059f2 <_svfiprintf_r+0x1a6>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c6      	beq.n	800597c <_svfiprintf_r+0x130>
 80059ee:	9105      	str	r1, [sp, #20]
 80059f0:	e7c4      	b.n	800597c <_svfiprintf_r+0x130>
 80059f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059f6:	4604      	mov	r4, r0
 80059f8:	2301      	movs	r3, #1
 80059fa:	e7f0      	b.n	80059de <_svfiprintf_r+0x192>
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	462a      	mov	r2, r5
 8005a02:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <_svfiprintf_r+0x1f0>)
 8005a04:	a904      	add	r1, sp, #16
 8005a06:	4638      	mov	r0, r7
 8005a08:	f3af 8000 	nop.w
 8005a0c:	1c42      	adds	r2, r0, #1
 8005a0e:	4606      	mov	r6, r0
 8005a10:	d1d6      	bne.n	80059c0 <_svfiprintf_r+0x174>
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	065b      	lsls	r3, r3, #25
 8005a16:	f53f af2d 	bmi.w	8005874 <_svfiprintf_r+0x28>
 8005a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a1c:	e72c      	b.n	8005878 <_svfiprintf_r+0x2c>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <_svfiprintf_r+0x1f0>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f000 f91b 	bl	8005c64 <_printf_i>
 8005a2e:	e7ed      	b.n	8005a0c <_svfiprintf_r+0x1c0>
 8005a30:	08006434 	.word	0x08006434
 8005a34:	0800643e 	.word	0x0800643e
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	08005795 	.word	0x08005795
 8005a40:	0800643a 	.word	0x0800643a

08005a44 <sbrk_aligned>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4e0f      	ldr	r6, [pc, #60]	@ (8005a84 <sbrk_aligned+0x40>)
 8005a48:	460c      	mov	r4, r1
 8005a4a:	6831      	ldr	r1, [r6, #0]
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	b911      	cbnz	r1, 8005a56 <sbrk_aligned+0x12>
 8005a50:	f000 fa7a 	bl	8005f48 <_sbrk_r>
 8005a54:	6030      	str	r0, [r6, #0]
 8005a56:	4621      	mov	r1, r4
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f000 fa75 	bl	8005f48 <_sbrk_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	d103      	bne.n	8005a6a <sbrk_aligned+0x26>
 8005a62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a66:	4620      	mov	r0, r4
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	1cc4      	adds	r4, r0, #3
 8005a6c:	f024 0403 	bic.w	r4, r4, #3
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d0f8      	beq.n	8005a66 <sbrk_aligned+0x22>
 8005a74:	1a21      	subs	r1, r4, r0
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 fa66 	bl	8005f48 <_sbrk_r>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d1f2      	bne.n	8005a66 <sbrk_aligned+0x22>
 8005a80:	e7ef      	b.n	8005a62 <sbrk_aligned+0x1e>
 8005a82:	bf00      	nop
 8005a84:	20000320 	.word	0x20000320

08005a88 <_malloc_r>:
 8005a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a8c:	1ccd      	adds	r5, r1, #3
 8005a8e:	f025 0503 	bic.w	r5, r5, #3
 8005a92:	3508      	adds	r5, #8
 8005a94:	2d0c      	cmp	r5, #12
 8005a96:	bf38      	it	cc
 8005a98:	250c      	movcc	r5, #12
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	db01      	blt.n	8005aa4 <_malloc_r+0x1c>
 8005aa0:	42a9      	cmp	r1, r5
 8005aa2:	d904      	bls.n	8005aae <_malloc_r+0x26>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	6033      	str	r3, [r6, #0]
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b84 <_malloc_r+0xfc>
 8005ab2:	f000 f9f5 	bl	8005ea0 <__malloc_lock>
 8005ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aba:	461c      	mov	r4, r3
 8005abc:	bb44      	cbnz	r4, 8005b10 <_malloc_r+0x88>
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f7ff ffbf 	bl	8005a44 <sbrk_aligned>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	4604      	mov	r4, r0
 8005aca:	d158      	bne.n	8005b7e <_malloc_r+0xf6>
 8005acc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ad0:	4627      	mov	r7, r4
 8005ad2:	2f00      	cmp	r7, #0
 8005ad4:	d143      	bne.n	8005b5e <_malloc_r+0xd6>
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	d04b      	beq.n	8005b72 <_malloc_r+0xea>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4639      	mov	r1, r7
 8005ade:	4630      	mov	r0, r6
 8005ae0:	eb04 0903 	add.w	r9, r4, r3
 8005ae4:	f000 fa30 	bl	8005f48 <_sbrk_r>
 8005ae8:	4581      	cmp	r9, r0
 8005aea:	d142      	bne.n	8005b72 <_malloc_r+0xea>
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	1a6d      	subs	r5, r5, r1
 8005af0:	4629      	mov	r1, r5
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff ffa6 	bl	8005a44 <sbrk_aligned>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d03a      	beq.n	8005b72 <_malloc_r+0xea>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	442b      	add	r3, r5
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	f8d8 3000 	ldr.w	r3, [r8]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	bb62      	cbnz	r2, 8005b64 <_malloc_r+0xdc>
 8005b0a:	f8c8 7000 	str.w	r7, [r8]
 8005b0e:	e00f      	b.n	8005b30 <_malloc_r+0xa8>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	1b52      	subs	r2, r2, r5
 8005b14:	d420      	bmi.n	8005b58 <_malloc_r+0xd0>
 8005b16:	2a0b      	cmp	r2, #11
 8005b18:	d917      	bls.n	8005b4a <_malloc_r+0xc2>
 8005b1a:	1961      	adds	r1, r4, r5
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	6025      	str	r5, [r4, #0]
 8005b20:	bf18      	it	ne
 8005b22:	6059      	strne	r1, [r3, #4]
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	bf08      	it	eq
 8005b28:	f8c8 1000 	streq.w	r1, [r8]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 f9bb 	bl	8005eac <__malloc_unlock>
 8005b36:	f104 000b 	add.w	r0, r4, #11
 8005b3a:	1d23      	adds	r3, r4, #4
 8005b3c:	f020 0007 	bic.w	r0, r0, #7
 8005b40:	1ac2      	subs	r2, r0, r3
 8005b42:	bf1c      	itt	ne
 8005b44:	1a1b      	subne	r3, r3, r0
 8005b46:	50a3      	strne	r3, [r4, r2]
 8005b48:	e7af      	b.n	8005aaa <_malloc_r+0x22>
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	bf0c      	ite	eq
 8005b50:	f8c8 2000 	streq.w	r2, [r8]
 8005b54:	605a      	strne	r2, [r3, #4]
 8005b56:	e7eb      	b.n	8005b30 <_malloc_r+0xa8>
 8005b58:	4623      	mov	r3, r4
 8005b5a:	6864      	ldr	r4, [r4, #4]
 8005b5c:	e7ae      	b.n	8005abc <_malloc_r+0x34>
 8005b5e:	463c      	mov	r4, r7
 8005b60:	687f      	ldr	r7, [r7, #4]
 8005b62:	e7b6      	b.n	8005ad2 <_malloc_r+0x4a>
 8005b64:	461a      	mov	r2, r3
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d1fb      	bne.n	8005b64 <_malloc_r+0xdc>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6053      	str	r3, [r2, #4]
 8005b70:	e7de      	b.n	8005b30 <_malloc_r+0xa8>
 8005b72:	230c      	movs	r3, #12
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	4630      	mov	r0, r6
 8005b78:	f000 f998 	bl	8005eac <__malloc_unlock>
 8005b7c:	e794      	b.n	8005aa8 <_malloc_r+0x20>
 8005b7e:	6005      	str	r5, [r0, #0]
 8005b80:	e7d6      	b.n	8005b30 <_malloc_r+0xa8>
 8005b82:	bf00      	nop
 8005b84:	20000324 	.word	0x20000324

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	4698      	mov	r8, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b10a      	cbz	r2, 8005bae <_printf_common+0x26>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0699      	lsls	r1, r3, #26
 8005bb2:	bf42      	ittt	mi
 8005bb4:	6833      	ldrmi	r3, [r6, #0]
 8005bb6:	3302      	addmi	r3, #2
 8005bb8:	6033      	strmi	r3, [r6, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d106      	bne.n	8005bd0 <_printf_common+0x48>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	6832      	ldr	r2, [r6, #0]
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dc26      	bgt.n	8005c1e <_printf_common+0x96>
 8005bd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bd4:	6822      	ldr	r2, [r4, #0]
 8005bd6:	3b00      	subs	r3, #0
 8005bd8:	bf18      	it	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	0692      	lsls	r2, r2, #26
 8005bde:	d42b      	bmi.n	8005c38 <_printf_common+0xb0>
 8005be0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005be4:	4641      	mov	r1, r8
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c8      	blx	r9
 8005bea:	3001      	adds	r0, #1
 8005bec:	d01e      	beq.n	8005c2c <_printf_common+0xa4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	bf02      	ittt	eq
 8005bfa:	68e5      	ldreq	r5, [r4, #12]
 8005bfc:	6833      	ldreq	r3, [r6, #0]
 8005bfe:	1aed      	subeq	r5, r5, r3
 8005c00:	68a3      	ldr	r3, [r4, #8]
 8005c02:	bf0c      	ite	eq
 8005c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c08:	2500      	movne	r5, #0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bfc4      	itt	gt
 8005c0e:	1a9b      	subgt	r3, r3, r2
 8005c10:	18ed      	addgt	r5, r5, r3
 8005c12:	2600      	movs	r6, #0
 8005c14:	341a      	adds	r4, #26
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	d11a      	bne.n	8005c50 <_printf_common+0xc8>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e008      	b.n	8005c30 <_printf_common+0xa8>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4641      	mov	r1, r8
 8005c24:	4638      	mov	r0, r7
 8005c26:	47c8      	blx	r9
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d103      	bne.n	8005c34 <_printf_common+0xac>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7c6      	b.n	8005bc6 <_printf_common+0x3e>
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	2030      	movs	r0, #48	@ 0x30
 8005c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c42:	4422      	add	r2, r4
 8005c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	e7c7      	b.n	8005be0 <_printf_common+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4622      	mov	r2, r4
 8005c54:	4641      	mov	r1, r8
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c8      	blx	r9
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d0e6      	beq.n	8005c2c <_printf_common+0xa4>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7d9      	b.n	8005c16 <_printf_common+0x8e>
	...

08005c64 <_printf_i>:
 8005c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	7e0f      	ldrb	r7, [r1, #24]
 8005c6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c6c:	2f78      	cmp	r7, #120	@ 0x78
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4680      	mov	r8, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	469a      	mov	sl, r3
 8005c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c7a:	d807      	bhi.n	8005c8c <_printf_i+0x28>
 8005c7c:	2f62      	cmp	r7, #98	@ 0x62
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x32>
 8005c80:	2f00      	cmp	r7, #0
 8005c82:	f000 80d1 	beq.w	8005e28 <_printf_i+0x1c4>
 8005c86:	2f58      	cmp	r7, #88	@ 0x58
 8005c88:	f000 80b8 	beq.w	8005dfc <_printf_i+0x198>
 8005c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c94:	e03a      	b.n	8005d0c <_printf_i+0xa8>
 8005c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c9a:	2b15      	cmp	r3, #21
 8005c9c:	d8f6      	bhi.n	8005c8c <_printf_i+0x28>
 8005c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ca4 <_printf_i+0x40>)
 8005ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005c8d 	.word	0x08005c8d
 8005cb0:	08005c8d 	.word	0x08005c8d
 8005cb4:	08005c8d 	.word	0x08005c8d
 8005cb8:	08005c8d 	.word	0x08005c8d
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005c8d 	.word	0x08005c8d
 8005cc4:	08005c8d 	.word	0x08005c8d
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005e0f 	.word	0x08005e0f
 8005cd4:	08005d3b 	.word	0x08005d3b
 8005cd8:	08005dc9 	.word	0x08005dc9
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e31 	.word	0x08005e31
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005d3b 	.word	0x08005d3b
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005dd1 	.word	0x08005dd1
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6032      	str	r2, [r6, #0]
 8005d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e09c      	b.n	8005e4a <_printf_i+0x1e6>
 8005d10:	6833      	ldr	r3, [r6, #0]
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	6031      	str	r1, [r6, #0]
 8005d18:	0606      	lsls	r6, r0, #24
 8005d1a:	d501      	bpl.n	8005d20 <_printf_i+0xbc>
 8005d1c:	681d      	ldr	r5, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <_printf_i+0xc4>
 8005d20:	0645      	lsls	r5, r0, #25
 8005d22:	d5fb      	bpl.n	8005d1c <_printf_i+0xb8>
 8005d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	da03      	bge.n	8005d34 <_printf_i+0xd0>
 8005d2c:	232d      	movs	r3, #45	@ 0x2d
 8005d2e:	426d      	negs	r5, r5
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d34:	4858      	ldr	r0, [pc, #352]	@ (8005e98 <_printf_i+0x234>)
 8005d36:	230a      	movs	r3, #10
 8005d38:	e011      	b.n	8005d5e <_printf_i+0xfa>
 8005d3a:	6821      	ldr	r1, [r4, #0]
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	0608      	lsls	r0, r1, #24
 8005d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d44:	d402      	bmi.n	8005d4c <_printf_i+0xe8>
 8005d46:	0649      	lsls	r1, r1, #25
 8005d48:	bf48      	it	mi
 8005d4a:	b2ad      	uxthmi	r5, r5
 8005d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d4e:	4852      	ldr	r0, [pc, #328]	@ (8005e98 <_printf_i+0x234>)
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	bf14      	ite	ne
 8005d54:	230a      	movne	r3, #10
 8005d56:	2308      	moveq	r3, #8
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d5e:	6866      	ldr	r6, [r4, #4]
 8005d60:	60a6      	str	r6, [r4, #8]
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	db05      	blt.n	8005d72 <_printf_i+0x10e>
 8005d66:	6821      	ldr	r1, [r4, #0]
 8005d68:	432e      	orrs	r6, r5
 8005d6a:	f021 0104 	bic.w	r1, r1, #4
 8005d6e:	6021      	str	r1, [r4, #0]
 8005d70:	d04b      	beq.n	8005e0a <_printf_i+0x1a6>
 8005d72:	4616      	mov	r6, r2
 8005d74:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d78:	fb03 5711 	mls	r7, r3, r1, r5
 8005d7c:	5dc7      	ldrb	r7, [r0, r7]
 8005d7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d82:	462f      	mov	r7, r5
 8005d84:	42bb      	cmp	r3, r7
 8005d86:	460d      	mov	r5, r1
 8005d88:	d9f4      	bls.n	8005d74 <_printf_i+0x110>
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d10b      	bne.n	8005da6 <_printf_i+0x142>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	07df      	lsls	r7, r3, #31
 8005d92:	d508      	bpl.n	8005da6 <_printf_i+0x142>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	6861      	ldr	r1, [r4, #4]
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	bfde      	ittt	le
 8005d9c:	2330      	movle	r3, #48	@ 0x30
 8005d9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005da2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005da6:	1b92      	subs	r2, r2, r6
 8005da8:	6122      	str	r2, [r4, #16]
 8005daa:	f8cd a000 	str.w	sl, [sp]
 8005dae:	464b      	mov	r3, r9
 8005db0:	aa03      	add	r2, sp, #12
 8005db2:	4621      	mov	r1, r4
 8005db4:	4640      	mov	r0, r8
 8005db6:	f7ff fee7 	bl	8005b88 <_printf_common>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d14a      	bne.n	8005e54 <_printf_i+0x1f0>
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dc2:	b004      	add	sp, #16
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	f043 0320 	orr.w	r3, r3, #32
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	4832      	ldr	r0, [pc, #200]	@ (8005e9c <_printf_i+0x238>)
 8005dd2:	2778      	movs	r7, #120	@ 0x78
 8005dd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	6831      	ldr	r1, [r6, #0]
 8005ddc:	061f      	lsls	r7, r3, #24
 8005dde:	f851 5b04 	ldr.w	r5, [r1], #4
 8005de2:	d402      	bmi.n	8005dea <_printf_i+0x186>
 8005de4:	065f      	lsls	r7, r3, #25
 8005de6:	bf48      	it	mi
 8005de8:	b2ad      	uxthmi	r5, r5
 8005dea:	6031      	str	r1, [r6, #0]
 8005dec:	07d9      	lsls	r1, r3, #31
 8005dee:	bf44      	itt	mi
 8005df0:	f043 0320 	orrmi.w	r3, r3, #32
 8005df4:	6023      	strmi	r3, [r4, #0]
 8005df6:	b11d      	cbz	r5, 8005e00 <_printf_i+0x19c>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	e7ad      	b.n	8005d58 <_printf_i+0xf4>
 8005dfc:	4826      	ldr	r0, [pc, #152]	@ (8005e98 <_printf_i+0x234>)
 8005dfe:	e7e9      	b.n	8005dd4 <_printf_i+0x170>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	f023 0320 	bic.w	r3, r3, #32
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	e7f6      	b.n	8005df8 <_printf_i+0x194>
 8005e0a:	4616      	mov	r6, r2
 8005e0c:	e7bd      	b.n	8005d8a <_printf_i+0x126>
 8005e0e:	6833      	ldr	r3, [r6, #0]
 8005e10:	6825      	ldr	r5, [r4, #0]
 8005e12:	6961      	ldr	r1, [r4, #20]
 8005e14:	1d18      	adds	r0, r3, #4
 8005e16:	6030      	str	r0, [r6, #0]
 8005e18:	062e      	lsls	r6, r5, #24
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	d501      	bpl.n	8005e22 <_printf_i+0x1be>
 8005e1e:	6019      	str	r1, [r3, #0]
 8005e20:	e002      	b.n	8005e28 <_printf_i+0x1c4>
 8005e22:	0668      	lsls	r0, r5, #25
 8005e24:	d5fb      	bpl.n	8005e1e <_printf_i+0x1ba>
 8005e26:	8019      	strh	r1, [r3, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6123      	str	r3, [r4, #16]
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	e7bc      	b.n	8005daa <_printf_i+0x146>
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	1d1a      	adds	r2, r3, #4
 8005e34:	6032      	str	r2, [r6, #0]
 8005e36:	681e      	ldr	r6, [r3, #0]
 8005e38:	6862      	ldr	r2, [r4, #4]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7fa f9cf 	bl	80001e0 <memchr>
 8005e42:	b108      	cbz	r0, 8005e48 <_printf_i+0x1e4>
 8005e44:	1b80      	subs	r0, r0, r6
 8005e46:	6060      	str	r0, [r4, #4]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e52:	e7aa      	b.n	8005daa <_printf_i+0x146>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	4632      	mov	r2, r6
 8005e58:	4649      	mov	r1, r9
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	47d0      	blx	sl
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d0ad      	beq.n	8005dbe <_printf_i+0x15a>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	079b      	lsls	r3, r3, #30
 8005e66:	d413      	bmi.n	8005e90 <_printf_i+0x22c>
 8005e68:	68e0      	ldr	r0, [r4, #12]
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	4298      	cmp	r0, r3
 8005e6e:	bfb8      	it	lt
 8005e70:	4618      	movlt	r0, r3
 8005e72:	e7a6      	b.n	8005dc2 <_printf_i+0x15e>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4632      	mov	r2, r6
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	47d0      	blx	sl
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d09d      	beq.n	8005dbe <_printf_i+0x15a>
 8005e82:	3501      	adds	r5, #1
 8005e84:	68e3      	ldr	r3, [r4, #12]
 8005e86:	9903      	ldr	r1, [sp, #12]
 8005e88:	1a5b      	subs	r3, r3, r1
 8005e8a:	42ab      	cmp	r3, r5
 8005e8c:	dcf2      	bgt.n	8005e74 <_printf_i+0x210>
 8005e8e:	e7eb      	b.n	8005e68 <_printf_i+0x204>
 8005e90:	2500      	movs	r5, #0
 8005e92:	f104 0619 	add.w	r6, r4, #25
 8005e96:	e7f5      	b.n	8005e84 <_printf_i+0x220>
 8005e98:	08006445 	.word	0x08006445
 8005e9c:	08006456 	.word	0x08006456

08005ea0 <__malloc_lock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	@ (8005ea8 <__malloc_lock+0x8>)
 8005ea2:	f7ff bc67 	b.w	8005774 <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	2000031c 	.word	0x2000031c

08005eac <__malloc_unlock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	@ (8005eb4 <__malloc_unlock+0x8>)
 8005eae:	f7ff bc62 	b.w	8005776 <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	2000031c 	.word	0x2000031c

08005eb8 <_realloc_r>:
 8005eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	4614      	mov	r4, r2
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	b921      	cbnz	r1, 8005ece <_realloc_r+0x16>
 8005ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec8:	4611      	mov	r1, r2
 8005eca:	f7ff bddd 	b.w	8005a88 <_malloc_r>
 8005ece:	b92a      	cbnz	r2, 8005edc <_realloc_r+0x24>
 8005ed0:	f000 f84a 	bl	8005f68 <_free_r>
 8005ed4:	4625      	mov	r5, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005edc:	f000 f88e 	bl	8005ffc <_malloc_usable_size_r>
 8005ee0:	4284      	cmp	r4, r0
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	d802      	bhi.n	8005eec <_realloc_r+0x34>
 8005ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eea:	d8f4      	bhi.n	8005ed6 <_realloc_r+0x1e>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f7ff fdca 	bl	8005a88 <_malloc_r>
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	b908      	cbnz	r0, 8005efc <_realloc_r+0x44>
 8005ef8:	4645      	mov	r5, r8
 8005efa:	e7ec      	b.n	8005ed6 <_realloc_r+0x1e>
 8005efc:	42b4      	cmp	r4, r6
 8005efe:	4622      	mov	r2, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	bf28      	it	cs
 8005f04:	4632      	movcs	r2, r6
 8005f06:	f7ff fc37 	bl	8005778 <memcpy>
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f000 f82b 	bl	8005f68 <_free_r>
 8005f12:	e7f1      	b.n	8005ef8 <_realloc_r+0x40>

08005f14 <memmove>:
 8005f14:	4288      	cmp	r0, r1
 8005f16:	b510      	push	{r4, lr}
 8005f18:	eb01 0402 	add.w	r4, r1, r2
 8005f1c:	d902      	bls.n	8005f24 <memmove+0x10>
 8005f1e:	4284      	cmp	r4, r0
 8005f20:	4623      	mov	r3, r4
 8005f22:	d807      	bhi.n	8005f34 <memmove+0x20>
 8005f24:	1e43      	subs	r3, r0, #1
 8005f26:	42a1      	cmp	r1, r4
 8005f28:	d008      	beq.n	8005f3c <memmove+0x28>
 8005f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f32:	e7f8      	b.n	8005f26 <memmove+0x12>
 8005f34:	4402      	add	r2, r0
 8005f36:	4601      	mov	r1, r0
 8005f38:	428a      	cmp	r2, r1
 8005f3a:	d100      	bne.n	8005f3e <memmove+0x2a>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f46:	e7f7      	b.n	8005f38 <memmove+0x24>

08005f48 <_sbrk_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d06      	ldr	r5, [pc, #24]	@ (8005f64 <_sbrk_r+0x1c>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fb fde8 	bl	8001b28 <_sbrk>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_sbrk_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_sbrk_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20000328 	.word	0x20000328

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d041      	beq.n	8005ff4 <_free_r+0x8c>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f7ff ff90 	bl	8005ea0 <__malloc_lock>
 8005f80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff8 <_free_r+0x90>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f7ff bf8c 	b.w	8005eac <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4408      	add	r0, r1
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x22>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000324 	.word	0x20000324

08005ffc <_malloc_usable_size_r>:
 8005ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006000:	1f18      	subs	r0, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfbc      	itt	lt
 8006006:	580b      	ldrlt	r3, [r1, r0]
 8006008:	18c0      	addlt	r0, r0, r3
 800600a:	4770      	bx	lr

0800600c <_init>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr

08006018 <_fini>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr
